(()=>{var t={1129:t=>{t.exports=t=>({})},5504:(t,e,a)=>{const s=a(1521),o=a(3237),n=a(7221);t.exports=t=>t.app.meta.util.mixinClasses(s,[o,n],t)},1521:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var a=0,s=new Array(e);a<e;a++)s[a]=t[a];return s}t.exports=t=>{const a=t.app.meta.mockUtil.parseInfoFromPackage(__dirname);return class{get modelFlowTask(){return t.model.module(a.relativeName).flowTask}get modelFlowTaskHistory(){return t.model.module(a.relativeName).flowTaskHistory}get localRight(){return t.bean._getBean(a.relativeName,"local.right")}get sqlProcedure(){return t.bean._getBean(a.relativeName,"local.procedure")}async count(t){let{options:e,user:a}=t;return await this.select({options:e,user:a,count:1})}async select(a){let{options:s,user:o,pageForce:n=!0,count:i=0}=a;const l=await this._list({options:s,user:o,pageForce:n,count:i});var r,c=function(t,a){var s="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!s){if(Array.isArray(t)||(s=function(t,a){if(t){if("string"==typeof t)return e(t,a);var s=Object.prototype.toString.call(t).slice(8,-1);return"Object"===s&&t.constructor&&(s=t.constructor.name),"Map"===s||"Set"===s?Array.from(t):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?e(t,a):void 0}}(t))||a&&t&&"number"==typeof t.length){s&&(t=s);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,r=!1;return{s:function(){s=s.call(t)},n:function(){var t=s.next();return l=t.done,t},e:function(t){r=!0,i=t},f:function(){try{l||null==s.return||s.return()}finally{if(r)throw i}}}}(l);try{for(c.s();!(r=c.n()).done;){const e=r.value;e.flowNodeNameLocale=t.text(e.flowNodeName),e.flowNodeRemark&&(e.flowNodeRemarkLocale=t.text(e.flowNodeRemark)),e.handleRemark&&(e.handleRemarkLocale=t.text(e.handleRemark))}}catch(t){c.e(t)}finally{c.f()}return l}async claim(t){let{flowTaskId:e,user:a}=t;const s=await this._loadTaskInstance({flowTaskId:e,user:a});return await s._claim()}async complete(t){let{flowTaskId:e,handle:a,formAtom:s,user:o}=t;const n=await this._loadTaskInstance({flowTaskId:e,user:o});await n._complete({handle:a,formAtom:s})}async appendHandleRemark(t){let{flowTaskId:e,handle:a,user:s}=t;const o=await this._loadTaskInstance({flowTaskId:e,user:s,history:!0});await o._appendHandleRemark({handle:a})}async assignees(t){let{flowTaskId:e,user:a}=t;const s=await this._loadTaskInstance({flowTaskId:e,user:a});return await s._assignees()}async assigneesConfirmation(t){let{flowTaskId:e,handle:a,user:s}=t;const o=await this._loadTaskInstance({flowTaskId:e,user:s});await o._assigneesConfirmation({handle:a})}async recall(t){let{flowTaskId:e,user:a}=t;const s=await this._loadTaskInstance({flowTaskId:e,user:a});await s._recall()}async cancelFlow(t){let{flowTaskId:e,handle:a,user:s}=t;const o=await this._loadTaskInstance({flowTaskId:e,user:s});await o._cancelFlow({handle:a})}async viewAtom(t){let{flowTaskId:e,user:a}=t;const s=await this._loadTaskInstance({flowTaskId:e,user:a,history:!0});return await s._viewAtom()}async editAtom(t){let{flowTaskId:e,user:a}=t;const s=await this._loadTaskInstance({flowTaskId:e,user:a,history:!1});return await s._editAtom()}async forward(t){let{flowTaskId:e,handle:a,user:s}=t;const o=await this._loadTaskInstance({flowTaskId:e,user:s});await o._forward({handle:a})}async forwardRecall(t){let{flowTaskId:e,user:a}=t;const s=await this._loadTaskInstance({flowTaskId:e,user:a});await s._forwardRecall()}async substitute(t){let{flowTaskId:e,handle:a,user:s}=t;const o=await this._loadTaskInstance({flowTaskId:e,user:s});await o._substitute({handle:a})}async substituteRecall(t){let{flowTaskId:e,user:a}=t;const s=await this._loadTaskInstance({flowTaskId:e,user:a});await s._substituteRecall()}async flowData(t){let{flowId:e,user:a}=t;const s=await this._flowData_flow({flowId:e,user:a});if(!s)return null;const o=await this._flowData_atom({flowId:e,atomId:s.flowAtomId});return{flow:s,atom:o,tasks:await this._flowData_tasks({flow:s,atom:o,flowId:e,user:a})}}}}},3237:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var a=0,s=new Array(e);a<e;a++)s[a]=t[a];return s}t.exports=t=>{const a=t.app.meta.mockUtil.parseInfoFromPackage(__dirname);return class{async _nodeDoneCheckLock(e){let a,{flowNodeId:s}=e;try{a=await t.bean.flow._loadFlowNodeInstance({flowNodeId:s})}catch(t){}if(!a)return;const o=this._getNodeDefOptionsTask({nodeInstance:a}),n=o.completionCondition,i=await this.modelFlowTask.count({flowNodeId:s,ignoreMark:0});if(0===i)return;const l=await this.modelFlowTask.count({flowNodeId:s,flowTaskStatus:1,handleStatus:1,ignoreMark:0}),r=await this.modelFlowTask.count({flowNodeId:s,flowTaskStatus:1,handleStatus:2,ignoreMark:0});if("number"==typeof n.passed||-1===n.passed.indexOf("%")){if(l>=parseInt(n.passed))return await this._nodeDoneCheckLock_passed({nodeInstance:a})}else if(l/i>=parseInt(n.passed)/100)return await this._nodeDoneCheckLock_passed({nodeInstance:a});if("number"==typeof n.rejected||-1===n.rejected.indexOf("%")){if(r>=parseInt(n.rejected))return await this._nodeDoneCheckLock_rejected({nodeInstance:a,options:o})}else if(r/i>=parseInt(n.rejected)/100)return await this._nodeDoneCheckLock_rejected({nodeInstance:a,options:o})}async _nodeDoneCheckLock_passed(t){let{nodeInstance:e}=t;return await e.end()}async _nodeDoneCheckLock_rejected(t){let{nodeInstance:e,options:a}=t;return await this._gotoFlowNodePrevious({nodeInstance:e,rejectedNode:a.rejectedNode})}async _gotoFlowNodePrevious(e){let{nodeInstance:a,rejectedNode:s,flowNodeRemark:o="Rejected"}=e;const n=a.contextNode._flowNodeId;if(!s){const e=await this._findFlowNodeHistoryPrevious({nodeInstance:a});e||t.throw.module("a-flow",1006,n),s=e.flowNodeDefId}const i=await a.flowInstance._findNodeInstanceNext({nodeDefId:s,flowNodeIdPrev:n});return await a.clear({flowNodeHandleStatus:2,flowNodeRemark:o}),await i.enter()}async _findFlowNodeHistoryPrevious(t){let{nodeInstance:e}=t;const a=e.contextNode._flowNodeId;return await e.flowInstance._findFlowNodeHistoryPrevious({flowNodeId:a,cb:t=>{let{nodeDef:e}=t;return e.type.indexOf("startEventAtom")>-1||e.type.indexOf("activityUserTask")>-1}})}async _list(e){let{options:{where:a,orders:s,page:o,mode:n,history:i=0},user:l,pageForce:r=!0,count:c=0}=e;"claimings"===n?(a["a.flowTaskStatus"]=0,a["a.timeClaimed"]=null,i=0):"handlings"===n?(a["a.flowTaskStatus"]=0,a["a.timeClaimed"]={op:"notNull"},i=0):"completeds"===n&&(a["a.flowTaskStatus"]=1,i=1),o=t.bean.util.page(o,r);const d=this.sqlProcedure.selectTasks({iid:t.instance.id,userIdWho:l?l.id:0,where:a,orders:s,page:o,count:c,history:i}),w=await t.model.query(d);return c?w[0]._count:w}async _loadTaskInstance(e){let s,{flowTaskId:o,user:n,history:i}=e;s=i?await this.modelFlowTaskHistory.get({flowTaskId:o}):await this.modelFlowTask.get({id:o}),s||t.throw.module(a.relativeName,1001,o);const l=await t.bean.flow._loadFlowNodeInstance({flowNodeId:s.flowNodeId,history:i}),r=this._createTaskInstance2({nodeInstance:l});return await r._load({flowTask:s,user:n,history:i}),r}_createTaskInstance2(e){let{nodeInstance:s}=e;return t.bean._newBean("".concat(a.relativeName,".local.flow.task"),{nodeInstance:s})}async _createTaskInstance(t){let{nodeInstance:e,userIdAssignee:a,user:s}=t;const o=this._createTaskInstance2({nodeInstance:e});return await o.init({userIdAssignee:a,user:s}),o}_getNodeDefOptionsTask(t){let{nodeInstance:e}=t;const a=e.contextNode._nodeDef,s=e.getNodeDefOptions();return a.type.indexOf("startEventAtom")>-1?s.task:s}async _clearRemains(a){let{nodeInstance:s}=a;const o=s.contextNode._flowNodeId;var n,i=function(t,a){var s="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!s){if(Array.isArray(t)||(s=function(t,a){if(t){if("string"==typeof t)return e(t,a);var s=Object.prototype.toString.call(t).slice(8,-1);return"Object"===s&&t.constructor&&(s=t.constructor.name),"Map"===s||"Set"===s?Array.from(t):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?e(t,a):void 0}}(t))||a&&t&&"number"==typeof t.length){s&&(t=s);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,r=!1;return{s:function(){s=s.call(t)},n:function(){var t=s.next();return l=t.done,t},e:function(t){r=!0,i=t},f:function(){try{l||null==s.return||s.return()}finally{if(r)throw i}}}}(await this.modelFlowTask.select({where:{flowNodeId:o}}));try{for(i.s();!(n=i.n()).done;){const t=n.value;this._notifyTaskClaimings(t.userIdAssignee),this._notifyTaskHandlings(t.userIdAssignee)}}catch(t){i.e(t)}finally{i.f()}await this.modelFlowTask.delete({flowNodeId:o}),await t.model.query("\n        update aFlowTaskHistory set deleted=1\n          where iid=? and deleted=0 and flowNodeId=? and flowTaskStatus=0 and specificFlag=2 \n        ",[t.instance.id,o]),await t.model.query("\n        update aFlowTaskHistory set flowTaskStatus=1\n          where iid=? and deleted=0 and flowNodeId=? and flowTaskStatus=0\n        ",[t.instance.id,o])}_notifyTaskClaimings(e){e&&t.bean.stats.notify({module:a.relativeName,name:"taskClaimings",user:{id:e}})}_notifyTaskHandlings(e){e&&t.bean.stats.notify({module:a.relativeName,name:"taskHandlings",user:{id:e}})}}}},7221:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var a=0,s=new Array(e);a<e;a++)s[a]=t[a];return s}function a(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,s)}return a}function s(t){for(var e=1;e<arguments.length;e++){var s=null!=arguments[e]?arguments[e]:{};e%2?a(Object(s),!0).forEach((function(e){o(t,e,s[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(s,e))}))}return t}function o(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}t.exports=t=>class{async _flowData_flow(e){let{flowId:a,user:s}=e;return await t.bean.flow.get({flowId:a,history:!0,user:s})}async _flowData_atom(e){let{flowId:a,atomId:s}=e;return await t.model.queryOne("\n        select a.*,a.id as atomId,b.module,b.atomClassName from aAtom a\n           left join aAtomClass b on a.atomClassId=b.id\n             where a.deleted=0 and a.iid=? and a.id=?\n                   and a.atomFlowId=?\n        ",[t.instance.id,s,a])}async _flowData_tasks(a){let{flow:o,atom:n,flowId:i,user:l}=a,r=await t.bean.flowTask.select({options:{where:{"a.flowId":i,"b.flowNodeType":["a-flowtask:startEventAtom","a-flowtask:activityUserTask","startEventAtom","activityUserTask"],__or__:[{"a.userIdAssignee":l.id},{"a.flowTaskHidden":0}]},orders:[["a.flowNodeId","desc"],["a.flowTaskStatus","asc"],["a.createdAt","desc"]],history:1},user:null,pageForce:!1});const c=!n||n.atomFlowId!==o.flowId,d={_nodeInstances:{},_options:{},get:async function(e){let a=this._nodeInstances[e];return a||(a=await t.bean.flow._loadFlowNodeInstance({flowNodeId:e}),this._nodeInstances[e]=a),a},getOptions:async function(e){let a=this._options[e];if(!a){const s=await this.get(e);a=t.bean.flowTask._getNodeDefOptionsTask({nodeInstance:s}),this._options[e]=a}return a}};r=r.map((t=>{if(t.flowTaskIdSubstituteTo){const e=r.find((e=>e.flowTaskId===t.flowTaskIdSubstituteTo));if(l.id!==t.userIdAssignee&&l.id!==e.userIdAssignee)return e.__remove=!0,s(s({},t),{},{timeHandled:e.timeHandled,handleStatus:e.handleStatus,handleRemark:e.handleRemark,handleRemarkLocale:e.handleRemarkLocale,flowTaskIdSubstituteTo:0,ignoreMark:0})}return t})),r=r.filter((t=>!t.__remove&&(1!==t.specificFlag&&2!==t.specificFlag||t.userIdAssignee===l.id)));var w,f=function(t,a){var s="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!s){if(Array.isArray(t)||(s=function(t,a){if(t){if("string"==typeof t)return e(t,a);var s=Object.prototype.toString.call(t).slice(8,-1);return"Object"===s&&t.constructor&&(s=t.constructor.name),"Map"===s||"Set"===s?Array.from(t):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?e(t,a):void 0}}(t))||a&&t&&"number"==typeof t.length){s&&(t=s);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,r=!1;return{s:function(){s=s.call(t)},n:function(){var t=s.next();return l=t.done,t},e:function(t){r=!0,i=t},f:function(){try{l||null==s.return||s.return()}finally{if(r)throw i}}}}(r);try{for(f.s();!(w=f.n()).done;){const t=w.value;t.userIdAssignee!==l.id||c||(t._actions=await this._flowData_task_actions({nodeInstances:d,tasks:r,task:t,user:l}))}}catch(t){f.e(t)}finally{f.f()}return r}async _flowData_task_checkRight(t){try{return await t,!0}catch(t){return!1}}async _flowData_task_actions(t){let{nodeInstances:e,tasks:a,task:s,user:o}=t;const n=1===s.flowTaskStatus,i=[],l=s;let r;if(r=await this._flowData_task_checkRight(this.localRight.assigneesConfirmation({flowTask:l,user:o})),r)return i.push({name:"assigneesConfirmation"}),i;if(r=await this._flowData_task_checkRight(this.localRight.recall({flowTask:l,user:o})),r)return i.push({name:"recall"}),i;if(!n&&!s.timeClaimed){const t=await e.getOptions(s.flowNodeId);i.push({name:"claim",options:{bidding:t.bidding}})}if(r=await this._flowData_task_checkRight(this.localRight.complete({flowTask:l,user:o,handle:null,getOptions:async()=>await e.getOptions(s.flowNodeId),disableCheckTimeClaimed:!0})),r){const t=await e.getOptions(s.flowNodeId);i.push({name:"handleTask",options:{allowPassTask:t.allowPassTask,allowRejectTask:t.allowRejectTask}})}return r=await this._flowData_task_checkRight(this.localRight.cancelFlow({flowTask:l,user:o,getOptions:async()=>await e.getOptions(s.flowNodeId),disableCheckTimeClaimed:!0})),r&&i.push({name:"cancelFlow"}),i.push({name:"viewAtom"}),r=await this._flowData_task_checkRight(this.localRight.appendHandleRemark({flowTask:l,user:o,flowNodeType:s.flowNodeType})),r&&i.push({name:"appendHandleRemark"}),r=await this._flowData_task_checkRight(this.localRight.forward({flowTask:l,user:o,getOptions:async()=>await e.getOptions(s.flowNodeId),disableCheckTimeClaimed:!0})),r&&i.push({name:"forward"}),r=await this._flowData_task_checkRight(this.localRight.forwardRecall({flowTask:l,user:o,getOptions:async()=>await e.getOptions(s.flowNodeId),getTask:t=>a.find((e=>e.flowTaskId===t))})),r&&i.push({name:"forwardRecall"}),r=await this._flowData_task_checkRight(this.localRight.substitute({flowTask:l,user:o,getOptions:async()=>await e.getOptions(s.flowNodeId),disableCheckTimeClaimed:!0})),r&&i.push({name:"substitute"}),r=await this._flowData_task_checkRight(this.localRight.substituteRecall({flowTask:l,user:o,getOptions:async()=>await e.getOptions(s.flowNodeId),getTask:t=>a.find((e=>e.flowTaskId===t))})),r&&i.push({name:"substituteRecall"}),i}}},1630:(t,e,a)=>{const s=a(342);t.exports=t=>{class e extends(s(t)){}return e}},2463:t=>{t.exports=t=>{class e extends t.app.meta.FlowNodeBase{constructor(e){super(t,e)}async onNodeLeave(){return await super.onNodeLeave(),await this.flowInstance._endFlow({flowHandleStatus:1,flowRemark:"End",atom:{submit:!0}}),!0}}return e}},6694:(t,e,a)=>{function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var a=0,s=new Array(e);a<e;a++)s[a]=t[a];return s}const o=a(342);t.exports=t=>{const e=t.app.meta.mockUtil.parseInfoFromPackage(__dirname);class a extends(o(t)){get modelCondition(){return t.model.module(e.relativeName).flowNodeStartEventAtomCondition}async deploy(t){let{deploy:e,flowDefId:a,node:s}=t;e?await this._addCondition({flowDefId:a,node:s}):await this._deleteCondition2({flowDefId:a,node:s})}async onNodeDoing(){return await super.onNodeDoing(),await this._autoHandle(),!1}async _autoHandle(){const e=this.context._flowId,a=(await t.bean.flowTask.select({options:{where:{"a.flowId":e,"a.flowTaskStatus":0},history:0}}))[0],s=a.id,o={id:a.userIdAssignee};0===this.contextNode._flowNode.flowNodeIdPrev&&(await t.bean.flowTask.claim({flowTaskId:s,user:o}),await t.bean.flowTask.complete({flowTaskId:s,handle:{status:1},user:o}))}async _addCondition(e){let{flowDefId:a,node:s}=e;const o=s.options&&s.options.atom;if(!o||!o.module||!o.atomClassName)throw new Error("atom not set for startEventAtom: ".concat(a,".").concat(s.id));const n=await t.bean.atomClass.get({module:o.module,atomClassName:o.atomClassName,atomClassIdParent:o.atomClassIdParent||0}),i=s.options.conditionExpression,l=s.id,r=await this.modelCondition.get({flowDefId:a,startEventId:l});r?(r.atomClassId=n.id,r.conditionExpression=i,await this.modelCondition.update(r)):await this.modelCondition.insert({flowDefId:a,startEventId:l,atomClassId:n.id,conditionExpression:i})}async _match(e){let{atom:a,userId:o}=e;var n,i=function(t,e){var a="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!a){if(Array.isArray(t)||(a=function(t,e){if(t){if("string"==typeof t)return s(t,e);var a=Object.prototype.toString.call(t).slice(8,-1);return"Object"===a&&t.constructor&&(a=t.constructor.name),"Map"===a||"Set"===a?Array.from(t):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?s(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){a&&(t=a);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,r=!1;return{s:function(){a=a.call(t)},n:function(){var t=a.next();return l=t.done,t},e:function(t){r=!0,i=t},f:function(){try{l||null==a.return||a.return()}finally{if(r)throw i}}}}(await t.model.query("\n          select a.* from aFlowNodeStartEventAtomCondition a\n            left join aFlowDef b on a.flowDefId=b.id\n            left join aAtom c on b.atomId=c.id\n            where a.iid=? and a.atomClassId=?\n            order by c.atomStatic asc, a.conditionExpression desc\n        ",[t.instance.id,a.atomClassId]));try{for(i.s();!(n=i.n()).done;){const t=n.value,e=await this._matchCondition({_condition:t,atom:a,userId:o});if(e)return e}}catch(t){i.e(t)}finally{i.f()}return null}async _matchCondition(e){const{_condition:a,atom:s,userId:o}=e;if(!await this._checkConditionValid(e))return await this._deleteCondition(e),null;const n=a.conditionExpression;return n&&!t.bean.flow.evaluateExpression({expression:n,globals:{atom:s}})?null:await t.bean.flow.startById({flowDefId:a.flowDefId,startEventId:a.startEventId,flowUserId:o,flowAtomId:s.atomId})}async _checkConditionValid(e){const{_condition:a}=e,s=await t.bean.flowDef.getById({flowDefId:a.flowDefId});if(!s)return!1;if(1===s.atomDisabled)return!1;const o=s.content?JSON.parse(s.content):null;if(!o)return!1;const n=o.process.nodes.find((t=>t.id===a.startEventId));return!!n&&a.conditionExpression===(n.options&&n.options.conditionExpression)}async _deleteCondition(t){const{_condition:e}=t;await this.modelCondition.delete({id:e.id})}async _deleteCondition2(t){let{flowDefId:e,node:a}=t;const s=a.id;await this.modelCondition.delete({flowDefId:e,startEventId:s})}}return a}},127:t=>{t.exports=t=>{class e extends(t.app.meta.IOMessageBase(t)){}return e}},2694:t=>{t.exports=t=>class{constructor(t){let{context:e,contextNode:a,nodeDef:s}=t;this.context=e,this.contextNode=a,this._nodeDef=s,this._flowTaskId=null,this._flowTask=null,this._flowTaskHistory=null,this._taskVars=null,this._utils=null,this._user=null}get vars(){return this._taskVars}get utils(){return this._utils}}},8988:(t,e,a)=>{const s=a(567),o=a(3235),n=a(9709),i=a(3289),l=a(1518),r=a(691),c=a(4302),d=a(8199),w=a(9695),f=a(3113),u=a(7167),k=a(6278);t.exports=t=>t.app.meta.util.mixinClasses(s,[o,n,i,l,r,c,d,w,f,u,k],t)},567:t=>{t.exports=t=>{const e=t.app.meta.mockUtil.parseInfoFromPackage(__dirname);return class{constructor(a){let{nodeInstance:s}=a;this.nodeInstance=s,this.flowInstance=s.flowInstance,this.context=s.context,this.contextNode=s.contextNode,this.contextTask=t.bean._newBean("".concat(e.relativeName,".local.context.task"),{context:s.context,contextNode:s.contextNode,nodeDef:s.contextNode._nodeDef})}get modelFlowTask(){return t.model.module(e.relativeName).flowTask}get modelFlowTaskHistory(){return t.model.module(e.relativeName).flowTaskHistory}get localRight(){return t.bean._getBean(e.relativeName,"local.right")}}}},3235:t=>{t.exports=t=>class{async _appendHandleRemark(t){let{handle:e}=t;const a=this.contextTask._user,s=this.contextTask._flowTaskHistory;await this.localRight.appendHandleRemark({flowTask:s,user:a,flowNodeType:this.contextTask._nodeDef.type}),this.contextTask._flowTaskHistory.handleRemark=e.remark,await this.modelFlowTaskHistory.update(this.contextTask._flowTaskHistory)}}},9709:t=>{t.exports=t=>{const e=t.app.meta.mockUtil.parseInfoFromPackage(__dirname);return class{async _assignees(){const t=this.contextTask._user,e=this.contextTask._flowTask;return await this.localRight.assignees({flowTask:e,user:t}),await this._assignees_handle()}async _assignees_handle(){const e=this.contextNode.vars.get("_assignees");let a;return a=e&&0!==e.length?await t.bean.user.select({options:{where:{"a.disabled":0,"a.id":e},orders:[["a.userName","asc"]],removePrivacy:!0}}):[],{users:a,options:{confirmationAllowAppend:t.bean.flowTask._getNodeDefOptionsTask({nodeInstance:this.nodeInstance}).confirmationAllowAppend}}}async _assigneesConfirmation(t){let{handle:e}=t;const a=this.contextTask._user,s=this.contextTask._flowTask;await this.localRight.assigneesConfirmation({flowTask:s,user:a}),await this._assigneesConfirmation_handle({handle:e}),this._notifyTaskHandlings(s.userIdAssignee)}async _assigneesConfirmation_handle(a){let{handle:s}=a;const o=t.bean.flowTask._getNodeDefOptionsTask({nodeInstance:this.nodeInstance});this.contextTask._flowTaskHistory.flowTaskStatus=1,this.contextTask._flowTaskHistory.timeHandled=new Date,this.contextTask._flowTaskHistory.handleStatus=s.status,await this.modelFlowTaskHistory.update(this.contextTask._flowTaskHistory);const n=this.contextTask._flowTaskId;if(await this.modelFlowTask.delete({id:n}),await this.modelFlowTaskHistory.delete({flowTaskId:n}),1===s.status){const a=await this.flowInstance._parseAssignees(s.assignees);if(a&&0!==a.length||t.throw.module(e.relativeName,1008,n),!o.confirmationAllowAppend){const s=this.contextNode.vars.get("_assignees");new Set(s).isSuperset(new Set(a))||t.throw.module(e.relativeName,1009,n)}return this.contextNode.vars.set("_assigneesConfirmation",a),await this.nodeInstance.begin()}if(2===s.status)return await t.bean.flowTask._gotoFlowNodePrevious({nodeInstance:this.nodeInstance,rejectedNode:null})}}}},3289:t=>{t.exports=t=>class{async _cancelFlow(t){let{handle:e}=t;const a=this.contextTask._user,s=this.contextTask._flowTask;await this.localRight.cancelFlow({flowTask:s,user:a,getOptions:()=>this._getNodeOptionsTask()}),await this._cancelFlow_handle({handle:e})}async _cancelFlow_handle(e){let{handle:a}=e;const s=this.contextTask._flowTask,o=s.id,n=this.context._flow.flowAtomId;n&&await t.bean.atom.closeDraft({key:{atomId:n}}),this._notifyTaskHandlings(s.userIdAssignee),await this.modelFlowTask.delete({id:o}),this.contextTask._flowTaskHistory.flowTaskStatus=1,this.contextTask._flowTaskHistory.timeHandled=new Date,this.contextTask._flowTaskHistory.handleStatus=3,this.contextTask._flowTaskHistory.handleRemark=a.remark,await this.modelFlowTaskHistory.update(this.contextTask._flowTaskHistory);const i="Cancelled";await this.nodeInstance.clear({flowNodeHandleStatus:3,flowNodeRemark:i}),await this.flowInstance._endFlow({flowHandleStatus:3,flowRemark:i})}}},1518:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var a=0,s=new Array(e);a<e;a++)s[a]=t[a];return s}t.exports=t=>class{async _claim(){const a=this.contextTask._user,s=this.contextTask._flowTask,o=s.id,n=await this.localRight.claim({flowTask:s,user:a});if(n)return n;const i=new Date;this.contextTask._flowTask.timeClaimed=i,this.contextTask._flowTask.flowTaskHidden=0,await this.modelFlowTask.update(this.contextTask._flowTask),this.contextTask._flowTaskHistory.timeClaimed=i,this.contextTask._flowTaskHistory.flowTaskHidden=0,await this.modelFlowTaskHistory.update(this.contextTask._flowTaskHistory);const l=await t.model.queryOne("\n          select id,userIdAssignee from aFlowTask\n            where iid=? and deleted=0 and flowNodeId=? and specificFlag=2\n          ",[t.instance.id,s.flowNodeId]);if(l&&(this._notifyTaskHandlings(l.userIdAssignee),await t.model.query("\n          delete from aFlowTask\n            where iid=? and id=?\n          ",[t.instance.id,l.id]),await t.model.query("\n          update aFlowTaskHistory set deleted=1\n            where iid=? and deleted=0 and flowTaskId=?\n          ",[t.instance.id,l.id])),t.bean.flowTask._getNodeDefOptionsTask({nodeInstance:this.nodeInstance}).bidding){var r,c=function(t,a){var s="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!s){if(Array.isArray(t)||(s=function(t,a){if(t){if("string"==typeof t)return e(t,a);var s=Object.prototype.toString.call(t).slice(8,-1);return"Object"===s&&t.constructor&&(s=t.constructor.name),"Map"===s||"Set"===s?Array.from(t):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?e(t,a):void 0}}(t))||a&&t&&"number"==typeof t.length){s&&(t=s);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,r=!1;return{s:function(){s=s.call(t)},n:function(){var t=s.next();return l=t.done,t},e:function(t){r=!0,i=t},f:function(){try{l||null==s.return||s.return()}finally{if(r)throw i}}}}(await t.model.query("\n          select id,userIdAssignee from aFlowTask\n            where iid=? and deleted=0 and flowNodeId=? and id<>? and (flowTaskStatus=0 and handleStatus=0)\n          ",[t.instance.id,s.flowNodeId,o]));try{for(c.s();!(r=c.n()).done;){const t=r.value;this._notifyTaskClaimings(t.userIdAssignee)}}catch(t){c.e(t)}finally{c.f()}await t.model.query("\n          delete from aFlowTask\n            where iid=? and flowNodeId=? and id<>? and (flowTaskStatus=0 and handleStatus=0)\n          ",[t.instance.id,s.flowNodeId,o]),await t.model.query("\n          update aFlowTaskHistory set deleted=1\n            where iid=? and deleted=0 and flowNodeId=? and flowTaskId<>? and (flowTaskStatus=0 and handleStatus=0)\n          ",[t.instance.id,s.flowNodeId,o])}return await this.raiseEventClaimed(),this._notifyTaskClaimings(s.userIdAssignee),this._notifyTaskHandlings(s.userIdAssignee),{timeClaimed:i}}}},691:t=>{t.exports=t=>{const e=t.app.meta.mockUtil.parseInfoFromPackage(__dirname);return class{async _complete(e){let{handle:a,formAtom:s}=e;const o=this.contextTask._user,n=this.contextTask._flowTask;await this.localRight.complete({flowTask:n,user:o,handle:a,getOptions:()=>this._getNodeOptionsTask()}),s&&await this._complete_formAtom({formAtom:s}),a&&(await this._complete_handle({handle:a}),await this.raiseEventCompleted(),t.tail((async()=>{await this._complete_tail({flowTask:n,user:o})})),this._notifyTaskHandlings(n.userIdAssignee))}async _complete_tail(a){let{flowTask:s,user:o}=a;const n=s.flowNodeId;await t.app.meta.util.lock({subdomain:t.subdomain,resource:"".concat(e.relativeName,".flowTask.nodeDoneCheck.").concat(n),fn:async()=>await t.app.meta.util.executeBean({subdomain:t.subdomain,beanModule:e.relativeName,beanFullName:"flowTask",context:{flowNodeId:n},fn:"_nodeDoneCheckLock",transaction:!0,ctxParent:{state:{user:{op:o}}}})})}async _complete_formAtom(e){let{formAtom:a}=e;const s=await this._getSchemaWrite();if(!s)return;const o=this.context._atom.atomId,n=this.contextTask._user;await t.bean.atom.write({key:{atomId:o},item:a,options:{schema:s},user:n})}async _complete_handle(t){let{handle:e}=t;const a=new Date;this.contextTask._flowTask.flowTaskStatus=1,this.contextTask._flowTask.timeHandled=a,this.contextTask._flowTask.handleStatus=e.status,this.contextTask._flowTask.handleRemark=e.remark,await this.modelFlowTask.update(this.contextTask._flowTask),this.contextTask._flowTaskHistory.flowTaskStatus=1,this.contextTask._flowTaskHistory.timeHandled=a,this.contextTask._flowTaskHistory.handleStatus=e.status,this.contextTask._flowTaskHistory.handleRemark=e.remark,await this.modelFlowTaskHistory.update(this.contextTask._flowTaskHistory),await this._complete_handle_checkForward(),await this._complete_handle_checkSubstitute()}async _complete_handle_checkForward(){let t=this.contextTask._flowTask.flowTaskIdForwardFrom;if(t)for(;t;){const e=await this.modelFlowTask.get({id:t});await this.modelFlowTask.update({id:t,flowTaskStatus:1}),await this.modelFlowTaskHistory.update({flowTaskStatus:1},{where:{flowTaskId:t}}),this._notifyTaskHandlings(e.userIdAssignee),t=e.flowTaskIdForwardFrom}}async _complete_handle_checkSubstitute(){let t=this.contextTask._flowTask.flowTaskIdSubstituteFrom;if(t)for(;t;){const e=await this.modelFlowTask.get({id:t});await this.modelFlowTask.update({id:t,flowTaskStatus:1}),await this.modelFlowTaskHistory.update({flowTaskStatus:1},{where:{flowTaskId:t}}),this._notifyTaskHandlings(e.userIdAssignee),t=e.flowTaskIdSubstituteFrom}}}}},4302:t=>{t.exports=t=>class{async raiseEventCreated(){await this.nodeInstance.change({event:"created",taskInstance:this}),await this._saveVars()}async raiseEventClaimed(){await this.nodeInstance.change({event:"claimed",taskInstance:this}),await this._saveVars()}async raiseEventCompleted(){await this.nodeInstance.change({event:"completed",taskInstance:this}),await this._saveVars()}async _saveTaskVars(){this.contextTask._taskVars._dirty&&(this.contextTask._flowTask.taskVars=JSON.stringify(this.contextTask._taskVars._vars),0===this.contextTask._flowTaskHistory.flowTaskStatus&&await this.modelFlowTask.update(this.contextTask._flowTask),this.contextTask._flowTaskHistory.taskVars=this.contextTask._flowTask.taskVars,await this.modelFlowTaskHistory.update(this.contextTask._flowTaskHistory),this.contextTask._taskVars._dirty=!1)}async _saveVars(){await this._saveTaskVars(),await this.nodeInstance._saveNodeVars(),await this.flowInstance._saveFlowVars()}_notifyTaskClaimings(e){t.bean.flowTask._notifyTaskClaimings(e)}_notifyTaskHandlings(e){t.bean.flowTask._notifyTaskHandlings(e)}}},3113:t=>{t.exports=t=>class{async _forward(t){let{handle:e}=t;const a=this.contextTask._user,s=this.contextTask._flowTask;await this.localRight.forward({flowTask:s,user:a,getOptions:()=>this._getNodeOptionsTask()}),await this._forward_handle({handle:e})}async _forward_handle(e){let{handle:a}=e;const s=this.contextTask._user,o=this.contextTask._flowTask.id,n=await t.bean.flowTask._createTaskInstance({nodeInstance:this.nodeInstance,userIdAssignee:a.assignee,user:s});n.contextTask._flowTask.specificFlag=4,n.contextTask._flowTask.flowTaskIdForwardFrom=o,await n.modelFlowTask.update(n.contextTask._flowTask),n.contextTask._flowTaskHistory.specificFlag=4,n.contextTask._flowTaskHistory.flowTaskIdForwardFrom=o,await n.modelFlowTaskHistory.update(n.contextTask._flowTaskHistory),n._notifyTaskClaimings(n.contextTask._flowTask.userIdAssignee);const i=n.contextTask._flowTask.id,l=new Date;this.contextTask._flowTask.timeHandled=l,this.contextTask._flowTask.handleStatus=4,this.contextTask._flowTask.handleRemark=a.remark,this.contextTask._flowTask.flowTaskIdForwardTo=i,this.contextTask._flowTask.ignoreMark=1,await this.modelFlowTask.update(this.contextTask._flowTask),this.contextTask._flowTaskHistory.timeHandled=l,this.contextTask._flowTaskHistory.handleStatus=4,this.contextTask._flowTaskHistory.handleRemark=a.remark,this.contextTask._flowTaskHistory.flowTaskIdForwardTo=i,this.contextTask._flowTaskHistory.ignoreMark=1,await this.modelFlowTaskHistory.update(this.contextTask._flowTaskHistory)}async _forwardRecall(){const t=this.contextTask._user,e=this.contextTask._flowTask;await this.localRight.forwardRecall({flowTask:e,user:t,getOptions:()=>this._getNodeOptionsTask()}),await this._forwardRecall_handle()}async _forwardRecall_handle(){const t=this.contextTask._flowTask,e=await this.modelFlowTask.get({id:t.flowTaskIdForwardTo});await this.modelFlowTask.delete({id:e.id}),await this.modelFlowTaskHistory.delete({flowTaskId:e.id}),this._notifyTaskClaimings(e.userIdAssignee),this.contextTask._flowTask.timeHandled=null,this.contextTask._flowTask.handleStatus=0,this.contextTask._flowTask.handleRemark=null,this.contextTask._flowTask.flowTaskIdForwardTo=0,this.contextTask._flowTask.ignoreMark=0,await this.modelFlowTask.update(this.contextTask._flowTask),this.contextTask._flowTaskHistory.timeHandled=null,this.contextTask._flowTaskHistory.handleStatus=0,this.contextTask._flowTaskHistory.handleRemark=null,this.contextTask._flowTaskHistory.flowTaskIdForwardTo=0,this.contextTask._flowTaskHistory.ignoreMark=0,await this.modelFlowTaskHistory.update(this.contextTask._flowTaskHistory)}}},8199:(t,e,a)=>{const s=a(7125),o=a(4796);t.exports=t=>class{async init(t){let{userIdAssignee:e,user:a}=t;const s=await this._createFlowTask({userIdAssignee:e,user:a});await this._contextInit({flowTaskId:s,user:a}),await this.raiseEventCreated()}async _load(t){let{flowTask:e,user:a,history:s}=t;await this._contextInit({flowTaskId:e.id,user:a,history:s})}async _createFlowTask(e){let{userIdAssignee:a,user:s}=e;const o={flowId:this.context._flowId,flowNodeId:this.contextNode._flowNodeId,flowTaskStatus:0,userIdAssignee:a,specificFlag:0,taskVars:"{}"},n=(await this.modelFlowTask.insert(o)).insertId;if(o.flowTaskId=n,await this.modelFlowTaskHistory.insert(o),this._notifyTaskClaimings(a),a!==s.id){const e=await t.bean.user.get({id:this.context._flow.flowUserId}),s=await t.bean.user.get({id:a}),o="".concat(t.text.locale(s.locale,"Task")," - ").concat(t.text.locale(s.locale,this.contextNode._flowNode.flowNodeName)),i="/a/flowtask/flow?flowId=".concat(this.context._flowId,"&flowTaskId=").concat(n),l={userIdTo:a,content:{issuerId:e.id,issuerName:e.userName,issuerAvatar:e.avatar,title:o,body:this.context._flow.flowName,actionPath:i,params:{flowId:this.context._flowId,flowTaskId:n}}};t.tail((async()=>{await t.bean.io.publish({message:l,messageClass:{module:"a-flow",messageClassName:"workflow"}})}))}return n}async _contextInit(e){let{flowTaskId:a,user:n,history:i}=e;this.contextTask._flowTaskId=a,i||(this.contextTask._flowTask=await this.modelFlowTask.get({id:a})),this.contextTask._flowTaskHistory=await this.modelFlowTaskHistory.get({flowTaskId:a}),this.contextTask._taskVars=new(s()),this.contextTask._taskVars._vars=this.contextTask._flowTaskHistory.taskVars?JSON.parse(this.contextTask._flowTaskHistory.taskVars):{},this.contextTask._utils=new(o({ctx:t,flowInstance:this.flowInstance}))({context:this.context,contextNode:this.contextNode,contextTask:this.contextTask}),this.contextTask._user=n}async _hidden(t){let{hidden:e}=t;const a=e?1:0;this.contextTask._flowTask.flowTaskHidden=a,await this.modelFlowTask.update(this.contextTask._flowTask),this.contextTask._flowTaskHistory.flowTaskHidden=a,await this.modelFlowTaskHistory.update(this.contextTask._flowTaskHistory)}_getNodeOptionsTask(){return t.bean.flowTask._getNodeDefOptionsTask({nodeInstance:this.nodeInstance})}}},9695:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var a=0,s=new Array(e);a<e;a++)s[a]=t[a];return s}t.exports=t=>class{async _recall(){const t=this.contextTask._user,e=this.contextTask._flowTask;await this.localRight.recall({flowTask:e,user:t}),await this._recall_handle(),this._notifyTaskHandlings(e.userIdAssignee)}async _recall_handle(){const a=this.contextTask._flowTask,s=a.id;this.contextTask._flowTaskHistory.flowTaskStatus=1,this.contextTask._flowTaskHistory.timeHandled=new Date,this.contextTask._flowTaskHistory.handleStatus=1,await this.modelFlowTaskHistory.update(this.contextTask._flowTaskHistory),await this.modelFlowTask.delete({id:s}),await this.modelFlowTaskHistory.delete({flowTaskId:s});var o,n=function(t,a){var s="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!s){if(Array.isArray(t)||(s=function(t,a){if(t){if("string"==typeof t)return e(t,a);var s=Object.prototype.toString.call(t).slice(8,-1);return"Object"===s&&t.constructor&&(s=t.constructor.name),"Map"===s||"Set"===s?Array.from(t):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?e(t,a):void 0}}(t))||a&&t&&"number"==typeof t.length){s&&(t=s);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,r=!1;return{s:function(){s=s.call(t)},n:function(){var t=s.next();return l=t.done,t},e:function(t){r=!0,i=t},f:function(){try{l||null==s.return||s.return()}finally{if(r)throw i}}}}(await t.model.query("\n          select id,userIdAssignee from aFlowTask\n            where iid=? and deleted=0 and flowNodeId=? and id<>?\n          ",[t.instance.id,a.flowNodeId,s]));try{for(n.s();!(o=n.n()).done;){const t=o.value;this._notifyTaskClaimings(t.userIdAssignee)}}catch(t){n.e(t)}finally{n.f()}return await t.model.query("\n          delete from aFlowTask\n            where iid=? and flowNodeId=? and id<>?\n          ",[t.instance.id,a.flowNodeId,s]),await t.model.query("\n          update aFlowTaskHistory set deleted=1\n            where iid=? and deleted=0 and flowNodeId=? and flowTaskId<>?\n          ",[t.instance.id,a.flowNodeId,s]),await t.bean.flowTask._gotoFlowNodePrevious({nodeInstance:this.nodeInstance,rejectedNode:null,flowNodeRemark:"Recalled"})}}},6278:(t,e,a)=>{function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var a=0,s=new Array(e);a<e;a++)s[a]=t[a];return s}const o=a(5638)("extend2");t.exports=t=>{const e=t.app.meta.mockUtil.parseInfoFromPackage(__dirname);return class{async _viewAtom(){return await this._getAtomAndSchema({mode:"read"})}async _editAtom(){return await this._getAtomAndSchema({mode:"write"})}async _getAtomAndSchema(a){let{mode:s}=a;const n=this.contextTask._user,i=this.context._atom,l=this.contextTask._flowTaskHistory,r=l.flowTaskId;n&&0!==n.id&&n.id!==l.userIdAssignee&&t.throw.module(e.relativeName,1002,r),i.atomFlowId!==this.context._flowId&&t.throw.module("a-flow",1009,this.context._flowId),"write"===s&&0!==l.flowTaskStatus&&t.throw.module(e.relativeName,1005,r);let c=await this._getSchema({mode:s});if(!c)return null;const d=o(!0,{},i);await t.bean.validation._validate({data:d,options:{schema:c}}),c=t.bean.validation.getSchema(c);const w=await t.bean.atom.modelAtom.columns();w.atomId={},w.module={},w.atomClassName={},w.atomNameLocale={},w.atomCategoryName={},w.atomCategoryNameLocale={},w.flowNodeNameCurrent={},w.flowNodeNameCurrentLocale={},w._meta={};for(const t in w)void 0===d[t]&&void 0!==i[t]&&(d[t]=i[t]);return{schema:c,item:d}}async _getSchemaRead(){return await this._getSchema({mode:"read"})}async _getSchemaWrite(){return await this._getSchema({mode:"write"})}async _getSchema(e){let{mode:a}=e;const o=this.context._atom.module,n=t.bean.flowTask._getNodeDefOptionsTask({nodeInstance:this.nodeInstance}),i=n.schema&&n.schema[a];if(!i)return null;if(i&&!Array.isArray(i)&&"object"==typeof i)return{module:i.module,validator:i.validator,schema:i.schema};let l=await this._getSchemaBase();if(!0===i&&l)return{module:l.module,validator:l.validator};l||(l={module:o,schema:{type:"object",properties:{}}});const r=l.schema.properties,c={};var d,w=function(t,e){var a="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!a){if(Array.isArray(t)||(a=function(t,e){if(t){if("string"==typeof t)return s(t,e);var a=Object.prototype.toString.call(t).slice(8,-1);return"Object"===a&&t.constructor&&(a=t.constructor.name),"Map"===a||"Set"===a?Array.from(t):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?s(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){a&&(t=a);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,r=!1;return{s:function(){a=a.call(t)},n:function(){var t=a.next();return l=t.done,t},e:function(t){r=!0,i=t},f:function(){try{l||null==a.return||a.return()}finally{if(r)throw i}}}}(i);try{for(w.s();!(d=w.n()).done;){const t=d.value;"string"==typeof t?r[t]&&(c[t]=r[t]):c[t.name]=t.property}}catch(t){w.e(t)}finally{w.f()}let f={module:o,schema:{type:"object",properties:c}};const u="getSchema".concat(a.replace(a[0],a[0].toUpperCase())),k=await this.flowInstance._flowListener[u](this.contextTask,this.contextNode,{schemaBase:l,schema:f});return k&&(f=k),f}async _getSchemaBase(){const e=this.context._atom.atomClassId;return await t.bean.atom.schema({atomClass:{id:e}})}}}},7167:t=>{t.exports=t=>class{async _substitute(t){let{handle:e}=t;const a=this.contextTask._user,s=this.contextTask._flowTask;await this.localRight.substitute({flowTask:s,user:a,getOptions:()=>this._getNodeOptionsTask()}),await this._substitute_handle({handle:e})}async _substitute_handle(e){let{handle:a}=e;const s=this.contextTask._user,o=this.contextTask._flowTask.id,n=await t.bean.flowTask._createTaskInstance({nodeInstance:this.nodeInstance,userIdAssignee:a.assignee,user:s});n.contextTask._flowTask.specificFlag=5,n.contextTask._flowTask.flowTaskIdSubstituteFrom=o,await n.modelFlowTask.update(n.contextTask._flowTask),n.contextTask._flowTaskHistory.specificFlag=5,n.contextTask._flowTaskHistory.flowTaskIdSubstituteFrom=o,await n.modelFlowTaskHistory.update(n.contextTask._flowTaskHistory),n._notifyTaskClaimings(n.contextTask._flowTask.userIdAssignee);const i=n.contextTask._flowTask.id,l=new Date;this.contextTask._flowTask.timeHandled=l,this.contextTask._flowTask.handleStatus=5,this.contextTask._flowTask.handleRemark=a.remark,this.contextTask._flowTask.flowTaskIdSubstituteTo=i,this.contextTask._flowTask.ignoreMark=1,await this.modelFlowTask.update(this.contextTask._flowTask),this.contextTask._flowTaskHistory.timeHandled=l,this.contextTask._flowTaskHistory.handleStatus=5,this.contextTask._flowTaskHistory.handleRemark=a.remark,this.contextTask._flowTaskHistory.flowTaskIdSubstituteTo=i,this.contextTask._flowTaskHistory.ignoreMark=1,await this.modelFlowTaskHistory.update(this.contextTask._flowTaskHistory)}async _substituteRecall(){const t=this.contextTask._user,e=this.contextTask._flowTask;await this.localRight.substituteRecall({flowTask:e,user:t,getOptions:()=>this._getNodeOptionsTask()}),await this._substituteRecall_handle()}async _substituteRecall_handle(){const t=this.contextTask._flowTask,e=await this.modelFlowTask.get({id:t.flowTaskIdSubstituteTo});await this.modelFlowTask.delete({id:e.id}),await this.modelFlowTaskHistory.delete({flowTaskId:e.id}),this._notifyTaskClaimings(e.userIdAssignee),this.contextTask._flowTask.timeHandled=null,this.contextTask._flowTask.handleStatus=0,this.contextTask._flowTask.handleRemark=null,this.contextTask._flowTask.flowTaskIdSubstituteTo=0,this.contextTask._flowTask.ignoreMark=0,await this.modelFlowTask.update(this.contextTask._flowTask),this.contextTask._flowTaskHistory.timeHandled=null,this.contextTask._flowTaskHistory.handleStatus=0,this.contextTask._flowTaskHistory.handleRemark=null,this.contextTask._flowTaskHistory.flowTaskIdSubstituteTo=0,this.contextTask._flowTaskHistory.ignoreMark=0,await this.modelFlowTaskHistory.update(this.contextTask._flowTaskHistory)}}},7497:t=>{t.exports=t=>class{selectTasks(t){let{iid:e,userIdWho:a,where:s,orders:o,page:n,count:i,history:l}=t;return e=parseInt(e),a=parseInt(a),l=parseInt(l),0===l?this._selectTasks_0({iid:e,userIdWho:a,where:s,orders:o,page:n,count:i}):this._selectTasks_1({iid:e,userIdWho:a,where:s,orders:o,page:n,count:i})}_selectTasks_0(e){let{iid:a,userIdWho:s,where:o,orders:n,page:i,count:l}=e;o=o?t.model._where(o):null,n=n?t.model._orders(n):null;const r=i?t.model._limit(i.size,i.index):null;let c;const d=o?"".concat(o," AND"):" WHERE",w=n||"",f=r||"";let u;return c=0!==s?" and a.userIdAssignee=".concat(s):"",u=l?"count(*) as _count":"a.*,a.id as flowTaskId,\n            b.flowNodeDefId,b.flowNodeName,b.flowNodeType,\n            c.flowDefId,c.flowDefKey,c.flowDefRevision,c.flowName,c.flowStatus,c.flowAtomId,c.flowNodeIdCurrent,c.flowUserId,\n            d.userName,d.avatar,\n            e.userName as flowUserName,e.avatar as flowUserAvatar\n          ","select ".concat(u," from aFlowTask a\n            inner join aFlowNode b on a.flowNodeId=b.id\n            inner join aFlow c on a.flowId=c.id\n            left join aUser d on a.userIdAssignee=d.id\n            left join aUser e on c.flowUserId=e.id\n\n          ").concat(d,"\n           (\n             a.deleted=0 and a.iid=").concat(a,"\n             ").concat(c,"\n           )\n\n          ").concat(l?"":w,"\n          ").concat(l?"":f,"\n        ")}_selectTasks_1(e){let{iid:a,userIdWho:s,where:o,orders:n,page:i,count:l}=e;o=o?t.model._where(o):null,n=n?t.model._orders(n):null;const r=i?t.model._limit(i.size,i.index):null;let c;const d=o?"".concat(o," AND"):" WHERE",w=n||"",f=r||"";let u;return c=0!==s?" and a.userIdAssignee=".concat(s):"",u=l?"count(*) as _count":"a.*,\n            b.flowNodeDefId,b.flowNodeName,b.flowNodeType,b.flowNodeStatus,b.flowNodeHandleStatus,b.flowNodeRemark,b.timeDone,\n            c.flowDefId,c.flowDefKey,c.flowDefRevision,c.flowName,c.flowStatus,c.flowAtomId,c.flowNodeIdCurrent,c.flowUserId,\n            d.userName,d.avatar,\n            e.userName as flowUserName,e.avatar as flowUserAvatar\n          ","select ".concat(u," from aFlowTaskHistory a\n            inner join aFlowNodeHistory b on a.flowNodeId=b.flowNodeId\n            inner join aFlowHistory c on a.flowId=c.flowId\n            left join aUser d on a.userIdAssignee=d.id\n            left join aUser e on c.flowUserId=e.id\n\n          ").concat(d,"\n           (\n             a.deleted=0 and a.iid=").concat(a,"\n             ").concat(c,"\n           )\n\n          ").concat(l?"":w,"\n          ").concat(l?"":f,"\n        ")}}},1613:t=>{t.exports=t=>{const e=t.app.meta.mockUtil.parseInfoFromPackage(__dirname);return class{get modelFlowTask(){return t.model.module(e.relativeName).flowTask}_check_specificFlag_normal(e){let{flowTask:a}=e;1!==a.specificFlag&&2!==a.specificFlag||t.throw(403)}_check_specificFlag_0(e){let{flowTask:a}=e;0!==a.specificFlag&&t.throw(403)}_check_specificFlag_1(e){let{flowTask:a}=e;1!==a.specificFlag&&t.throw(403)}_check_specificFlag_2(e){let{flowTask:a}=e;2!==a.specificFlag&&t.throw(403)}_check_sameUser(a){let{flowTask:s,user:o}=a;const n=s.flowTaskId||s.id;o&&0!==o.id&&o.id!==s.userIdAssignee&&t.throw.module(e.relativeName,1002,n)}_check_notDone(a){let{flowTask:s}=a;const o=s.flowTaskId||s.id;1===s.flowTaskStatus&&t.throw.module(e.relativeName,1005,o)}_check_notDoneAndHandled(a){let{flowTask:s}=a;const o=s.flowTaskId||s.id;1!==s.flowTaskStatus&&0===s.handleStatus||t.throw.module(e.relativeName,1005,o)}_check_claimed(a){let{flowTask:s}=a;const o=s.flowTaskId||s.id;s.timeClaimed||t.throw.module(e.relativeName,1004,o)}async _getNodeOptionsTask(e){let{getOptions:a,flowTask:s,nodeInstance:o}=e;return a?await a():(o||(o=await t.bean.flow._loadFlowNodeInstance({flowNodeId:s.flowNodeId})),t.bean.flowTask._getNodeDefOptionsTask({nodeInstance:o}))}async _getTask(t){let{getTask:e,flowTaskId:a}=t;return e?await e(a):await this.modelFlowTask.get({id:a})}async appendHandleRemark(a){let{flowTask:s,user:o,flowNodeType:n}=a;const i=s.flowTaskId||s.id;this._check_sameUser({flowTask:s,user:o}),("startEventAtom"!==n||1!==s.flowTaskStatus||s.handleRemark)&&t.throw.module(e.relativeName,1011,i)}async assignees(t){let{flowTask:e,user:a}=t;this._check_specificFlag_1({flowTask:e}),this._check_sameUser({flowTask:e,user:a}),this._check_notDoneAndHandled({flowTask:e}),this._check_claimed({flowTask:e})}async assigneesConfirmation(t){let{flowTask:e,user:a}=t;return await this.assignees({flowTask:e,user:a})}async cancelFlow(a){let{flowTask:s,user:o,getOptions:n,disableCheckTimeClaimed:i}=a;const l=s.flowTaskId||s.id;this._check_specificFlag_normal({flowTask:s}),this._check_sameUser({flowTask:s,user:o}),this._check_notDoneAndHandled({flowTask:s}),i||this._check_claimed({flowTask:s}),(await this._getNodeOptionsTask({getOptions:n,flowTask:s})).allowCancelFlow||t.throw.module(e.relativeName,1010,l)}async claim(t){let{flowTask:e,user:a}=t;if(this._check_sameUser({flowTask:e,user:a}),this._check_notDoneAndHandled({flowTask:e}),e.timeClaimed)return{timeClaimed:e.timeClaimed}}async complete(a){let{flowTask:s,user:o,handle:n,getOptions:i,disableCheckTimeClaimed:l}=a;const r=s.flowTaskId||s.id;this._check_specificFlag_normal({flowTask:s}),this._check_sameUser({flowTask:s,user:o}),this._check_notDoneAndHandled({flowTask:s}),l||this._check_claimed({flowTask:s});const c=await this._getNodeOptionsTask({getOptions:i,flowTask:s});n?(1!==n.status||c.allowPassTask||t.throw.module(e.relativeName,1006,r),2!==n.status||c.allowRejectTask||t.throw.module(e.relativeName,1007,r)):c.allowPassTask||c.allowRejectTask||t.throw(403)}async recall(t){let{flowTask:e,user:a}=t;this._check_specificFlag_2({flowTask:e}),this._check_sameUser({flowTask:e,user:a}),this._check_notDoneAndHandled({flowTask:e}),this._check_claimed({flowTask:e})}async forward(a){let{flowTask:s,user:o,getOptions:n,disableCheckTimeClaimed:i}=a;const l=s.flowTaskId||s.id;this._check_sameUser({flowTask:s,user:o}),this._check_notDoneAndHandled({flowTask:s}),i||this._check_claimed({flowTask:s}),s.flowTaskIdSubstituteFrom&&t.throw(403),(await this._getNodeOptionsTask({getOptions:n,flowTask:s})).allowForward&&!s.flowTaskIdForwardTo||t.throw.module(e.relativeName,1012,l)}async forwardRecall(e){let{flowTask:a,user:s,getOptions:o,getTask:n}=e;this._check_sameUser({flowTask:a,user:s}),this._check_notDone({flowTask:a}),this._check_claimed({flowTask:a}),(await this._getNodeOptionsTask({getOptions:o,flowTask:a})).allowForward&&a.flowTaskIdForwardTo||t.throw(403),(await this._getTask({getTask:n,flowTaskId:a.flowTaskIdForwardTo})).timeClaimed&&t.throw(403)}async substitute(a){let{flowTask:s,user:o,getOptions:n,disableCheckTimeClaimed:i}=a;const l=s.flowTaskId||s.id;this._check_sameUser({flowTask:s,user:o}),this._check_notDoneAndHandled({flowTask:s}),i||this._check_claimed({flowTask:s}),(!(await this._getNodeOptionsTask({getOptions:n,flowTask:s})).allowSubstitute||s.flowTaskIdSubstituteFrom||s.flowTaskIdSubstituteTo)&&t.throw.module(e.relativeName,1013,l)}async substituteRecall(e){let{flowTask:a,user:s,getOptions:o,getTask:n}=e;this._check_sameUser({flowTask:a,user:s}),this._check_notDone({flowTask:a}),this._check_claimed({flowTask:a}),(await this._getNodeOptionsTask({getOptions:o,flowTask:a})).allowSubstitute&&!a.flowTaskIdSubstituteFrom&&a.flowTaskIdSubstituteTo||t.throw(403),(await this._getTask({getTask:n,flowTaskId:a.flowTaskIdSubstituteTo})).timeClaimed&&t.throw(403)}}}},6877:t=>{t.exports=t=>{const e=t.app.meta.mockUtil.parseInfoFromPackage(__dirname);return class{async execute(a){const{user:s}=a,o=t.model.module(e).flowTask;return await o.count({userIdAssignee:s.id,flowTaskStatus:0,timeClaimed:null})}}}},2223:t=>{t.exports=t=>{const e=t.app.meta.mockUtil.parseInfoFromPackage(__dirname);return class{async execute(a){const{user:s}=a,o=t.model.module(e).flowTask;return await o.count({userIdAssignee:s.id,flowTaskStatus:0,timeClaimed:{op:"notNull"}})}}}},3223:t=>{t.exports=t=>{class e extends t.meta.BeanBase{async update(t){if(1===t.version){let t;t="\n          CREATE TABLE aFlowNodeStartEventAtomCondition (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            flowDefId int(11) DEFAULT '0',\n            startEventId varchar(255) DEFAULT NULL,\n            atomClassId int(11) DEFAULT '0',\n            conditionExpression TEXT DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        ",await this.ctx.model.query(t),t="\n          CREATE TABLE aFlowTask (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            flowId int(11) DEFAULT '0',\n            flowNodeId int(11) DEFAULT '0',\n            flowTaskStatus int(11) DEFAULT '0',\n            flowTaskHidden int(11) DEFAULT '0',\n            userIdAssignee int(11) DEFAULT '0',\n            specificFlag int(11) DEFAULT '0',\n            handleStatus int(11) DEFAULT '0',\n            handleRemark TEXT DEFAULT NULL,\n            timeClaimed timestamp DEFAULT NULL,\n            timeHandled timestamp DEFAULT NULL,\n            taskVars JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        ",await this.ctx.model.query(t),t="\n          CREATE TABLE aFlowTaskHistory (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            flowId int(11) DEFAULT '0',\n            flowTaskId int(11) DEFAULT '0',\n            flowNodeId int(11) DEFAULT '0',\n            flowTaskStatus int(11) DEFAULT '0',\n            flowTaskHidden int(11) DEFAULT '0',\n            userIdAssignee int(11) DEFAULT '0',\n            specificFlag int(11) DEFAULT '0',\n            handleStatus int(11) DEFAULT '0',\n            handleRemark TEXT DEFAULT NULL,\n            timeClaimed timestamp DEFAULT NULL,\n            timeHandled timestamp DEFAULT NULL,\n            taskVars JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        ",await this.ctx.model.query(t)}if(2===t.version){let t;t="\n          ALTER TABLE aFlowTask\n            ADD COLUMN ignoreMark int(11) DEFAULT '0',\n            ADD COLUMN flowTaskIdForwardFrom int(11) DEFAULT '0',\n            ADD COLUMN flowTaskIdForwardTo int(11) DEFAULT '0',\n            ADD COLUMN flowTaskIdSubstituteFrom int(11) DEFAULT '0',\n            ADD COLUMN flowTaskIdSubstituteTo int(11) DEFAULT '0'\n                ",await this.ctx.model.query(t),t="\n          ALTER TABLE aFlowTaskHistory\n            ADD COLUMN ignoreMark int(11) DEFAULT '0',\n            ADD COLUMN flowTaskIdForwardFrom int(11) DEFAULT '0',\n            ADD COLUMN flowTaskIdForwardTo int(11) DEFAULT '0',\n            ADD COLUMN flowTaskIdSubstituteFrom int(11) DEFAULT '0',\n            ADD COLUMN flowTaskIdSubstituteTo int(11) DEFAULT '0'\n                ",await this.ctx.model.query(t)}}async init(t){}async test(){}}return e}},7313:(t,e,a)=>{const s=a(3223),o=a(6694),n=a(2463),i=a(1630),l=a(2694),r=a(8988),c=a(7497),d=a(1613),w=a(5504),f=a(6877),u=a(2223),k=a(127);t.exports=t=>({"version.manager":{mode:"app",bean:s},"flow.node.startEventAtom":{mode:"ctx",bean:o},"flow.node.endEventAtom":{mode:"ctx",bean:n},"flow.node.activityUserTask":{mode:"ctx",bean:i},"local.context.task":{mode:"ctx",bean:l},"local.flow.task":{mode:"ctx",bean:r},"local.procedure":{mode:"ctx",bean:c},"local.right":{mode:"ctx",bean:d},flowTask:{mode:"ctx",bean:w,global:!0},"stats.taskClaimings":{mode:"ctx",bean:f},"stats.taskHandlings":{mode:"ctx",bean:u},"io.message.workflow":{mode:"ctx",bean:k}})},342:(t,e,a)=>{function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var a=0,s=new Array(e);a<e;a++)s[a]=t[a];return s}const o=a(5638)("assert");t.exports=t=>{class e extends t.app.meta.FlowNodeBase{constructor(e){super(t,e)}async onNodeEnter(){let e=await super.onNodeEnter();if(!e)return e;const a=t.bean.flowTask._getNodeDefOptionsTask({nodeInstance:this.nodeInstance});return e=await this._prepareAssignees({options:a}),!!e}async onNodeBegin(){const e=await super.onNodeBegin();if(!e)return e;const a=t.bean.flowTask._getNodeDefOptionsTask({nodeInstance:this.nodeInstance}),n=this.flowInstance._getOpUser(),i=this.contextNode.vars.get("_assigneesConfirmation");if(o(i&&i.length>0),a.allowRecall){const e=await t.bean.flowTask._createTaskInstance({nodeInstance:this.nodeInstance,userIdAssignee:n.id,user:n});await this._taskConfirmationClaim({taskInstance:e,specificFlag:2})}var l,r=function(t,e){var a="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!a){if(Array.isArray(t)||(a=function(t,e){if(t){if("string"==typeof t)return s(t,e);var a=Object.prototype.toString.call(t).slice(8,-1);return"Object"===a&&t.constructor&&(a=t.constructor.name),"Map"===a||"Set"===a?Array.from(t):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?s(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){a&&(t=a);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,r=!1;return{s:function(){a=a.call(t)},n:function(){var t=a.next();return l=t.done,t},e:function(t){r=!0,i=t},f:function(){try{l||null==a.return||a.return()}finally{if(r)throw i}}}}(i);try{for(r.s();!(l=r.n()).done;){const e=l.value,s=await t.bean.flowTask._createTaskInstance({nodeInstance:this.nodeInstance,userIdAssignee:e,user:n});a.showAssignees||await s._hidden({hidden:!0})}}catch(t){r.e(t)}finally{r.f()}return!0}async onNodeDoing(){const t=await super.onNodeDoing();return!t&&t}async onNodeClear(e){let{options:a}=e;return await t.bean.flowTask._clearRemains({nodeInstance:this.nodeInstance}),await super.onNodeClear({options:a})}async onNodeChange(t){let{options:e}=t;const{event:a,taskInstance:s}=e;return"created"===a?await s.flowInstance._flowListener.onTaskCreated(s.contextTask,s.contextNode):"claimed"===a?await s.flowInstance._flowListener.onTaskClaimed(s.contextTask,s.contextNode):"completed"===a&&await s.flowInstance._flowListener.onTaskCompleted(s.contextTask,s.contextNode),await super.onNodeChange({options:e})}async _prepareAssignees(e){let{options:a}=e,s=this.contextNode.vars.get("_assigneesConfirmation");if(s&&s.length>0)return!0;if(this.contextNode.vars.get("_assignees"),s&&0!==s.length||(s=await this.flowInstance._parseAssignees(a.assignees)),0===s.length||a.confirmation){this.contextNode.vars.set("_assignees",s);const e=this.flowInstance._getOpUser(),a=await t.bean.flowTask._createTaskInstance({nodeInstance:this.nodeInstance,userIdAssignee:e.id,user:e});return await this._taskConfirmationClaim({taskInstance:a,specificFlag:1}),!1}return this.contextNode.vars.set("_assigneesConfirmation",s),!0}async _taskConfirmationClaim(t){let{taskInstance:e,specificFlag:a}=t;const s=new Date;e.contextTask._flowTask.specificFlag=a,e.contextTask._flowTask.timeClaimed=s,await e.modelFlowTask.update(e.contextTask._flowTask),e.contextTask._flowTaskHistory.specificFlag=a,e.contextTask._flowTaskHistory.timeClaimed=s,await e.modelFlowTaskHistory.update(e.contextTask._flowTaskHistory),e._notifyTaskClaimings(e.contextTask._flowTask.userIdAssignee),e._notifyTaskHandlings(e.contextTask._flowTask.userIdAssignee)}}return e}},4796:t=>{t.exports=t=>{let{ctx:e}=t;return class{constructor(t){let{context:e,contextNode:a,contextTask:s}=t;this.context=e,this.contextNode=a,this.contextTask=s}async executeService(t){let{bean:a,parameter:s}=t;const o={};return this.context&&(o.context=this.context),this.contextNode&&(o.contextNode=this.contextNode),this.contextTask&&(o.contextTask=this.contextTask),await e.bean.flow.executeService({bean:a,parameter:s,globals:o})}}}},7125:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var a=0,s=new Array(e);a<e;a++)s[a]=t[a];return s}t.exports=()=>class{constructor(){this._vars=null,this._dirty=!1}get(t){t=t.split(".");let a=this._vars;var s,o=function(t,a){var s="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!s){if(Array.isArray(t)||(s=function(t,a){if(t){if("string"==typeof t)return e(t,a);var s=Object.prototype.toString.call(t).slice(8,-1);return"Object"===s&&t.constructor&&(s=t.constructor.name),"Map"===s||"Set"===s?Array.from(t):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?e(t,a):void 0}}(t))||a&&t&&"number"==typeof t.length){s&&(t=s);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,r=!1;return{s:function(){s=s.call(t)},n:function(){var t=s.next();return l=t.done,t},e:function(t){r=!0,i=t},f:function(){try{l||null==s.return||s.return()}finally{if(r)throw i}}}}(t);try{for(o.s();!(s=o.n()).done&&(a=a[s.value],void 0!==a););}catch(t){o.e(t)}finally{o.f()}return a}set(t,e){t=t.split(".");let a=this._vars;for(let e=0;e<t.length-1;e++){const s=t[e];void 0===a[s]&&(a[s]={}),a=a[s]}a[t[t.length-1]]=e,this._dirty=!0}}},817:t=>{t.exports=t=>({})},1971:t=>{t.exports={1001:"Task not Found: %s",1002:"Task cannot be accessed: %s",1003:"Task has been claimed: %s",1004:"Task should be claimed first: %s",1005:"Task has been handled: %s",1006:"Task cannot be passed: %s",1007:"Task cannot be rejected: %s",1008:"Task Assignees cannot be empty: %s",1009:"Task Assignees cannot be appended: %s",1010:"Flow cannot be cancelled: %s",1011:"Task Handle Remark cannot be appended: %s",1012:"Task has been forwarded: %s",1013:"Task has been substituted: %s"}},7874:t=>{t.exports={startEventAtom:{atom:null,conditionExpression:null,task:{assignees:{users:null,roles:null,vars:"flowUser"},showAssignees:!1,confirmation:!1,confirmationAllowAppend:!1,bidding:!1,completionCondition:{passed:1,rejected:"100%"},rejectedNode:null,allowPassTask:!0,allowRejectTask:!1,allowCancelFlow:!0,allowRecall:!1,allowForward:!1,allowSubstitute:!1,schema:{read:!0,write:!0}}},activityUserTask:{assignees:{users:null,roles:null,vars:null},showAssignees:!0,confirmation:!1,confirmationAllowAppend:!1,bidding:!1,completionCondition:{passed:1,rejected:"100%"},rejectedNode:null,allowPassTask:!0,allowRejectTask:!0,allowCancelFlow:!1,allowRecall:!0,allowForward:!1,allowSubstitute:!1,schema:{read:!0,write:!1}}}},9633:(t,e,a)=>{const s=a(7874);t.exports=t=>{const e=t.meta.mockUtil.parseInfoFromPackage(__dirname),a={startEventAtom:{title:"StartEventAtom",group:"startEvent",bean:"startEventAtom",icon:"/api/static/a/flowtask/bpmn/events/start-event-atom.svg",validator:{module:e.relativeName,validator:"startEventAtom"}},endEventAtom:{title:"EndEventAtom",group:"endEvent",bean:"endEventAtom",icon:"/api/static/a/flowtask/bpmn/events/end-event-atom.svg"},activityUserTask:{title:"ActivityUserTask",group:"activity",bean:"activityUserTask",icon:"/api/static/a/flowtask/bpmn/activities/activity-user-task.svg",validator:{module:e.relativeName,validator:"activityUserTask"}}};for(const t in a){const e=a[t];e.options={},s[t]&&(e.options.default=s[t])}return a}},9724:t=>{t.exports={StartEventAtom:"StartEvent: Data Draft",EndEventAtom:"EndEvent: Data Submit",ActivityUserTask:"Activity: User Task"}},995:t=>{t.exports={Submitted:"已提交",StartEventAtom:"数据起草开始事件",EndEventAtom:"数据提交结束事件",ActivityUserTask:"用户任务活动","Task not Found: %s":"任务未发现: %s","Task cannot be accessed: %s":"任务无权访问: %s","Task has been claimed: %s":"任务已被申领: %s","Task should be claimed first: %s":"任务必须先申领: %s","Task has been handled: %s":"任务已处理: %s","Task cannot be passed: %s":"任务无权被通过: %s","Task cannot be rejected: %s":"任务无权被拒绝: %s","Task Assignees cannot be empty: %s":"任务参与人不允许为空: %s","Task Assignees cannot be appended: %s":"任务参与人不允许追加: %s","Flow cannot be cancelled: %s":"流程无权被取消: %s","Task Handle Remark cannot be appended: %s":"任务处理意见不允许追加: %s","Task has been forwarded: %s":"任务已被转办: %s","Task has been substituted: %s":"任务已被代办: %s"}},9266:(t,e,a)=>{t.exports={"en-us":a(9724),"zh-cn":a(995)}},3247:t=>{t.exports=t=>({activityUserTask:{type:"object",properties:{assignees:{type:"object",ebType:"component",ebTitle:"Assignees",ebRender:{module:"a-flowchart",name:"renderAssignees"},notEmpty:!0},showAssignees:{type:"boolean",ebType:"toggle",ebTitle:"Show Assignees"},confirmation:{type:"boolean",ebType:"toggle",ebTitle:"Confirmation Assignees"},confirmationAllowAppend:{type:"boolean",ebType:"toggle",ebTitle:"ConfirmationAllowAppend"},bidding:{type:"boolean",ebType:"toggle",ebTitle:"Bidding"},completionCondition:{type:"object",ebType:"json",ebTitle:"Completion Condition",notEmpty:!0},rejectedNode:{type:"string",ebType:"component",ebTitle:"Rejected Node",ebRender:{module:"a-flowchart",name:"renderRejectedNode"}},allowPassTask:{type:"boolean",ebType:"toggle",ebTitle:"Allow Pass Task"},allowRejectTask:{type:"boolean",ebType:"toggle",ebTitle:"Allow Reject Task"},allowCancelFlow:{type:"boolean",ebType:"toggle",ebTitle:"Allow Cancel Flow"},allowRecall:{type:"boolean",ebType:"toggle",ebTitle:"Allow Recall"},allowForward:{type:"boolean",ebType:"toggle",ebTitle:"Allow Forward"},allowSubstitute:{type:"boolean",ebType:"toggle",ebTitle:"Allow Substitute"},schema:{type:"object",ebType:"component",ebTitle:"Field Permissions",ebRender:{module:"a-flowchart",name:"renderSchemaFields"},notEmpty:!0}}}})},8933:t=>{t.exports=t=>({startEventAtom:{type:"object",properties:{atom:{type:"object",ebType:"atomClass",ebTitle:"Atom Class",notEmpty:!0,ebParams:{simple:0}},conditionExpression:{type:"string",ebType:"text",ebTitle:"Condition Expression",ebTextarea:!0},task:{type:"object",ebType:"panel",ebTitle:"User Task Options",$ref:"activityUserTask"}}}})},8326:(t,e,a)=>{const s=a(8933),o=a(3247);t.exports=t=>{const e={};return Object.assign(e,s(t)),Object.assign(e,o(t)),e}},5712:t=>{t.exports=t=>{class e extends t.Controller{async data(){const t=await this.ctx.service.flow.data({flowId:this.ctx.request.body.flowId,user:this.ctx.state.user.op});this.ctx.success(t)}}return e}},242:t=>{t.exports=t=>{class e extends t.Controller{async select(){const t=this.ctx.request.body.options;t.page=this.ctx.bean.util.page(t.page);const e=await this.ctx.service.flowTask.select({options:t,user:this.ctx.state.user.op});this.ctx.successMore(e,t.page.index,t.page.size)}async count(){const t=this.ctx.request.body.options,e=await this.ctx.service.flowTask.count({options:t,user:this.ctx.state.user.op});this.ctx.success(e)}async claim(){const t=await this.ctx.service.flowTask.claim({flowTaskId:this.ctx.request.body.flowTaskId,user:this.ctx.state.user.op});this.ctx.success(t)}async complete(){const t=await this.ctx.service.flowTask.complete({flowTaskId:this.ctx.request.body.flowTaskId,handle:this.ctx.request.body.handle,formAtom:this.ctx.request.body.formAtom,user:this.ctx.state.user.op});this.ctx.success(t)}async appendHandleRemark(){const t=await this.ctx.service.flowTask.appendHandleRemark({flowTaskId:this.ctx.request.body.flowTaskId,handle:this.ctx.request.body.handle,user:this.ctx.state.user.op});this.ctx.success(t)}async assignees(){const t=await this.ctx.service.flowTask.assignees({flowTaskId:this.ctx.request.body.flowTaskId,user:this.ctx.state.user.op});this.ctx.success(t)}async assigneesConfirmation(){const t=await this.ctx.service.flowTask.assigneesConfirmation({flowTaskId:this.ctx.request.body.flowTaskId,handle:this.ctx.request.body.handle,user:this.ctx.state.user.op});this.ctx.success(t)}async recall(){const t=await this.ctx.service.flowTask.recall({flowTaskId:this.ctx.request.body.flowTaskId,user:this.ctx.state.user.op});this.ctx.success(t)}async cancelFlow(){const t=await this.ctx.service.flowTask.cancelFlow({flowTaskId:this.ctx.request.body.flowTaskId,handle:this.ctx.request.body.handle,user:this.ctx.state.user.op});this.ctx.success(t)}async viewAtom(){const t=await this.ctx.service.flowTask.viewAtom({flowTaskId:this.ctx.request.body.flowTaskId,user:this.ctx.state.user.op});this.ctx.success(t)}async editAtom(){const t=await this.ctx.service.flowTask.editAtom({flowTaskId:this.ctx.request.body.flowTaskId,user:this.ctx.state.user.op});this.ctx.success(t)}async userSelectForward(){const{flowTaskId:t,params:e}=this.ctx.request.body,a=this.ctx.state.user.op,s=e.page,o=await this.ctx.service.flowTask.userSelectForward({flowTaskId:t,params:e,user:a});this.ctx.successMore(o,s.index,s.size)}async forward(){const t=await this.ctx.service.flowTask.forward({flowTaskId:this.ctx.request.body.flowTaskId,handle:this.ctx.request.body.handle,user:this.ctx.state.user.op});this.ctx.success(t)}async forwardRecall(){const t=await this.ctx.service.flowTask.forwardRecall({flowTaskId:this.ctx.request.body.flowTaskId,user:this.ctx.state.user.op});this.ctx.success(t)}async userSelectSubstitute(){const{flowTaskId:t,params:e}=this.ctx.request.body,a=this.ctx.state.user.op,s=e.page,o=await this.ctx.service.flowTask.userSelectSubstitute({flowTaskId:t,params:e,user:a});this.ctx.successMore(o,s.index,s.size)}async substitute(){const t=await this.ctx.service.flowTask.substitute({flowTaskId:this.ctx.request.body.flowTaskId,handle:this.ctx.request.body.handle,user:this.ctx.state.user.op});this.ctx.success(t)}async substituteRecall(){const t=await this.ctx.service.flowTask.substituteRecall({flowTaskId:this.ctx.request.body.flowTaskId,user:this.ctx.state.user.op});this.ctx.success(t)}}return e}},1691:(t,e,a)=>{const s=a(5712),o=a(242);t.exports=t=>({flow:s,flowTask:o})},312:(t,e,a)=>{const s=a(817),o=a(9266),n=a(1971);t.exports=t=>{const e=a(1129)(t),i=a(7313)(t),l=a(5788)(t),r=a(1691)(t),c=a(2481)(t),d=a(3700)(t),w=a(2730)(t);return{aops:e,beans:i,routes:l,controllers:r,services:c,models:d,config:s,locales:o,errors:n,meta:w}}},2730:(t,e,a)=>{t.exports=t=>({base:{atoms:{}},validation:{validators:{startEventAtom:{schemas:"startEventAtom,activityUserTask"},activityUserTask:{schemas:"activityUserTask"}},keywords:{},schemas:a(8326)(t)},flow:{nodes:a(9633)(t)},stats:{providers:{taskClaimings:{user:!0,bean:"taskClaimings"},taskHandlings:{user:!0,bean:"taskHandlings"},taskClaimingsHandlings:{user:!0,bean:{module:"a-stats",name:"deps"},dependencies:["a-flowtask:taskClaimings","a-flowtask:taskHandlings"]}}}})},4486:t=>{t.exports=t=>{class e extends t.meta.Model{constructor(t){super(t,{table:"aFlowNodeStartEventAtomCondition",options:{disableDeleted:!0}})}}return e}},5265:t=>{t.exports=t=>{class e extends t.meta.Model{constructor(t){super(t,{table:"aFlowTask",options:{disableDeleted:!0}})}}return e}},1808:t=>{t.exports=t=>{class e extends t.meta.Model{constructor(t){super(t,{table:"aFlowTaskHistory",options:{disableDeleted:!1}})}}return e}},3700:(t,e,a)=>{const s=a(4486),o=a(5265),n=a(1808);t.exports=t=>({flowNodeStartEventAtomCondition:s,flowTask:o,flowTaskHistory:n})},5788:t=>{t.exports=t=>[{method:"post",path:"flow/data",controller:"flow"},{method:"post",path:"task/select",controller:"flowTask"},{method:"post",path:"task/count",controller:"flowTask"},{method:"post",path:"task/claim",controller:"flowTask",middlewares:"transaction"},{method:"post",path:"task/complete",controller:"flowTask",middlewares:"transaction"},{method:"post",path:"task/appendHandleRemark",controller:"flowTask"},{method:"post",path:"task/assignees",controller:"flowTask"},{method:"post",path:"task/assigneesConfirmation",controller:"flowTask",middlewares:"transaction"},{method:"post",path:"task/recall",controller:"flowTask",middlewares:"transaction"},{method:"post",path:"task/cancelFlow",controller:"flowTask",middlewares:"transaction"},{method:"post",path:"task/viewAtom",controller:"flowTask"},{method:"post",path:"task/editAtom",controller:"flowTask"},{method:"post",path:"task/userSelectForward",controller:"flowTask"},{method:"post",path:"task/forward",controller:"flowTask"},{method:"post",path:"task/forwardRecall",controller:"flowTask"},{method:"post",path:"task/userSelectSubstitute",controller:"flowTask"},{method:"post",path:"task/substitute",controller:"flowTask"},{method:"post",path:"task/substituteRecall",controller:"flowTask"}]},8536:t=>{t.exports=t=>{class e extends t.Service{async data(t){let{flowId:e,user:a}=t;return await this.ctx.bean.flowTask.flowData({flowId:e,user:a})}}return e}},6411:t=>{t.exports=t=>{class e extends t.Service{async select(t){let{options:e,user:a}=t;return await this.ctx.bean.flowTask.select({options:e,user:a})}async count(t){let{options:e,user:a}=t;return await this.ctx.bean.flowTask.count({options:e,user:a})}async claim(t){let{flowTaskId:e,user:a}=t;return await this.ctx.bean.flowTask.claim({flowTaskId:e,user:a})}async complete(t){let{flowTaskId:e,handle:a,formAtom:s,user:o}=t;return await this.ctx.bean.flowTask.complete({flowTaskId:e,handle:a,formAtom:s,user:o})}async appendHandleRemark(t){let{flowTaskId:e,handle:a,user:s}=t;return await this.ctx.bean.flowTask.appendHandleRemark({flowTaskId:e,handle:a,user:s})}async assignees(t){let{flowTaskId:e,user:a}=t;return await this.ctx.bean.flowTask.assignees({flowTaskId:e,user:a})}async assigneesConfirmation(t){let{flowTaskId:e,handle:a,user:s}=t;return await this.ctx.bean.flowTask.assigneesConfirmation({flowTaskId:e,handle:a,user:s})}async recall(t){let{flowTaskId:e,user:a}=t;return await this.ctx.bean.flowTask.recall({flowTaskId:e,user:a})}async cancelFlow(t){let{flowTaskId:e,handle:a,user:s}=t;return await this.ctx.bean.flowTask.cancelFlow({flowTaskId:e,handle:a,user:s})}async viewAtom(t){let{flowTaskId:e,user:a}=t;return await this.ctx.bean.flowTask.viewAtom({flowTaskId:e,user:a})}async editAtom(t){let{flowTaskId:e,user:a}=t;return await this.ctx.bean.flowTask.editAtom({flowTaskId:e,user:a})}async userSelectForward(t){let{flowTaskId:e,params:a,user:s}=t;const o=await this.ctx.model.flowTask.get({id:e});return await this.ctx.bean.local.right.forward({flowTask:o,user:s}),await this.ctx.bean.user.selectGeneral({params:a})}async forward(t){let{flowTaskId:e,handle:a,user:s}=t;return await this.ctx.bean.flowTask.forward({flowTaskId:e,handle:a,user:s})}async forwardRecall(t){let{flowTaskId:e,user:a}=t;return await this.ctx.bean.flowTask.forwardRecall({flowTaskId:e,user:a})}async userSelectSubstitute(t){let{flowTaskId:e,params:a,user:s}=t;const o=await this.ctx.model.flowTask.get({id:e});return await this.ctx.bean.local.right.substitute({flowTask:o,user:s}),await this.ctx.bean.user.selectGeneral({params:a})}async substitute(t){let{flowTaskId:e,handle:a,user:s}=t;return await this.ctx.bean.flowTask.substitute({flowTaskId:e,handle:a,user:s})}async substituteRecall(t){let{flowTaskId:e,user:a}=t;return await this.ctx.bean.flowTask.substituteRecall({flowTaskId:e,user:a})}}return e}},2481:(t,e,a)=>{const s=a(8536),o=a(6411);t.exports=t=>({flow:s,flowTask:o})},5638:t=>{"use strict";t.exports=require("require3")}},e={},a=function a(s){var o=e[s];if(void 0!==o)return o.exports;var n=e[s]={exports:{}};return t[s](n,n.exports,a),n.exports}(312);module.exports=a})();