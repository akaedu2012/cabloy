{"version":3,"sources":["webpack://egg-born-module-test-party/./backend/src/aop/regExp.js","webpack://egg-born-module-test-party/./backend/src/aop/simple.js","webpack://egg-born-module-test-party/./backend/src/aops.js","webpack://egg-born-module-test-party/./backend/src/bean/atom.party.js","webpack://egg-born-module-test-party/./backend/src/bean/broadcast.test.js","webpack://egg-born-module-test-party/./backend/src/bean/event.helloEcho.js","webpack://egg-born-module-test-party/./backend/src/bean/event.loginInfo.js","webpack://egg-born-module-test-party/./backend/src/bean/event.loginInfoDashboard.js","webpack://egg-born-module-test-party/./backend/src/bean/event.userVerify.js","webpack://egg-born-module-test-party/./backend/src/bean/io.message.test.js","webpack://egg-born-module-test-party/./backend/src/bean/middleware.interception.js","webpack://egg-born-module-test-party/./backend/src/bean/middleware.restructuring.js","webpack://egg-born-module-test-party/./backend/src/bean/queue.test.js","webpack://egg-born-module-test-party/./backend/src/bean/schedule.test.js","webpack://egg-born-module-test-party/./backend/src/bean/sequence.test.js","webpack://egg-born-module-test-party/./backend/src/bean/startup.startupAll.js","webpack://egg-born-module-test-party/./backend/src/bean/startup.startupInstance.js","webpack://egg-born-module-test-party/./backend/src/bean/stats.tasksInstance.js","webpack://egg-born-module-test-party/./backend/src/bean/stats.tasksUser.js","webpack://egg-born-module-test-party/./backend/src/bean/test.app.js","webpack://egg-born-module-test-party/./backend/src/bean/test.class.js","webpack://egg-born-module-test-party/./backend/src/bean/test.ctx.js","webpack://egg-born-module-test-party/./backend/src/bean/version.manager.js","webpack://egg-born-module-test-party/./backend/src/bean/version/test.js","webpack://egg-born-module-test-party/./backend/src/bean/version/testData.js","webpack://egg-born-module-test-party/./backend/src/beans.js","webpack://egg-born-module-test-party/./backend/src/config/config.js","webpack://egg-born-module-test-party/./backend/src/config/errors.js","webpack://egg-born-module-test-party/./backend/src/config/locale/en-us.js","webpack://egg-born-module-test-party/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-test-party/./backend/src/config/locales.js","webpack://egg-born-module-test-party/./backend/src/config/socketio/test.js","webpack://egg-born-module-test-party/./backend/src/config/static/dashboard/dashboardTest.js","webpack://egg-born-module-test-party/./backend/src/config/static/dashboards.js","webpack://egg-born-module-test-party/./backend/src/config/static/resources.js","webpack://egg-born-module-test-party/./backend/src/config/validation/keywords.js","webpack://egg-born-module-test-party/./backend/src/config/validation/schemas.js","webpack://egg-born-module-test-party/./backend/src/controller/kitchen-sink/autocomplete.js","webpack://egg-born-module-test-party/./backend/src/controller/kitchen-sink/form-schema-validation.js","webpack://egg-born-module-test-party/./backend/src/controller/kitchen-sink/guide.js","webpack://egg-born-module-test-party/./backend/src/controller/kitchen-sink/ptr-is-loadmore.js","webpack://egg-born-module-test-party/./backend/src/controller/party.js","webpack://egg-born-module-test-party/./backend/src/controller/test/atom/all.js","webpack://egg-born-module-test-party/./backend/src/controller/test/atom/right.js","webpack://egg-born-module-test-party/./backend/src/controller/test/atom/starLabel.js","webpack://egg-born-module-test-party/./backend/src/controller/test/cache/db.js","webpack://egg-born-module-test-party/./backend/src/controller/test/cache/mem.js","webpack://egg-born-module-test-party/./backend/src/controller/test/cache/redis.js","webpack://egg-born-module-test-party/./backend/src/controller/test/ctx/config.js","webpack://egg-born-module-test-party/./backend/src/controller/test/ctx/locale.js","webpack://egg-born-module-test-party/./backend/src/controller/test/ctx/performAction.js","webpack://egg-born-module-test-party/./backend/src/controller/test/ctx/request.js","webpack://egg-born-module-test-party/./backend/src/controller/test/ctx/response.js","webpack://egg-born-module-test-party/./backend/src/controller/test/ctx/session.js","webpack://egg-born-module-test-party/./backend/src/controller/test/ctx/tail.js","webpack://egg-born-module-test-party/./backend/src/controller/test/ctx/transaction.js","webpack://egg-born-module-test-party/./backend/src/controller/test/event/hello.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/bean.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/broadcast.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/category.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/httpLog.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/instance.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/middleware.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/model.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/progress.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/queue.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/sendMail.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/sequence.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/settings.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/socketio.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/stats.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/status.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/tag.js","webpack://egg-born-module-test-party/./backend/src/controller/test/feat/validation.js","webpack://egg-born-module-test-party/./backend/src/controller/test/monkey/monkeyee.js","webpack://egg-born-module-test-party/./backend/src/controller/test/resource/all.js","webpack://egg-born-module-test-party/./backend/src/controller/test/resource/right.js","webpack://egg-born-module-test-party/./backend/src/controller/test/role/userRole.js","webpack://egg-born-module-test-party/./backend/src/controllers.js","webpack://egg-born-module-test-party/./backend/src/main.js","webpack://egg-born-module-test-party/./backend/src/meta.js","webpack://egg-born-module-test-party/./backend/src/model/party.js","webpack://egg-born-module-test-party/./backend/src/model/partyType.js","webpack://egg-born-module-test-party/./backend/src/models.js","webpack://egg-born-module-test-party/./backend/src/routes.js","webpack://egg-born-module-test-party/./backend/src/service/party.js","webpack://egg-born-module-test-party/./backend/src/services.js","webpack://egg-born-module-test-party/external \"require3\"","webpack://egg-born-module-test-party/webpack/bootstrap","webpack://egg-born-module-test-party/webpack/startup"],"names":[],"mappings":";;;;;;;AAAA;AACA;;AAEA;AACA;AACA,yBAAyB,cAAc;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,eAAe;AACzC;;AAEA;AACA;AACA,0BAA0B,eAAe;AACzC;;AAEA;;AAEA;AACA;;;;;;;;AC/BA;;AAEA;AACA;AACA,wBAAwB,eAAe;AACvC;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB,cAAc;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,eAAe;AACzC;;AAEA;;AAEA;AACA;;;;;;;;ACnCA,eAAe,mBAAO,CAAC,GAAiB;AACxC,eAAe,mBAAO,CAAC,IAAiB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;;ACrBA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,kBAAkB,wBAAwB;AAC1C;AACA,sCAAsC,wBAAwB;AAC9D;AACA;AACA;AACA,OAAO;AACP,cAAc;AACd;;AAEA,gBAAgB,gCAAgC;AAChD;AACA,qCAAqC,gCAAgC;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,kCAAkC;AACpD;AACA,0BAA0B,kCAAkC;AAC5D;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,8CAA8C;AAC/D;AACA,yBAAyB,8CAA8C;AACvE;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA,OAAO;AACP;AACA,0BAA0B,uBAAuB;AACjD;;AAEA,4BAA4B,kDAAkD;AAC9E;AACA,gDAAgD,kDAAkD;AAClG;AACA;AACA;AACA;AACA,mDAAmD,kBAAkB;AACrE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qCAAqC,EAAE,kCAAkC;AAC9F;AACA;AACA;AACA;AAC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;AAC9B;;AAEA,wBAAwB,OAAO;AAC/B,sCAAsC,OAAO;AAC7C;;AAEA;;AAEA;AACA;;;;;;;;ACpCA,sBAAsB,mBAAO,CAAC,IAAmB;;AAEjD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA,WAAW,uCAAuC;AAClD,WAAW,kEAAkE;AAC7E,WAAW,qDAAqD;AAChE,WAAW,sDAAsD;AACjE,WAAW,qDAAqD;AAChE,WAAW,2CAA2C;AACtD,WAAW,2CAA2C;AACtD;AACA,WAAW,yDAAyD;AACpE,WAAW,8CAA8C;AACzD;AACA,oDAAoD,qCAAqC;AACzF;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACxFA,iBAAiB,mBAAO,CAAC,IAAe;;AAExC;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wDAAwD,WAAW;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,mBAAmB,sCAAsC;AACzD,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,0DAA0D;AACvG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG,uCAAuC;AAC1C,GAAG,2DAA2D;AAC9D,GAAG,2DAA2D;AAC9D,GAAG,4DAA4D;AAC/D,GAAG,6DAA6D;AAChE,GAAG,+DAA+D;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7CA,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,gBAAgB,mBAAO,CAAC,IAAoB;AAC5C,kBAAkB,mBAAO,CAAC,IAAsB;AAChD,gBAAgB,mBAAO,CAAC,IAAoB;AAC5C,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,wBAAwB,mBAAO,CAAC,GAA4B;AAC5D,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,gCAAgC,mBAAO,CAAC,IAAoC;AAC5E,sBAAsB,mBAAO,CAAC,GAA0B;AACxD,kBAAkB,mBAAO,CAAC,IAAsB;AAChD,qBAAqB,mBAAO,CAAC,GAAyB;AACtD,0BAA0B,mBAAO,CAAC,GAA8B;AAChE,+BAA+B,mBAAO,CAAC,IAAmC;AAC1E,mCAAmC,mBAAO,CAAC,IAAmC;AAC9E,oCAAoC,mBAAO,CAAC,IAAoC;AAChF,kBAAkB,mBAAO,CAAC,IAAsB;AAChD,sBAAsB,mBAAO,CAAC,IAA2B;AACzD,qBAAqB,mBAAO,CAAC,IAAyB;AACtD,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,2BAA2B,mBAAO,CAAC,IAA+B;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;;AC3HA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;;AAEA;;;AAGA;AACA;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1BA;AACA,WAAW,mBAAO,CAAC,IAAmB;AACtC,WAAW,mBAAO,CAAC,IAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,OAAO;AACP,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5QA,sBAAsB,mBAAO,CAAC,IAA8B;;AAE5D;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAA8E;AACvG;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC,eAAe,4BAA4B;AAC3C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0BAA0B;AACrC,WAAW,4BAA4B;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;;ACrSA,kBAAkB,mBAAO,CAAC,IAAoC;;AAE9D;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;;;;;;;;;ACtBA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;;AAEA;;AAEA;AACA;;;;;;;;;AC7DA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,qBAAqB;AAClC,qBAAqB,QAAQ,EAAE,mCAAmC;AAClE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qDAAqD,iBAAiB;AACtE;AACA;AACA,yCAAyC,qBAAqB;AAC9D;AACA,mDAAmD,KAAK;AACxD;AACA,yCAAyC,KAAK;AAC9C;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qDAAqD,iBAAiB;AACtE;AACA;AACA,yCAAyC,sBAAsB;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;;ACxFA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB,KAAK,OAAO;AACtD,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;AC7BA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;;;;;;;;AC5BA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,OAAO;AACP;AACA;;AAEA;AACA;AACA,2DAA2D,yBAAyB;AACpF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,OAAO;AACP;AACA;AACA,eAAe,uCAAuC;AACtD,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC,eAAe,kBAAkB;AACjC,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA,mDAAmD,4BAA4B,kBAAkB,EAAE;AACnG;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,YAAY,mCAAmC,EAAE;AACnE;AACA,iBAAiB,oBAAoB;AACrC;AACA,SAAS;AACT,eAAe,kBAAkB;AACjC,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC;AACA,oBAAoB,wBAAwB;AAC5C,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC;AACA,oBAAoB,wBAAwB;AAC5C,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC,UAAU;;AAEV;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX,4BAA4B,wBAAwB;AACpD,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;ACzNA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;AC3BA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,OAAO;AACP;AACA;;AAEA;AACA;AACA,2DAA2D,yBAAyB;AACpF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA,OAAO;;AAEP;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA,OAAO;AACP;;AAEA;AACA,iDAAiD,6BAA6B;AAC9E;AACA;;AAEA;AACA,qCAAqC,8BAA8B,UAAU,QAAQ;AACrF,uCAAuC,8BAA8B,gBAAgB,QAAQ;;AAE7F;AACA,6CAA6C,6BAA6B;AAC1E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6BAA6B;AAC/C;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,6BAA6B;AAC/C;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,6BAA6B;AAC/C;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA,qCAAqC,8BAA8B,UAAU,QAAQ;AACrF,uCAAuC,8BAA8B,eAAe,QAAQ;;AAE5F;AACA,6CAA6C,6BAA6B;AAC1E;AACA;;AAEA;AACA,uCAAuC,6BAA6B;;AAEpE;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;AC5GA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC9DA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC9DA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC9DA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACvBA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AChCA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;AC5BA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACpCA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AChCA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;;;;;;;;AC/CA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC9BA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,mCAAmC;AAClD;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;AC/BA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,eAAe;AAC7C;AACA,oCAAoC,eAAe;AACnD,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;AChCA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wDAAwD,OAAO;AAC/D,2BAA2B,MAAM;;AAEjC,+DAA+D,OAAO;AACtE,2BAA2B,MAAM;;AAEjC;AACA;;AAEA;AACA;AACA;;AAEA,8CAA8C,OAAO;AACrD,2BAA2B,MAAM;;AAEjC,qDAAqD,OAAO;AAC5D,2BAA2B,MAAM;;AAEjC,sDAAsD,OAAO;AAC7D,0DAA0D,MAAM;;AAEhE,sDAAsD,OAAO;AAC7D,0DAA0D,MAAM;;AAEhE;AACA;;AAEA,+DAA+D,OAAO;AACtE,2BAA2B,MAAM;;AAEjC,sEAAsE,OAAO;AAC7E,2BAA2B,MAAM;;AAEjC;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;ACxDA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,OAAO;AACP;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;ACnBA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;AC3CA;;AAEA;;AAEA;AACA,sBAAsB,WAAW,mBAAmB,YAAY,EAAE,YAAY;AAC9E;AACA;;AAEA;;AAEA;AACA;;;;;;;;;ACZA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACfA;;AAEA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;ACnBA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;AACA;AACA,KAAK,oDAAoD;AACzD,KAAK,oDAAoD;AACzD,KAAK,sDAAsD;AAC3D;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,gBAAgB;AAChC,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;AACP,gBAAgB,gBAAgB;AAChC;AACA,OAAO;;AAEP;AACA;AACA,gBAAgB,mCAAmC;AACnD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,uBAAuB;AACpC,aAAa,uBAAuB;AACpC;AACA,SAAS;AACT,OAAO;AACP;;;AAGA;AACA,0BAA0B,gBAAgB;;AAE1C;AACA,uCAAuC,gBAAgB;AACvD;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;AC5HA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,0CAA0C,aAAa;AACvD,OAAO;AACP;AACA,wBAAwB,aAAa;AACrC;;AAEA,iCAAiC,aAAa;AAC9C;AACA;AACA,8BAA8B,4BAA4B;AAC1D;AACA,2CAA2C,kDAAkD;AAC7F;AACA;AACA,OAAO;AACP;AACA,4CAA4C,mCAAmC;AAC/E;AACA;AACA;AACA;;AAEA,qBAAqB,yBAAyB;AAC9C;AACA;AACA,qBAAqB,WAAW;AAChC,wBAAwB,2BAA2B,IAAI,MAAM;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8BAA8B,yCAAyC;AACvE;AACA;;AAEA,qBAAqB,yBAAyB;AAC9C;AACA;AACA,qBAAqB,WAAW;AAChC,wBAAwB,2BAA2B,IAAI,MAAM;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gCAAgC,yCAAyC;AACzE;AACA;;AAEA,uBAAuB,yBAAyB;AAChD;AACA;AACA,qBAAqB,WAAW;AAChC,wBAAwB,6BAA6B,IAAI,MAAM;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACxFA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,OAAO;AACP;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;AClCA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;ACnBA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,+EAA+E,QAAQ;;AAEvF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;ACzEA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,uDAAuD,8BAA8B;AACrF;AACA,mDAAmD,oDAAoD;AACvG;;AAEA;AACA;AACA;AACA;AACA;AACA,qDAAqD,OAAO;;AAE5D;AACA,mDAAmD,oDAAoD;AACvG;;AAEA;;AAEA;AACA,uDAAuD,4BAA4B;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA,yDAAyD,OAAO;;AAEhE;AACA,uDAAuD,4BAA4B;AACnF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;AClDA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;AC5BA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;;ACxDA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;ACzCA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;AC1CA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;ACnBA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;ACXA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,uBAAuB;;AAEvB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,WAAW,EAAE;AACb;AACA,iBAAiB,oBAAoB;AACrC;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,cAAc,8BAA8B;AAC5C,kBAAkB,kBAAkB;AACpC;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;ACxDA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;ACZA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D,uBAAuB;AACrF;AACA;AACA,0DAA0D,uBAAuB;AACjF;AACA;AACA,0DAA0D,uBAAuB;AACjF;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;AC9CA,cAAc,mBAAO,CAAC,IAAuB;AAC7C,0BAA0B,mBAAO,CAAC,GAAqC;AACvE,oBAAoB,mBAAO,CAAC,IAA+B;AAC3D,sBAAsB,mBAAO,CAAC,IAAiC;AAC/D,0BAA0B,mBAAO,CAAC,IAAqC;AACvE,wBAAwB,mBAAO,CAAC,GAAmC;AACnE,6BAA6B,mBAAO,CAAC,IAAwC;AAC7E,2BAA2B,mBAAO,CAAC,IAAsC;AACzE,oBAAoB,mBAAO,CAAC,IAA+B;AAC3D,uBAAuB,mBAAO,CAAC,IAAkC;AACjE,uBAAuB,mBAAO,CAAC,IAAkC;AACjE,wBAAwB,mBAAO,CAAC,IAAmC;AACnE,sBAAsB,mBAAO,CAAC,IAAiC;AAC/D,sBAAsB,mBAAO,CAAC,CAAiC;AAC/D,qBAAqB,mBAAO,CAAC,IAAgC;AAC7D,oBAAoB,mBAAO,CAAC,IAA+B;AAC3D,uBAAuB,mBAAO,CAAC,IAAkC;AACjE,yBAAyB,mBAAO,CAAC,IAAoC;AACrE,uBAAuB,mBAAO,CAAC,IAAkC;AACjE,qBAAqB,mBAAO,CAAC,IAAgC;AAC7D,wBAAwB,mBAAO,CAAC,IAAmC;AACnE,yBAAyB,mBAAO,CAAC,IAAoC;AACrE,yBAAyB,mBAAO,CAAC,IAAoC;AACrE,yBAAyB,mBAAO,CAAC,IAAoC;AACrE,yBAAyB,mBAAO,CAAC,GAAoC;AACrE,yBAAyB,mBAAO,CAAC,IAAoC;AACrE,yBAAyB,mBAAO,CAAC,IAAoC;AACrE,sBAAsB,mBAAO,CAAC,IAAiC;AAC/D,uBAAuB,mBAAO,CAAC,IAAkC;AACjE,2BAA2B,mBAAO,CAAC,IAAsC;AACzE,2BAA2B,mBAAO,CAAC,IAAsC;AACzE,sBAAsB,mBAAO,CAAC,IAAiC;AAC/D,0BAA0B,mBAAO,CAAC,IAAqC;AACvE,sBAAsB,mBAAO,CAAC,IAAiC;AAC/D,yBAAyB,mBAAO,CAAC,IAAoC;AACrE,oBAAoB,mBAAO,CAAC,IAA+B;AAC3D,qBAAqB,mBAAO,CAAC,IAAsC;AACnE,oCAAoC,mBAAO,CAAC,IAA2C;AACvF,6BAA6B,mBAAO,CAAC,IAAoC;AACzE,4CAA4C,mBAAO,CAAC,IAAqD;AACzG,qCAAqC,mBAAO,CAAC,IAA8C;;AAE3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvFA,eAAe,mBAAO,CAAC,IAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,IAAoB;;AAE3C;;AAEA;AACA,eAAe,mBAAO,CAAC,IAAW;AAClC;AACA,gBAAgB,mBAAO,CAAC,IAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,IAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,IAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,IAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,IAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AClCA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,IAAgC;AAC5D;AACA,qBAAqB,mBAAO,CAAC,IAAiC;AAC9D;AACA,yBAAyB,mBAAO,CAAC,IAA2B;AAC5D;AACA,6BAA6B,mBAAO,CAAC,IAA+B;AACpE,4BAA4B,mBAAO,CAAC,IAA8B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mCAAmC;AAC1D;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,uBAAuB,mCAAmC;AAC1D;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;AC1KA;;AAEA;;AAEA;AACA,kBAAkB,+BAA+B,wBAAwB,EAAE;AAC3E;;AAEA;;AAEA;AACA;;;;;;;;ACXA;;AAEA;;AAEA;AACA,kBAAkB,mCAAmC,uBAAuB,EAAE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","file":"backend.js","sourcesContent":["module.exports = ctx => {\n  class regExpAop {\n\n    get__name(context, next) {\n      next();\n      context.value = `${context.value}:regexpaop`;\n    }\n\n    set__name(context, next) {\n      const parts = context.value.split(':');\n      const index = parts.indexOf('regexpaop');\n      if (index > -1) {\n        parts.splice(index, 1);\n      }\n      context.value = parts.join(':');\n      next();\n    }\n\n    actionSync(context, next) {\n      next();\n      context.result = `${context.result}:regexpaop`;\n    }\n\n    async actionAsync(context, next) {\n      await next();\n      context.result = `${context.result}:regexpaop`;\n    }\n\n  }\n\n  return regExpAop;\n};\n","class simpleAopBase {\n\n  actionSync(context, next) {\n    next();\n    context.result = `${context.result}:simpleaop`;\n  }\n\n}\n\nmodule.exports = ctx => {\n  class simpleAop extends simpleAopBase {\n\n    get__name(context, next) {\n      next();\n      context.value = `${context.value}:simpleaop`;\n    }\n\n    set__name(context, next) {\n      const parts = context.value.split(':');\n      const index = parts.indexOf('simpleaop');\n      if (index > -1) {\n        parts.splice(index, 1);\n      }\n      context.value = parts.join(':');\n      next();\n    }\n\n    async actionAsync(context, next) {\n      await next();\n      context.result = `${context.result}:simpleaop`;\n    }\n\n  }\n\n  return simpleAop;\n};\n","const regExp = require('./aop/regExp.js');\nconst simple = require('./aop/simple.js');\n\nmodule.exports = app => {\n  const aops = {};\n  if (app.meta.isTest || app.meta.isLocal) {\n    Object.assign(aops, {\n      simple: {\n        match: 'testctx',\n        mode: 'ctx',\n        bean: simple,\n      },\n      regExp: {\n        match: [ /^test-party.test\\.\\w+$/, 'testctx' ],\n        mode: 'ctx',\n        bean: regExp,\n      },\n    });\n  }\n\n  return aops;\n};\n","module.exports = app => {\n\n  const gPartyTypeEmojis = {\n    Birthday: '🎂',\n    Dance: '💃',\n    Garden: '🏡',\n  };\n\n  class Atom extends app.meta.AtomBase {\n\n    async create({ atomClass, item, user }) {\n      // super\n      const key = await super.create({ atomClass, item, user });\n      // add party\n      const res = await this.ctx.model.party.insert({\n        atomId: key.atomId,\n      });\n      return { atomId: key.atomId, itemId: res.insertId };\n    }\n\n    async read({ atomClass, options, key, user }) {\n      // super\n      const item = await super.read({ atomClass, options, key, user });\n      if (!item) return null;\n      // read\n      this._getMeta(item, options);\n      // ok\n      return item;\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // super\n      await super.select({ atomClass, options, items, user });\n      // select\n      for (const item of items) {\n        this._getMeta(item, options);\n      }\n    }\n\n    async write({ atomClass, target, key, item, options, user }) {\n      // super\n      await super.write({ atomClass, target, key, item, options, user });\n      // update party\n      const data = await this.ctx.model.party.prepareData(item);\n      data.id = key.itemId;\n      await this.ctx.model.party.update(data);\n    }\n\n    async delete({ atomClass, key, user }) {\n      // delete party\n      await this.ctx.model.party.delete({\n        id: key.itemId,\n      });\n      // super\n      await super.delete({ atomClass, key, user });\n    }\n\n    async checkRightAction({ atom, atomClass, action, stage, user, checkFlow }) {\n      // super\n      const res = await super.checkRightAction({ atom, atomClass, action, stage, user, checkFlow });\n      if (!res) return res;\n      if (atom.atomStage !== 1) return res;\n      if (action !== 101) return res;\n      // partyOver\n      const item = await this.ctx.model.party.get({ id: atom.itemId });\n      if (action === 101 && item.partyOver === 0) return res;\n      return null;\n    }\n\n    _getMeta(item, options) {\n      // layout: list/table/mobile/pc\n      const layout = options && options.layout;\n      // flags\n      const flags = [];\n      if (item.partyOver) {\n        flags.push(this.ctx.text('PartyOverFlag'));\n      }\n      if (layout !== 'table' && item.personCount) {\n        flags.push(item.personCount + 'P');\n      }\n      // summary\n      let summary;\n      if (item.partyTypeName) {\n        summary = `${gPartyTypeEmojis[item.partyTypeName]}${this.ctx.text(item.partyTypeName)}`;\n      }\n      // meta\n      const meta = {\n        flags,\n        summary,\n      };\n      // ok\n      item._meta = meta;\n    }\n\n  }\n\n  return Atom;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n  class Broadcast extends app.meta.BeanBase {\n\n    async execute(context) {\n      const sameAsCaller = context.sameAsCaller;\n      const data = context.data;\n      if (!sameAsCaller) {\n        // do something\n      }\n      // locale\n      assert.equal(this.ctx.locale, 'zh-cn');\n      // data\n      assert.equal(data.message, 'hello');\n    }\n\n  }\n\n  return Broadcast;\n};\n","module.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class eventBean {\n\n    async execute(context, next) {\n      const data = context.data;\n      data.text = 'hello echo';\n      context.result = `${context.result}.echo`;\n      await next();\n      context.result = `echo.${context.result}`;\n    }\n\n  }\n\n  return eventBean;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nmodule.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class eventBean {\n\n    async execute(context, next) {\n      const data = context.data;\n      const info = data.info;\n      const provider = info.user && info.user.provider;\n      if (provider && provider.module === 'a-authgithub' && provider.providerName === 'authgithub') {\n        info.config = extend(true, info.config, {\n          modules: {\n            'a-layoutmobile': {\n              layout: {\n                login: '/a/login/login',\n                loginOnStart: true,\n                toolbar: {\n                  tabbar: true, labels: true, bottomMd: true,\n                },\n                tabs: [\n                  { name: 'Mine', tabLinkActive: true, iconMaterial: 'person', url: '/a/user/user/mine' },\n                ],\n              },\n            },\n          },\n        });\n      }\n      // next\n      await next();\n    }\n\n  }\n\n  return eventBean;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nmodule.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class eventBean {\n\n    async execute(context, next) {\n      const data = context.data;\n      const info = data.info;\n      info.config = extend(true, info.config, {\n        modules: {\n          'a-dashboard': {\n            dashboard: {\n              home: 'test-party:dashboardTest',\n            },\n          },\n        },\n      });\n      // next\n      await next();\n    }\n\n  }\n\n  return eventBean;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class eventBean {\n\n    async execute(context, next) {\n      const data = context.data;\n      assert(data.profileUser.profileId > 0);\n      // next\n      await next();\n    }\n\n  }\n\n  return eventBean;\n};\n","module.exports = ctx => {\n  class IOMessage extends ctx.app.meta.IOMessageBase(ctx) {\n\n    async onSessionId({ path, message, options }) {\n      return await super.onSessionId({ path, message, options });\n    }\n\n    async onGroupUsers({ path, message, options }) {\n      return await super.onGroupUsers({ path, message, options });\n    }\n\n    async onProcess({ path, options, message, groupUsers, messageClass }) {\n      return await super.onProcess({ path, options, message, groupUsers, messageClass });\n    }\n\n    async onPush({ options, message, messageSync, messageClass }) {\n      return await super.onPush({ options, message, messageSync, messageClass });\n    }\n\n    async onDelivery({ path, options, message, messageSync, messageClass }) {\n      // options\n      const messageScene = (options && options.scene) || '';\n      // send back\n      if (messageSync.messageDirection === 2 && messageSync.userId === 0) {\n        const content = JSON.parse(message.content);\n        const _message = {\n          messageType: message.messageType,\n          messageFilter: message.messageFilter,\n          messageGroup: message.messageGroup,\n          messageScene,\n          userIdTo: message.userIdFrom,\n          content: {\n            text: `Reply: ${content.text}`,\n          },\n        };\n        return await super.publish({ path, message: _message, messageClass, options, user: { id: 0 } });\n      }\n      // default\n      return await super.onDelivery({ path, options, message, messageSync, messageClass });\n    }\n\n    async onChannelRender({ channelFullName, options, message, messageSync, messageClass }) {\n      await super.onChannelRender({ channelFullName, options, message, messageSync, messageClass });\n    }\n\n  }\n  return IOMessage;\n};\n","module.exports = ctx => {\n  class Middleware {\n    async execute(options, next) {\n      const { a, b } = ctx.request.body;\n      if (a === undefined || b === undefined) return ctx.throw(1002); // 1002: 'Incomplete Parameters'\n      // next\n      await next();\n    }\n  }\n  return Middleware;\n};\n","module.exports = ctx => {\n  class Middleware {\n    async execute(options, next) {\n      const { a, b } = ctx.request.body;\n      ctx.request.body.a = parseInt(a);\n      ctx.request.body.b = parseInt(b);\n      // next\n      await next();\n    }\n  }\n  return Middleware;\n};\n","module.exports = app => {\n  class Queue extends app.meta.BeanBase {\n\n    async execute(context) {\n      const data = context.data;\n      return data.a + data.b;\n    }\n\n  }\n\n  return Queue;\n};\n","module.exports = app => {\n  class Schedule extends app.meta.BeanBase {\n\n    async execute(context) {\n      const job = context.job;\n      console.log(`----- Schedule Test: iid=${this.ctx.instance.id}, every=${job.data.jobOptions.repeat.every}, ${new Date()}`);\n    }\n\n  }\n\n  return Schedule;\n};\n","module.exports = ctx => {\n  class Sequence {\n\n    async execute(context) {\n      let value = context.value;\n      return ++value;\n    }\n\n  }\n\n  return Sequence;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n  class Startup extends app.meta.BeanBase {\n\n    async execute() {\n      console.log('test/feat/startup: all');\n      assert.equal(this.ctx.instance, undefined);\n    }\n\n  }\n\n  return Startup;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n  class Startup extends app.meta.BeanBase {\n\n    async execute() {\n      console.log(`test/feat/startup: instance:${this.ctx.instance.id}`);\n      assert(this.ctx.instance.id > 0);\n    }\n\n  }\n\n  return Startup;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Stats {\n\n    async execute(context) {\n      const { keys } = context;\n      const fullName = keys.join('.');\n      const valueOld = await ctx.bean.stats._get({\n        module: moduleInfo.relativeName,\n        fullName,\n      });\n      if (valueOld === undefined) return 1;\n      return valueOld + 1;\n    }\n\n  }\n\n  return Stats;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Stats {\n\n    async execute(context) {\n      const { keys, user } = context;\n      const fullName = keys.join('.');\n      const valueOld = await ctx.bean.stats._get({\n        module: moduleInfo.relativeName,\n        fullName,\n        user,\n      });\n      if (valueOld === undefined) return 1;\n      return valueOld + 1;\n    }\n\n  }\n\n  return Stats;\n};\n","module.exports = app => {\n\n  class appBean extends app.meta.BeanBase {\n\n    actionSync({ a, b }) {\n      return a + b;\n    }\n\n    async actionAsync({ a, b }) {\n      return Promise.resolve(a + b);\n    }\n\n  }\n\n  return appBean;\n};\n\n","class classBeanBase {\n\n  constructor(ctx) {\n    this.ctx = ctx;\n  }\n\n  actionSync({ a, b }) {\n    return a + b;\n  }\n\n}\n\nclass classBean extends classBeanBase {\n\n  async actionAsync({ a, b }) {\n    return Promise.resolve(a + b);\n  }\n\n}\n\nmodule.exports = classBean;\n","module.exports = ctx => {\n  class ctxBean {\n\n    constructor(moduleName) {\n      this._name = moduleName || ctx.module.info.relativeName;\n    }\n\n    get name() {\n      return this._name;\n    }\n\n    set name(value) {\n      this._name = value;\n    }\n\n    actionSync({ a, b }) {\n      return a + b;\n    }\n\n    async actionAsync({ a, b }) {\n      return Promise.resolve(a + b);\n    }\n\n    async actionAsync2({ a, b }) {\n      const name = this.name;\n      const value = await this.actionAsync({ a, b });\n      return `${name}:${value}`;\n    }\n\n    async actionAsync3({ a, b }) {\n      return await this.actionAsync2({ a, b });\n    }\n\n  }\n\n  return ctxBean;\n};\n","const VersionTestFn = require('./version/test.js');\n\nmodule.exports = app => {\n\n  class Version extends app.meta.BeanBase {\n\n    async update(options) {\n      // only in test/local\n      if (!app.meta.isTest && !app.meta.isLocal) return;\n\n      // update\n      if (options.version === 1) {\n        let sql = `\n          CREATE TABLE testParty (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            personCount int(11) DEFAULT '0',\n            partyTypeId int(11) DEFAULT '0',\n            partyOver int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE TABLE testPartyType (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            name varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE VIEW testPartyView as\n            select a.*,b.name as partyTypeName from testParty a\n              left join testPartyType b on a.partyTypeId=b.id\n        `;\n        await this.ctx.model.query(sql);\n\n      }\n    }\n\n    async init(options) {\n      // only in test/local\n      if (!app.meta.isTest && !app.meta.isLocal) return;\n\n      // init\n      if (options.version === 1) {\n        // types\n        for (const name of [ 'Birthday', 'Dance', 'Garden' ]) {\n          await this.ctx.model.partyType.insert({ name });\n        }\n        // add role rights\n        const roleRights = [\n          // basic\n          { roleName: 'system', action: 'create' },\n          { roleName: 'system', action: 'read', scopeNames: 'authenticated' },\n          { roleName: 'system', action: 'write', scopeNames: 0 },\n          { roleName: 'system', action: 'delete', scopeNames: 0 },\n          { roleName: 'system', action: 'clone', scopeNames: 0 },\n          { roleName: 'system', action: 'deleteBulk' },\n          { roleName: 'system', action: 'exportBulk' },\n          // custom\n          { roleName: 'system', action: 'partyOver', scopeNames: 0 },\n          { roleName: 'system', action: 'partyOverBulk' },\n        ];\n        await this.ctx.bean.role.addRoleRightBatch({ atomClassName: 'party', roleRights });\n      }\n\n    }\n\n    async test() {\n      const versionTest = new (VersionTestFn(this.ctx))();\n      await versionTest.run();\n    }\n\n  }\n\n  return Version;\n};\n","const testData = require('./testData.js');\n\nmodule.exports = function(ctx) {\n\n  class VersionTest {\n\n    async run() {\n\n      // roles\n      const roleIds = await this._testRoles();\n\n      // role includes\n      await this._testRoleIncs(roleIds);\n\n      // set role dirty\n      await ctx.bean.role.setDirty(true);\n\n      // users\n      const userIds = await this._testUsers(roleIds);\n\n      // role rights\n      await this._testRoleRights(roleIds);\n\n      // cache\n      this._testCache(roleIds, userIds);\n    }\n\n    _testCache(roleIds, userIds) {\n      // cache roles\n      ctx.cache.mem.set('roleIds', roleIds);\n      // cache users\n      ctx.cache.mem.set('userIds', userIds);\n    }\n\n    // roles\n    async _testRoles() {\n      const roleIds = {};\n      // system roles\n      for (const roleName of ctx.constant.module('a-base').systemRoles) {\n        const role = await ctx.bean.role.getSystemRole({ roleName });\n        roleIds[roleName] = role.id;\n      }\n      // roles\n      for (const [ roleName, leader, catalog, roleNameParent ] of testData.roles) {\n        roleIds[roleName] = await ctx.bean.role.add({\n          roleName,\n          leader,\n          catalog,\n          roleIdParent: roleIds[roleNameParent],\n        });\n      }\n\n      return roleIds;\n    }\n\n    // role incs\n    async _testRoleIncs(roleIds) {\n      for (const [ roleId, roleIdInc ] of testData.roleIncs) {\n        await ctx.bean.role.addRoleInc({\n          roleId: roleIds[roleId],\n          roleIdInc: roleIds[roleIdInc],\n        });\n      }\n    }\n\n    // users\n    async _testUsers(roleIds) {\n      // userIds\n      const userIds = {};\n      for (const [ userName, roleName ] of testData.users) {\n        // add\n        if (!userIds[userName]) {\n          userIds[userName] = await ctx.bean.user.add({\n            userName,\n            realName: userName,\n          });\n          // activated\n          await ctx.bean.user.save({\n            user: { id: userIds[userName], activated: 1 },\n          });\n        }\n        // role\n        await ctx.bean.role.addUserRole({\n          userId: userIds[userName],\n          roleId: roleIds[roleName],\n        });\n      }\n\n      // auths\n      await this._testAuths(userIds);\n\n      // root\n      const userRoot = await ctx.bean.user.get({ userName: 'root' });\n      userIds.root = userRoot.id;\n      return userIds;\n    }\n\n    // role rights\n    async _testRoleRights() {\n      // atomClass\n      await ctx.bean.role.addRoleRightBatch({ atomClassName: 'party', roleRights: testData.roleRights });\n    }\n\n    // auths\n    async _testAuths(userIds) {\n      for (const userName in userIds) {\n        await ctx.executeBean({\n          beanModule: 'a-authsimple',\n          beanFullName: 'a-authsimple.service.auth',\n          context: {\n            userId: userIds[userName],\n            password: '',\n          },\n          fn: 'add',\n        });\n      }\n    }\n\n  }\n\n  return VersionTest;\n};\n","// roleName, leader, catalog, roleNameParent\nconst roles = [\n  [ 'friend', 0, 0, 'external' ],\n  [ 'consultant', 0, 1, 'external' ],\n  [ 'study', 0, 0, 'consultant' ],\n  [ 'work', 0, 0, 'consultant' ],\n  [ 'life', 0, 0, 'consultant' ],\n  [ 'family', 0, 1, 'internal' ],\n  [ 'father', 0, 0, 'family' ],\n  [ 'mother', 1, 0, 'family' ],\n  [ 'son', 0, 0, 'family' ],\n  [ 'daughter', 0, 0, 'family' ],\n];\n\n// friend->family\nconst roleIncs = [\n  [ 'friend', 'family' ],\n];\n\n// family and friend\n//   userName, roleName\nconst users = [\n  [ 'Tom', 'father' ], [ 'Jane', 'mother' ], [ 'Tomson', 'son' ], [ 'Jannie', 'daughter' ],\n  [ 'Jimmy', 'friend' ], [ 'Rose', 'friend' ],\n  [ 'Smith', 'life' ],\n  [ 'Jone', 'work' ],\n  [ 'Rose', 'superuser' ], // for muilti-roles\n  [ 'Jone', 'superuser' ], // for muilti-roles\n];\n\n// roleRights\nconst roleRights = [\n  { roleName: 'family', action: 'create' },\n  { roleName: 'family', action: 'read', scopeNames: 'family' },\n  { roleName: 'authenticated', action: 'read', scopeNames: 0 },\n  { roleName: 'authenticated', action: 'write', scopeNames: 0 },\n  { roleName: 'authenticated', action: 'delete', scopeNames: 0 },\n  { roleName: 'consultant', action: 'read', scopeNames: 'family' },\n];\n\nmodule.exports = {\n  roles,\n  roleIncs,\n  users,\n  roleRights,\n};\n","const versionManager = require('./bean/version.manager.js');\nconst testApp = require('./bean/test.app.js');\nconst testClass = require('./bean/test.class.js');\nconst testCtx = require('./bean/test.ctx.js');\nconst eventHelloEcho = require('./bean/event.helloEcho.js');\nconst eventUserVerify = require('./bean/event.userVerify.js');\nconst eventLoginInfo = require('./bean/event.loginInfo.js');\nconst eventLoginInfoDashboard = require('./bean/event.loginInfoDashboard.js');\nconst broadcastTest = require('./bean/broadcast.test.js');\nconst queueTest = require('./bean/queue.test.js');\nconst scheduleTest = require('./bean/schedule.test.js');\nconst startupStartupAll = require('./bean/startup.startupAll.js');\nconst startupStartupInstance = require('./bean/startup.startupInstance.js');\nconst middlewareTestInterception = require('./bean/middleware.interception.js');\nconst middlewareTestRestructuring = require('./bean/middleware.restructuring.js');\nconst atomParty = require('./bean/atom.party.js');\nconst ioMessageTest = require('./bean/io.message.test.js');\nconst sequenceTest = require('./bean/sequence.test.js');\nconst statsTasksUser = require('./bean/stats.tasksUser.js');\nconst statsTasksInstance = require('./bean/stats.tasksInstance.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    Object.assign(beans, {\n      // test\n      'test.app': {\n        mode: 'app',\n        bean: testApp,\n      },\n      'test.class': {\n        mode: 'app',\n        bean: testClass,\n      },\n      testctx: {\n        mode: 'ctx',\n        bean: testCtx,\n        global: true,\n      },\n      // event\n      'event.helloEcho': {\n        mode: 'ctx',\n        bean: eventHelloEcho,\n      },\n      'event.userVerify': {\n        mode: 'ctx',\n        bean: eventUserVerify,\n      },\n      'event.loginInfo': {\n        mode: 'ctx',\n        bean: eventLoginInfo,\n      },\n      'event.loginInfoDashboard': {\n        mode: 'ctx',\n        bean: eventLoginInfoDashboard,\n      },\n      // broadcast\n      'broadcast.test': {\n        mode: 'app',\n        bean: broadcastTest,\n      },\n      // queue\n      'queue.test': {\n        mode: 'app',\n        bean: queueTest,\n      },\n      // schedule\n      'schedule.test': {\n        mode: 'app',\n        bean: scheduleTest,\n      },\n      // startup\n      'startup.startupAll': {\n        mode: 'app',\n        bean: startupStartupAll,\n      },\n      'startup.startupInstance': {\n        mode: 'app',\n        bean: startupStartupInstance,\n      },\n      // middleware\n      'middleware.testInterception': {\n        mode: 'ctx',\n        bean: middlewareTestInterception,\n      },\n      'middleware.testRestructuring': {\n        mode: 'ctx',\n        bean: middlewareTestRestructuring,\n      },\n      // atom\n      'atom.party': {\n        mode: 'app',\n        bean: atomParty,\n      },\n      // io\n      'io.message.test': {\n        mode: 'ctx',\n        bean: ioMessageTest,\n      },\n      // sequence\n      'sequence.test': {\n        mode: 'ctx',\n        bean: sequenceTest,\n      },\n      // stats\n      'stats.tasksUser': {\n        mode: 'ctx',\n        bean: statsTasksUser,\n      },\n      'stats.tasksInstance': {\n        mode: 'ctx',\n        bean: statsTasksInstance,\n      },\n    });\n  }\n\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  if (appInfo.env === 'unittest') {\n    // startups\n    config.startups = {\n      startupAll: {\n        bean: 'startupAll',\n      },\n      startupInstance: {\n        bean: 'startupInstance',\n        instance: true,\n      },\n    };\n    // queues\n    config.queues = {\n      queueTest: {\n        bean: 'test',\n      },\n    };\n    // broadcasts\n    config.broadcasts = {\n      broadcastTest: {\n        bean: 'test',\n      },\n    };\n    // monkey\n    config.monkeyed = false;\n  }\n\n  if (appInfo.env === 'unittest' || appInfo.env === 'local') {\n\n    // config\n    config.message = 'Hello World';\n\n    // middlewares\n    config.middlewares = {\n      testInterception: {\n        bean: 'testInterception',\n        global: false,\n        dependencies: 'instance',\n      },\n      testRestructuring: {\n        bean: 'testRestructuring',\n        global: false,\n        dependencies: 'instance',\n      },\n    };\n\n    // schedules\n    config.schedules = {\n      test: {\n        bean: 'test',\n        repeat: {\n          every: 3000,\n        },\n        disable: true,\n      },\n    };\n\n    // settings\n    config.settings = {\n      instance: {\n        groupInfo: {\n          slogan: '',\n        },\n      },\n      user: {\n        groupInfo: {\n          username: 'zhennann',\n        },\n        groupExtra: {\n          panelExtra: {\n            groupInfo: {\n              mobile: '123',\n              sex: 1,\n              language: 'en-us',\n            },\n          },\n        },\n      },\n    };\n\n    // captcha scenes\n    const _captchaSMS = {\n      module: 'a-authsms',\n      name: 'captcha',\n    };\n    config.captcha = {\n      scenes: {\n        formMobileVerifyTest: _captchaSMS,\n        formCaptchaTest: null, // means using default\n      // formCaptchaTest: {\n      //   module: 'a-captchasimple',\n      //   name: 'captcha',\n      // },\n      },\n    };\n\n  }\n\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Error Test',\n  1002: 'Incomplete Parameters',\n};\n","module.exports = {\n  PartyOver: 'Party Over',\n  PartyOverFlag: 'Over',\n};\n","module.exports = {\n  Party: '宴会',\n  Review: '评审',\n  Reviewing: '评审中',\n  Reviewed: '已评审',\n  Birthday: '生日',\n  Dance: '跳舞',\n  Garden: '花园',\n  Item: '条目',\n  Products: '产品',\n  Snapshots: '快照',\n  About: '关于',\n  Demonstration: '演示',\n  PartyOver: '宴会结束',\n  PartyOverFlag: '结束',\n  'Create Party': '新建宴会',\n  'Party List': '宴会列表',\n  'Level One': '层级1',\n  'Level Two': '层级2',\n  'Level Three': '层级3',\n  'Well Done': '干得好',\n  'Error Test': '错误测试',\n  'Hello World': '世界，您好',\n  'Fruit Sales': '水果销量',\n  'Fruit Sales(Line Chart)': '水果销量（折线图）',\n  'Fruit Sales(Pie Chart)': '水果销量（饼图）',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const test = {\n    info: {\n      bean: 'test',\n      title: 'Test',\n      persistence: true,\n      push: {\n        channels: [],\n      },\n    },\n  };\n  return test;\n};\n","const content = {\n  root:\n  {\n    id: 'e341b99ef3bc495db8a8c09e6ad6203e',\n    widgets: [\n      {\n        id: 'a0031e5e2aef421f8434856512dec714',\n        name: 'widgetSales',\n        module: 'test-party',\n        properties:\n      {\n        title:\n        {\n          type: 1,\n          value: '',\n        },\n        height:\n        {\n          type: 1,\n          value: 'auto',\n        },\n        widthLarge:\n        {\n          type: 1,\n          value: 25,\n        },\n        widthSmall:\n        {\n          type: 1,\n          value: 100,\n        },\n        widthMedium:\n        {\n          type: 1,\n          value: 50,\n        },\n      },\n      },\n      {\n        id: '7aefb0431ef24996ba35b596b53372e7',\n        group: true,\n        widgets: [\n          {\n            id: 'fe96b7ede7f5480a9590e92184272455',\n            name: 'widgetSalesLine',\n            module: 'test-party',\n            properties:\n        {\n          fruit:\n          {\n            bind:\n            {\n              widgetId: 'a0031e5e2aef421f8434856512dec714',\n              propertyName: 'fruit',\n            },\n            type: 2,\n          },\n          title:\n          {\n            type: 1,\n            value: '',\n          },\n          height:\n          {\n            type: 1,\n            value: 'auto',\n          },\n          dataSource:\n          {\n            bind:\n            {\n              widgetId: 'a0031e5e2aef421f8434856512dec714',\n              propertyName: 'dataSource',\n            },\n            type: 2,\n          },\n          widthLarge:\n          {\n            type: 1,\n            value: 100,\n          },\n          widthSmall:\n          {\n            type: 1,\n            value: 100,\n          },\n          widthMedium:\n          {\n            type: 1,\n            value: 100,\n          },\n        },\n          },\n          {\n            id: '9ee4b1234b4a477890ce094e8eb5e332',\n            name: 'widgetSalesPie',\n            module: 'test-party',\n            properties:\n        {\n          title:\n          {\n            type: 1,\n            value: '',\n          },\n          height:\n          {\n            type: 1,\n            value: 'auto',\n          },\n          season:\n          {\n            bind:\n            {\n              widgetId: 'a0031e5e2aef421f8434856512dec714',\n              propertyName: 'season',\n            },\n            type: 2,\n          },\n          dataSource:\n          {\n            bind:\n            {\n              widgetId: 'a0031e5e2aef421f8434856512dec714',\n              propertyName: 'dataSource',\n            },\n            type: 2,\n          },\n          widthLarge:\n          {\n            type: 1,\n            value: 100,\n          },\n          widthSmall:\n          {\n            type: 1,\n            value: 100,\n          },\n          widthMedium:\n          {\n            type: 1,\n            value: 100,\n          },\n        },\n          }],\n        properties:\n      {\n        title:\n        {\n          type: 1,\n          value: '',\n        },\n        height:\n        {\n          type: 1,\n          value: 'auto',\n        },\n        widthLarge:\n        {\n          type: 1,\n          value: 25,\n        },\n        widthSmall:\n        {\n          type: 1,\n          value: 100,\n        },\n        widthMedium:\n        {\n          type: 1,\n          value: 50,\n        },\n      },\n      },\n      {\n        id: '64f7c356b78f45799e4b3072af73866e',\n        name: 'widgetSnapshot',\n        module: 'test-party',\n        properties:\n      {\n        title:\n        {\n          type: 1,\n          value: '',\n        },\n        height:\n        {\n          type: 1,\n          value: 'auto',\n        },\n        snapshots:\n        {\n          type: 2,\n          binds: [\n            {\n              id: 'fb3eac5b678e488cb4da60a2bddb0f60',\n              widgetId: 'fe96b7ede7f5480a9590e92184272455',\n              propertyName: 'snapshot',\n            },\n            {\n              id: '40b8e8ea3007418992f0489cba98129e',\n              widgetId: '9ee4b1234b4a477890ce094e8eb5e332',\n              propertyName: 'snapshot',\n            }],\n        },\n        widthLarge:\n        {\n          type: 1,\n          value: 25,\n        },\n        widthSmall:\n        {\n          type: 1,\n          value: 100,\n        },\n        widthMedium:\n        {\n          type: 1,\n          value: 50,\n        },\n      },\n      },\n      {\n        id: '8a04bfa743fb42b2a65a104e018ab924',\n        name: 'widgetAbout',\n        module: 'a-dashboard',\n        properties:\n      {\n        title:\n        {\n          type: 1,\n          value: '',\n        },\n        height:\n        {\n          type: 1,\n          value: 'auto',\n        },\n        widthLarge:\n        {\n          type: 1,\n          value: 25,\n        },\n        widthSmall:\n        {\n          type: 1,\n          value: 100,\n        },\n        widthMedium:\n        {\n          type: 1,\n          value: 50,\n        },\n      },\n      }],\n  },\n};\n\nmodule.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const dashboard = {\n    atomName: 'Home(Test)',\n    atomStaticKey: 'dashboardTest',\n    atomRevision: 0,\n    description: '',\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return dashboard;\n};\n","const dashboardTest = require('./dashboard/dashboardTest.js');\n\nmodule.exports = app => {\n  const dashboards = [\n    dashboardTest(app),\n  ];\n  return dashboards;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  if (!app.meta.isTest && !app.meta.isLocal) return [];\n  const resources = [\n    // menu\n    {\n      atomName: 'Create Party',\n      atomStaticKey: 'createParty',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:menu.Create',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'party',\n        atomAction: 'create',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Party List',\n      atomStaticKey: 'listParty',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:menu.List',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'party',\n        atomAction: 'read',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Kitchen-sink',\n      atomStaticKey: 'kitchenSink',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:menu.Demonstration',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        actionModule: moduleInfo.relativeName,\n        actionPath: 'kitchen-sink/index',\n      }),\n      resourceRoles: 'root',\n    },\n    // dashboard widget\n    {\n      atomName: 'Fruit Sales',\n      atomStaticKey: 'widgetSales',\n      atomRevision: 0,\n      atomCategoryId: 'a-dashboard:widget.Demonstration',\n      resourceType: 'a-dashboard:widget',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        component: 'widgetSales',\n      }),\n      resourceRoles: 'root',\n    },\n    {\n      atomName: 'Fruit Sales(Line Chart)',\n      atomStaticKey: 'widgetSalesLine',\n      atomRevision: 0,\n      atomCategoryId: 'a-dashboard:widget.Demonstration',\n      resourceType: 'a-dashboard:widget',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        component: 'widgetSalesLine',\n      }),\n      resourceRoles: 'root',\n    },\n    {\n      atomName: 'Fruit Sales(Pie Chart)',\n      atomStaticKey: 'widgetSalesPie',\n      atomRevision: 0,\n      atomCategoryId: 'a-dashboard:widget.Demonstration',\n      resourceType: 'a-dashboard:widget',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        component: 'widgetSalesPie',\n      }),\n      resourceRoles: 'root',\n    },\n    {\n      atomName: 'Snapshots',\n      atomStaticKey: 'widgetSnapshot',\n      atomRevision: 0,\n      atomCategoryId: 'a-dashboard:widget.Demonstration',\n      resourceType: 'a-dashboard:widget',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        component: 'widgetSnapshot',\n      }),\n      resourceRoles: 'root',\n    },\n  ];\n  return resources;\n};\n","module.exports = app => {\n  const keywords = {};\n  keywords.languages = {\n    async: true,\n    type: 'string',\n    errors: true,\n    compile(/* sch, parentSchema*/) {\n      return async function(data) {\n        const ctx = this;\n        const locales = ctx.bean.base.locales();\n        const index = locales.findIndex(item => item.value === data);\n        if (index > -1) return true;\n        const errors = [{ keyword: 'x-languages', params: [], message: ctx.text('Not Expected Value') }];\n        throw new app.meta.ajv.ValidationError(errors);\n      };\n    },\n  };\n  return keywords;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const schemas = {};\n  // party\n  schemas.party = {\n    type: 'object',\n    properties: {\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Party Name',\n        notEmpty: true,\n      },\n      personCount: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Person Count',\n        minimum: 1,\n        notEmpty: true,\n      },\n      partyTypeId: {\n        type: 'number',\n        ebType: 'select',\n        ebTitle: 'Party Type',\n        ebOptionsUrl: '/test/party/party/types',\n        ebOptionTitleKey: 'name',\n        ebOptionValueKey: 'id',\n        ebOptionsBlankAuto: true,\n        notEmpty: true,\n      },\n      atomCategoryId: {\n        type: 'number',\n        ebType: 'category',\n        ebTitle: 'Category',\n      },\n      atomTags: {\n        type: [ 'string', 'null' ],\n        ebType: 'tags',\n        ebTitle: 'Tags',\n      },\n    },\n  };\n  // party search\n  schemas.partySearch = {\n    type: 'object',\n    properties: {\n      partyTypeId: {\n        type: 'number',\n        ebType: 'select',\n        ebTitle: 'Party Type',\n        ebOptionsUrl: '/test/party/party/types',\n        ebOptionTitleKey: 'name',\n        ebOptionValueKey: 'id',\n        ebOptionsBlankAuto: true,\n      },\n    },\n  };\n\n  // settings\n  schemas.settingsUser = {\n    type: 'object',\n    properties: {\n      groupInfo: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        properties: {\n          username: {\n            type: 'string',\n            ebType: 'text',\n            ebTitle: 'My Name',\n            notEmpty: true,\n          },\n        },\n      },\n      groupExtra: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Extra Group',\n        properties: {\n          panelExtra: {\n            ebType: 'panel',\n            ebTitle: 'Extra',\n            $ref: 'settingsUserExtra',\n          },\n        },\n      },\n    },\n  };\n  schemas.settingsUserExtra = {\n    type: 'object',\n    ebTitle: 'Extra',\n    properties: {\n      groupInfo: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        ebGroupWhole: true,\n        properties: {\n          mobile: {\n            type: 'string',\n            ebType: 'text',\n            ebTitle: 'Mobile',\n            notEmpty: true,\n          },\n          sex: {\n            type: 'number',\n            ebType: 'select',\n            ebTitle: 'Sex',\n            ebMultiple: false,\n            ebOptions: [\n              { title: 'Male', value: 1 },\n              { title: 'Female', value: 2 },\n            ],\n            ebParams: {\n              openIn: 'page',\n              closeOnSelect: true,\n            },\n            notEmpty: true,\n          },\n          language: {\n            type: 'string',\n            ebType: 'select',\n            ebTitle: 'Language',\n            ebOptionsUrl: '/a/base/base/locales',\n            ebOptionsUrlParams: null,\n            'x-languages': true,\n            notEmpty: true,\n          },\n        },\n      },\n    },\n  };\n  schemas.settingsInstance = {\n    type: 'object',\n    properties: {\n      groupInfo: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        properties: {\n          slogan: {\n            type: 'string',\n            ebType: 'text',\n            ebTitle: 'Slogan',\n            notEmpty: true,\n          },\n        },\n      },\n    },\n  };\n  schemas.formTest = {\n    type: 'object',\n    properties: {\n      groupInfo: {\n        type: 'null',\n        ebType: 'group-flatten',\n        ebTitle: 'Info Group',\n      },\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        ebDescription: 'Your Name',\n        ebHelp: 'Please type your name',\n        notEmpty: true,\n      },\n      password: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Password',\n        ebSecure: true,\n        notEmpty: true,\n        minLength: 6,\n      },\n      passwordAgain: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Password Again',\n        ebSecure: true,\n        notEmpty: true,\n        const: { $data: '1/password' },\n      },\n      sex: {\n        type: 'number',\n        ebType: 'select',\n        ebTitle: 'Sex',\n        ebMultiple: false,\n        ebOptions: [\n          { title: 'Male', value: 1 },\n          { title: 'Female', value: 2 },\n        ],\n        ebOptionsBlankAuto: true,\n        ebParams: {\n          openIn: 'sheet',\n          closeOnSelect: true,\n        },\n        notEmpty: true,\n      },\n      rememberMe: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Remember Me',\n      },\n      groupExtra: {\n        type: 'null',\n        ebType: 'group-flatten',\n        ebTitle: 'Extra Group',\n      },\n      birthday: {\n        type: [ 'object', 'null' ],\n        ebType: 'datepicker',\n        ebTitle: 'Birthday',\n        ebParams: {\n          dateFormat: 'DD, MM dd, yyyy',\n          header: false,\n          toolbar: false,\n          // backdrop: true,\n        },\n        // format: 'date-time',\n        notEmpty: true,\n        'x-date': true,\n      },\n      language: {\n        type: 'string',\n        ebType: 'select',\n        ebTitle: 'Language',\n        ebOptionsUrl: '/a/base/base/locales',\n        ebOptionsUrlParams: null,\n        ebOptionsBlankAuto: true,\n        ebParams: {\n          openIn: 'sheet',\n          closeOnSelect: true,\n        },\n        'x-languages': true,\n        // notEmpty: true,\n      },\n      avatar: {\n        type: 'string',\n        ebType: 'file',\n        ebTitle: 'Avatar',\n        ebParams: { mode: 1 },\n        notEmpty: true,\n      },\n      motto: {\n        type: 'string',\n        ebType: 'component',\n        ebRender: {\n          module: moduleInfo.relativeName,\n          name: 'renderMotto',\n          options: {\n            props: {\n              height: '100px',\n            },\n          },\n        },\n        notEmpty: true,\n      },\n    },\n  };\n  schemas.formCaptchaTest = {\n    type: 'object',\n    properties: {\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        notEmpty: true,\n      },\n      password: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Password',\n        ebSecure: true,\n        notEmpty: true,\n        minLength: 6,\n      },\n    },\n  };\n  schemas.formMobileVerifyTest = {\n    type: 'object',\n    properties: {\n      mobile: {\n        type: 'string',\n        ebType: 'text',\n        ebInputType: 'tel',\n        ebTitle: 'Phone Number',\n        notEmpty: true,\n      },\n    },\n  };\n\n  return schemas;\n};\n","const languages = require('./data/autocomplete-languages.json');\n\nmodule.exports = app => {\n\n  class AutocompleteController extends app.Controller {\n\n    async languages() {\n      const query = this.ctx.params.query;\n      let data;\n      if (!query) {\n        data = [];\n      } else {\n        data = languages.filter(item => {\n          return item.name.toLowerCase().indexOf(query.toLowerCase()) === 0;\n        });\n      }\n      this.ctx.success(data);\n    }\n\n  }\n\n  return AutocompleteController;\n};\n\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nconst __ItemDefault = {\n  userName: '',\n  password: '',\n  passwordAgain: '',\n  sex: 0,\n  birthday: null,\n  language: '',\n  avatar: '',\n  rememberMe: false,\n  motto: '',\n};\n\nmodule.exports = app => {\n\n  class FormSchemaValidationController extends app.Controller {\n\n    async load() {\n      // try load from db cache\n      const cacheName = this._getCacheName();\n      let item = await this.ctx.cache.db.get(cacheName);\n      item = extend(true, {}, __ItemDefault, item);\n      // ok\n      this.ctx.success(item);\n    }\n\n    async saveSimple() {\n      // item\n      const item = this.ctx.request.body.data;\n      // save to db cache\n      const cacheName = this._getCacheName();\n      await this.ctx.cache.db.set(cacheName, item);\n      // ok\n      this.ctx.success();\n    }\n\n    async saveValidation() {\n      await this.saveSimple();\n    }\n\n    // form-captcha signup\n    signup() {\n      this.ctx.success();\n    }\n\n    // form-mobile-verify\n    mobileVerify() {\n      this.ctx.success();\n    }\n\n    _getCacheName() {\n      // get the operation user\n      const user = this.ctx.state.user.op;\n      return `__formTest:${user.id}`;\n    }\n\n  }\n\n  return FormSchemaValidationController;\n};\n\n","module.exports = app => {\n\n  class GuideController extends app.Controller {\n\n    async echo() {\n      const message = 'Hello World';\n      this.ctx.success(message);\n    }\n\n    async echo2() {\n      const message = this.ctx.config.message;\n      this.ctx.success(message);\n    }\n\n    async echo3() {\n      const message = this.ctx.text('Hello World');\n      this.ctx.success(message);\n    }\n\n    async echo4() {\n      const { message, markCount } = this.ctx.request.body;\n      const res = `${message}${new Array(markCount + 1).join('!')}`;\n      this.ctx.success(res);\n    }\n\n    async echo6() {\n      // testParty: insert/udpate/delete/get\n\n      // insert\n      const res = await this.ctx.db.insert('testParty', {\n        iid: this.ctx.instance.id,\n        deleted: 0,\n        personCount: 3,\n      });\n      const id = res.insertId;\n      // update\n      await this.ctx.db.update('testParty', {\n        id,\n        personCount: 5,\n      });\n      // get\n      const item = await this.ctx.db.get('testParty', {\n        id,\n      });\n      // delete\n      await this.ctx.db.delete('testParty', {\n        id,\n      });\n      // ok\n      this.ctx.success(item);\n    }\n\n    async echo7() {\n      // testParty: insert/udpate/delete/get\n\n      // insert\n      const res = await this.ctx.model.party.insert({ personCount: 3 });\n      const id = res.insertId;\n      // update\n      await this.ctx.model.party.update({ id, personCount: 6 });\n      // get\n      const item = await this.ctx.model.party.get({ id });\n      // delete\n      await this.ctx.model.party.delete({ id });\n      // ok\n      this.ctx.success(item);\n    }\n\n    async echo8() {\n      // transaction\n\n      // insert\n      const res = await this.ctx.model.party.insert({ personCount: 3 });\n      const id = res.insertId;\n      // will throw error\n      await this.ctx.model.party.update({ id, personCountA: 6 });\n      // never here\n      this.ctx.success();\n    }\n\n    async echo9() {\n      // Menu Authorization\n      // ok\n      this.ctx.success('ok');\n    }\n\n  }\n\n  return GuideController;\n};\n\n","\nconst gTestListMax = 89;\n\nmodule.exports = app => {\n\n  class PtrIsLoadMoreController extends app.Controller {\n\n    async list() {\n      // page\n      let page = this.ctx.request.body.page;\n      // adjust page\n      page = this.ctx.bean.util.page(page, false);\n      // items\n      const items = [];\n      for (let i = 0; i < page.size; i++) {\n        const itemId = page.index + i + 1;\n        if (itemId > gTestListMax) break;\n        items.push({\n          id: itemId,\n          title: `${this.ctx.text('Item')} - ${itemId}`,\n        });\n      }\n      // ok\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n  }\n\n  return PtrIsLoadMoreController;\n};\n\n","module.exports = app => {\n\n  class PartyController extends app.Controller {\n\n    async types() {\n      const res = await this.ctx.service.party.types();\n      this.ctx.success(res);\n    }\n\n    async over() {\n      const res = await this.ctx.service.party.over({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async overBulk() {\n      const res = await this.ctx.service.party.overBulk({\n        keys: this.ctx.request.body.keys,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n\n  return PartyController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class AllController extends app.Controller {\n\n    async getRoleIdOwner(atomClass, userId) {\n      const roles = await this.ctx.bean.atom.preferredRoles({\n        atomClass,\n        user: { id: userId },\n      });\n      return roles[0].roleIdWho;\n    }\n\n    async all() {\n      // atomClass\n      const atomClass = await this.ctx.bean.atomClass.get({ atomClassName: 'party' });\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n\n      // user->atom\n      await this._testCheckList('archive', userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n        [ '', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom add party\n      const roleIdOwnerTom = await this.getRoleIdOwner(atomClass, userIds.Tom);\n      const partyKeyDraft = await this.ctx.bean.atom.create({\n        atomClass,\n        roleIdOwner: roleIdOwnerTom,\n        user: { id: userIds.Tom },\n      });\n      await this.ctx.bean.atom.write({\n        key: partyKeyDraft,\n        item: { atomName: 'test:all', personCount: 3 },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList('draft', userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n        [ '', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom enable(submit) party\n      const res = await this.ctx.bean.atom.submit({\n        key: partyKeyDraft,\n        options: { ignoreFlow: true },\n        user: { id: userIds.Tom },\n      });\n      const partyKeyArchive = res.archive.key;\n\n      await this._testCheckList('archive', userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 1 ],\n        [ 'Jimmy', 1 ],\n        [ 'Smith', 1 ],\n        [ '', 1 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom update party\n      await this.ctx.bean.atom.write({\n        key: partyKeyDraft,\n        item: { personCount: 8 },\n        user: { id: userIds.Tom },\n      });\n\n      // Tom get party\n      const party = await this.ctx.bean.atom.read({ key: partyKeyDraft, user: { id: userIds.Tom } });\n      assert.equal(party.personCount, 8);\n\n      // Tom list party\n      const parties = await this.ctx.bean.atom.select({\n        atomClass,\n        options: {\n          where: { atomName: { val: 'test:all', op: 'likeRight' } },\n          orders: [[ 'a.createdAt', 'desc' ]],\n          page: { index: 0, size: 0 },\n          stage: 'archive',\n        },\n        user: { id: userIds.Tom },\n      });\n      assert.equal(parties.length, 1);\n\n      // checkRightRead\n      const checkRightReads = [[ 'Tom', partyKeyArchive.atomId, true ]];\n      for (const [ userName, atomId, right ] of checkRightReads) {\n        const res = await this.ctx.bean.atom.checkRightRead({\n          atom: { id: atomId },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightWrite\n      const checkRightWrites = [[ 'Tom', partyKeyArchive.atomId, true ], [ 'Tomson', partyKeyArchive.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightWrites) {\n        const res = await this.ctx.bean.atom.checkRightAction({\n          atom: { id: atomId },\n          action: this.ctx.constant.module('a-base').atom.action.write,\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightDelete\n      const checkRightDeletes = [[ 'Tom', partyKeyArchive.atomId, true ], [ 'Tomson', partyKeyArchive.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightDeletes) {\n        const res = await this.ctx.bean.atom.checkRightAction({\n          atom: { id: atomId },\n          action: this.ctx.constant.module('a-base').atom.action.delete,\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightCreate\n      const checkRightCreates = [[ 'Tom', true ], [ 'Jimmy', true ], [ 'Smith', false ]];\n      for (const [ userName, right ] of checkRightCreates) {\n        const res = await this.ctx.bean.atom.checkRightCreate({\n          atomClass,\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // // checkRightAction:review(flag=1)\n      // const checkRightActions_1 = [[ 'Tom', partyKey.atomId, false ], [ 'Jane', partyKey.atomId, true ]];\n      // for (const [ userName, atomId, right ] of checkRightActions_1) {\n      //   const res = await this.ctx.bean.atom.checkRightAction({\n      //     atom: { id: atomId },\n      //     action: 101,\n      //     user: { id: userIds[userName] },\n      //   });\n      //   assert.equal(!!res, right, userName);\n      // }\n\n      // // action: review\n      // await this.ctx.bean.atom.action({\n      //   action: 101,\n      //   key: partyKey,\n      //   user: { id: userIds.Jane },\n      // });\n\n      // // checkRightAction:review(flag=2)\n      // const checkRightActions_2 = [[ 'Tom', partyKey.atomId, false ], [ 'Jane', partyKey.atomId, false ]];\n      // for (const [ userName, atomId, right ] of checkRightActions_2) {\n      //   const res = await this.ctx.bean.atom.checkRightAction({\n      //     atom: { id: atomId },\n      //     action: 101,\n      //     user: { id: userIds[userName] },\n      //   });\n      //   assert.equal(!!res, right, userName);\n      // }\n\n      // // action: review again\n      // await this.ctx.bean.atom.action({\n      //   action: 101,\n      //   key: partyKey,\n      //   user: { id: userIds.Jane },\n      // });\n\n      // Tom delete party\n      await this.ctx.bean.atom.delete({\n        key: partyKeyArchive,\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList('archive', userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n        [ '', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // done\n      this.ctx.success();\n    }\n\n    async _testCheckList(stage, userIds, userAtoms, cb) {\n      for (const [ userName, atomCountExpected ] of userAtoms) {\n        const list = await this.ctx.bean.atom.select({\n          options: {\n            where: {\n              atomName: 'test:all',\n              'b.module': 'test-party',\n            },\n            orders: null,\n            page: null,\n            stage,\n          },\n          user: userName ? { id: userIds[userName] } : null,\n        });\n        // callback\n        cb(list.length, atomCountExpected, userName);\n      }\n    }\n\n  }\n\n  return AllController;\n};\n\n","module.exports = app => {\n\n  class RightController extends app.Controller {\n\n    async checkRightCreate() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atomClass);\n    }\n\n    async checkRightRead() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atom);\n    }\n\n    async checkRightWrite() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atom);\n    }\n\n    async checkRightAction() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atom);\n    }\n\n  }\n\n  return RightController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class StarLabelController extends app.Controller {\n\n    async getRoleIdOwner(atomClass, userId) {\n      const roles = await this.ctx.bean.atom.preferredRoles({\n        atomClass,\n        user: { id: userId },\n      });\n      return roles[0].roleIdWho;\n    }\n\n    async starLabel() {\n      // atomClass\n      const atomClass = await this.ctx.bean.atomClass.get({ atomClassName: 'party' });\n      // user\n      const user = this.ctx.state.user.op;\n\n      // add party:star\n      const roleIdOwner = await this.getRoleIdOwner(atomClass, user.id);\n      const partyKeyDraft = await this.ctx.bean.atom.create({\n        atomClass,\n        roleIdOwner,\n        user,\n      });\n\n      // write party\n      await this.ctx.bean.atom.write({\n        key: partyKeyDraft,\n        item: { atomName: 'test:starLabel' },\n        user,\n      });\n\n      // submit party\n      const res = await this.ctx.bean.atom.submit({\n        key: partyKeyDraft,\n        options: { ignoreFlow: true },\n        user,\n      });\n      const partyKeyArchive = res.archive.key;\n\n      // get party\n      let party = await this.ctx.bean.atom.read({ key: partyKeyArchive, user });\n      assert.equal(party.star, null);\n      assert.equal(party.labels, null);\n\n      // set star/label\n      await this.ctx.bean.atom.star({ key: partyKeyArchive, atom: { star: 1 }, user });\n      await this.ctx.bean.atom.labels({ key: partyKeyArchive, atom: { labels: [ 1 ] }, user });\n\n      // get party\n      party = await this.ctx.bean.atom.read({ key: partyKeyArchive, user });\n      assert.equal(party.star, 1);\n      assert.equal(party.labels, '[1]');\n\n      // select parties\n      let parties = await this.ctx.bean.atom.select({\n        user,\n        options: {\n          star: 1,\n          where: { atomName: 'test:starLabel' },\n          stage: 'archive',\n        },\n      });\n      assert.equal(parties.length, 1);\n\n      parties = await this.ctx.bean.atom.select({\n        user,\n        options: {\n          label: 1,\n          where: { atomName: 'test:starLabel' },\n          stage: 'archive',\n        },\n      });\n      assert.equal(parties.length, 1);\n\n      parties = await this.ctx.bean.atom.select({\n        user,\n        options: {\n          label: 2,\n          where: { atomName: 'test:starLabel' },\n          stage: 'archive',\n        },\n      });\n      assert.equal(parties.length, 0);\n\n      // clear star/label\n      await this.ctx.bean.atom.star({ key: partyKeyArchive, atom: { star: 0 }, user });\n      await this.ctx.bean.atom.labels({ key: partyKeyArchive, atom: { labels: null }, user });\n\n      // get party\n      party = await this.ctx.bean.atom.read({ key: partyKeyArchive, user });\n      assert.equal(party.star, null);\n      assert.equal(party.labels, null);\n\n      // delete party\n      await this.ctx.bean.atom.delete({ key: partyKeyArchive, user });\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return StarLabelController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class DbController extends app.Controller {\n\n    async db() {\n\n      let res;\n      let value;\n\n      // name\n      const name = '__test:name:db';\n\n      // getset\n      value = await this.ctx.cache._db.getset(name, 'zhen.nann');\n      assert.equal(value, undefined);\n\n      value = await this.ctx.cache._db.getset(name, 'zhennann');\n      assert.equal(value, 'zhen.nann');\n\n      // has\n      res = await this.ctx.cache._db.has(name);\n      assert.equal(res, true);\n\n      // get\n      value = await this.ctx.cache._db.get(name);\n      assert.equal(value, 'zhennann');\n\n      // remove\n      await this.ctx.cache._db.remove(name);\n      res = await this.ctx.cache._db.has(name);\n      assert.equal(res, false);\n\n      // set with timeout\n      await this.ctx.cache._db.set(name, 'zhennann', 2000);\n\n      // get\n      value = await this.ctx.cache._db.get(name);\n      assert.equal(value, 'zhennann');\n\n      // other module's cache\n      const moduleCache = this.ctx.cache._db.module(this.ctx.module.info.relativeName);\n      value = await moduleCache.get(name);\n      assert.equal(value, 'zhennann');\n\n      // get after timeout\n      await sleep(3000);\n      value = await this.ctx.cache._db.get(name);\n      assert.equal(value, undefined);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n  return DbController;\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class MemController extends app.Controller {\n\n    async mem() {\n\n      let res;\n      let value;\n\n      // name\n      const name = '__test:name:mem';\n\n      // set\n      value = this.ctx.cache.mem.getset(name, 'zhen.nann');\n      assert.equal(value, undefined);\n\n      value = this.ctx.cache.mem.getset(name, 'zhennann');\n      assert.equal(value, 'zhen.nann');\n\n      // has\n      res = this.ctx.cache.mem.has(name);\n      assert.equal(!!res, true);\n\n      // get\n      value = this.ctx.cache.mem.get(name);\n      assert.equal(value, 'zhennann');\n\n      // remove\n      this.ctx.cache.mem.remove(name);\n      res = this.ctx.cache.mem.has(name);\n      assert.equal(res, null);\n\n      // set with timeout\n      this.ctx.cache.mem.set(name, 'zhennann', 1000);\n\n      // get\n      value = this.ctx.cache.mem.get(name);\n      assert.equal(value, 'zhennann');\n\n      // other module's cache\n      const moduleCache = this.ctx.cache.mem.module(this.ctx.module.info.relativeName);\n      value = moduleCache.get(name);\n      assert.equal(value, 'zhennann');\n\n      // get after timeout\n      await sleep(1500);\n      value = this.ctx.cache.mem.get(name);\n      assert.equal(value, null);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n  return MemController;\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class RedisController extends app.Controller {\n\n    async redis() {\n\n      let res;\n      let value;\n\n      // name\n      const name = '__test:name:redis';\n\n      // getset\n      value = await this.ctx.cache.redis.getset(name, 'zhen.nann');\n      assert.equal(value, undefined);\n\n      value = await this.ctx.cache.redis.getset(name, 'zhennann');\n      assert.equal(value, 'zhen.nann');\n\n      // has\n      res = await this.ctx.cache.redis.has(name);\n      assert.equal(res, true);\n\n      // get\n      value = await this.ctx.cache.redis.get(name);\n      assert.equal(value, 'zhennann');\n\n      // remove\n      await this.ctx.cache.redis.remove(name);\n      res = await this.ctx.cache.redis.has(name);\n      assert.equal(res, false);\n\n      // set with timeout\n      await this.ctx.cache.redis.set(name, 'zhennann', 2000);\n\n      // get\n      value = await this.ctx.cache.redis.get(name);\n      assert.equal(value, 'zhennann');\n\n      // other module's cache\n      const moduleCache = this.ctx.cache.redis.module(this.ctx.module.info.relativeName);\n      value = await moduleCache.get(name);\n      assert.equal(value, 'zhennann');\n\n      // get after timeout\n      await sleep(3000);\n      value = await this.ctx.cache.redis.get(name);\n      assert.equal(value, undefined);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n  return RedisController;\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class ConfigController extends app.Controller {\n\n    async test() {\n      // current module\n      let message = this.ctx.config.message;\n      assert.equal(message, 'Hello World');\n\n      // other module\n      message = this.ctx.config.module('test-party').message;\n      assert.equal(message, 'Hello World');\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return ConfigController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class LocaleController extends app.Controller {\n\n    async enus() {\n      const message = this.ctx.config.message;\n      const data = {\n        enus: this.ctx.text(message),\n        zhcn: this.ctx.text.locale('zh-cn', message),\n      };\n\n      // done\n      this.ctx.success(data);\n    }\n\n    async zhcn() {\n      const message = this.ctx.config.message;\n      const data = {\n        zhcn: this.ctx.text(message),\n        enus: this.ctx.text.locale('en-us', message),\n      };\n\n      // done\n      this.ctx.success(data);\n    }\n\n  }\n\n  return LocaleController;\n};\n","module.exports = app => {\n\n  class PerformActionController extends app.Controller {\n\n    async performAction() {\n      // param: id\n      const id = this.ctx.request.body.id;\n      // performAction\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'test/ctx/performAction/echo',\n        body: {\n          id,\n        },\n      });\n      this.ctx.success(res);\n    }\n\n    async echo() {\n      // body: id\n      const id = this.ctx.request.body.id;\n      // echo back\n      this.ctx.success(id);\n    }\n\n  }\n\n  return PerformActionController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class RequestController extends app.Controller {\n\n    async request() {\n      // param\n      assert.equal(this.ctx.params.id, '1');\n      assert.equal(this.ctx.getInt('id'), 1);\n\n      // query\n      assert.equal(this.ctx.query.age, '18');\n      assert.equal(this.ctx.getInt('age'), 18);\n\n      // body\n      assert.equal(this.ctx.request.body.userName, 'zhennann');\n      assert.equal(this.ctx.getStr('userName'), 'zhennann');\n\n      // done\n      this.ctx.success();\n    }\n\n    async requestXML() {\n      // payload\n      const payload = await this.ctx.getPayload();\n      // return\n      this.ctx.status = 200;\n      this.ctx.type = 'text/xml';\n      this.ctx.body = payload.toString();\n    }\n\n  }\n\n  return RequestController;\n};\n","module.exports = app => {\n\n  class ResponseController extends app.Controller {\n\n    async success() {\n      const res = {\n        userName: 'zhennann',\n      };\n      this.ctx.success(res);\n    }\n\n    async successMore() {\n      const page = this.ctx.request.body.page;\n      const items = [\n        { userName: 'zhennann' },\n        { userName: 'root' },\n      ];\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async fail() {\n      // Error Test\n      this.ctx.fail(1001);\n    }\n\n    async throwError() {\n      this.ctx.throw(1001);\n    }\n\n  }\n\n  return ResponseController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class SessionController extends app.Controller {\n\n    async session() {\n      // key1\n      this.ctx.session._key1 = 1;\n      // echo1\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'test/ctx/session/echo1',\n      });\n      assert.equal(res.user.op.id, this.ctx.state.user.op.id);\n      assert.equal(res.instance.id, this.ctx.instance.id);\n      assert.equal(this.ctx.session._key2, 2);\n      // done\n      this.ctx.success();\n    }\n\n    async echo1() {\n      // echo2\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'test/ctx/session/echo2',\n      });\n      // echo back\n      this.ctx.success(res);\n    }\n\n    async echo2() {\n      // check\n      assert.equal(this.ctx.session._key1, 1);\n      // key2\n      this.ctx.session._key2 = 2;\n      // echo back\n      this.ctx.success({\n        user: this.ctx.state.user,\n        instance: this.ctx.instance,\n      });\n    }\n\n  }\n\n  return SessionController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class TailController extends app.Controller {\n\n    async tail() {\n      // 1\n      this.ctx.meta._tail_test = 1;\n\n      // tail\n      this.ctx.tail(() => {\n        assert.equal(this.ctx.meta._tail_test, 2);\n        this.ctx.tail(() => {\n          assert.equal(this.ctx.meta._tail_test, 3);\n        });\n        this.ctx.meta._tail_test = 3;\n      });\n\n      // 2\n      this.ctx.meta._tail_test = 2;\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return TailController;\n};\n","module.exports = app => {\n\n  class TransactionController extends app.Controller {\n\n    async transaction() {\n      // user\n      const user = this.ctx.state.user.op;\n      // atomKey\n      const atomKey = this.ctx.request.body.key;\n      // itemNew\n      const itemNew = this.ctx.request.body.item;\n\n      // write\n      await this.ctx.bean.atom.write({\n        key: atomKey,\n        item: { atomName: itemNew.atomName },\n        user,\n      });\n      // write: throw error when personCount is 0\n      await this.ctx.bean.atom.write({\n        key: atomKey,\n        item: { personCount: itemNew.personCount },\n        user,\n      });\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return TransactionController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n\n  class HelloController extends app.Controller {\n\n    async hello() {\n      const data = {\n        text: 'hello',\n      };\n      let result = 'world';\n      result = await this.ctx.bean.event.invoke({\n        module: moduleInfo.relativeName,\n        name: 'hello',\n        data,\n        result,\n        next: async (context, next) => {\n          context.result = `${context.result}.hello`;\n          await next();\n          context.result = `hello.${context.result}`;\n        },\n      });\n      assert.equal(data.text, 'hello echo');\n      assert.equal(result, 'echo.hello.world.echo.hello');\n      this.ctx.success();\n    }\n\n  }\n\n  return HelloController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class BeanController extends app.Controller {\n\n    async bean() {\n      const a = 3;\n      const b = 4;\n      let res;\n\n      // app.bean\n      assert.equal(app.bean['test-party.test.app'], app.bean['test-party.test.app']);\n\n      res = app.bean['test-party.test.app'].actionSync({ a, b });\n      assert.equal(res, `${a + b}:regexpaop`);\n\n      res = await app.bean['test-party.test.app'].actionAsync({ a, b });\n      assert.equal(res, `${a + b}:regexpaop`);\n\n      // ctx.bean: global\n      assert.equal(this.ctx.bean.testctx, this.ctx.bean.testctx);\n\n      this.ctx.bean.testctx.name = 'test-party:regexpaop:simpleaop';\n      res = this.ctx.bean.testctx.name;\n      assert.equal(res, 'test-party:regexpaop:simpleaop');\n\n      res = this.ctx.bean.testctx.actionSync({ a, b });\n      assert.equal(res, `${a + b}:regexpaop:simpleaop`);\n\n      res = await this.ctx.bean.testctx.actionAsync({ a, b });\n      assert.equal(res, `${a + b}:regexpaop:simpleaop`);\n\n      res = await this.ctx.bean.testctx.actionAsync2({ a, b });\n      assert.equal(res, `test-party:regexpaop:simpleaop:${a + b}:regexpaop:simpleaop`);\n\n      res = await this.ctx.bean.testctx.actionAsync3({ a, b });\n      assert.equal(res, `test-party:regexpaop:simpleaop:${a + b}:regexpaop:simpleaop`);\n\n      // ctx.bean: class\n      assert.equal(this.ctx.bean['test-party.test.class'], this.ctx.bean['test-party.test.class']);\n\n      res = this.ctx.bean['test-party.test.class'].actionSync({ a, b });\n      assert.equal(res, `${a + b}:regexpaop`);\n\n      res = await this.ctx.bean['test-party.test.class'].actionAsync({ a, b });\n      assert.equal(res, `${a + b}:regexpaop`);\n\n      // ok\n      this.ctx.success();\n    }\n\n  }\n\n  return BeanController;\n};\n\n","module.exports = app => {\n\n  class BroadcastController extends app.Controller {\n\n    async emit() {\n      this.ctx.app.meta.broadcast.emit({\n        locale: 'zh-cn',\n        subdomain: this.ctx.subdomain,\n        module: 'test-party',\n        broadcastName: 'broadcastTest',\n        data: { message: 'hello' },\n      });\n      this.ctx.success();\n    }\n\n  }\n\n  return BroadcastController;\n\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class CategoryController extends app.Controller {\n\n    async category() {\n\n      // atomClass\n      const atomClass = {\n        module: 'test-party',\n        atomClassName: 'party',\n      };\n\n      // add\n      const categoryId = await this.ctx.bean.category.add({\n        atomClass,\n        data: {\n          language: 'en-us',\n          categoryName: 'levelOne',\n          categoryIdParent: 0,\n        },\n      });\n      assert(categoryId > 0);\n\n      // parseCategoryName: levelOne.levelTwo.levelThree\n      const category = await this.ctx.bean.category.parseCategoryName({\n        atomClass,\n        language: 'en-us',\n        categoryName: 'levelOne.levelTwo.levelThree',\n        force: true,\n      });\n      assert.equal(category.categoryName, 'levelThree');\n\n      // ok\n      this.ctx.success();\n    }\n\n  }\n\n  return CategoryController;\n\n};\n","module.exports = app => {\n\n  class HttpLogController extends app.Controller {\n\n    async httpLog() {\n      // please see: {projectDir}/src/backend/logs/{projectName}/{projectName}-web.log\n      this.ctx.success('this is a test for httpLog');\n    }\n\n  }\n\n  return HttpLogController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class InstanceController extends app.Controller {\n\n    async instance() {\n      assert.equal(!!this.ctx.instance.id, true);\n      assert.equal(!!this.ctx.instance.config, true);\n      this.ctx.success();\n    }\n\n  }\n  return InstanceController;\n};\n","module.exports = app => {\n\n  class TestController extends app.Controller {\n\n    async interception() {\n      const { a, b } = this.ctx.request.body;\n      const c = parseInt(a) + parseInt(b);\n      this.ctx.success(c);\n    }\n\n    async restructuring() {\n      const { a, b } = this.ctx.request.body;\n      const c = a + b;\n      this.ctx.success(c);\n    }\n\n  }\n\n  return TestController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  const atomStaticKey = '--model--test--';\n  const __rows = [\n    { atomStaticKey, atomName: 'atom-one', atomStage: 0 },\n    { atomStaticKey, atomName: 'atom-two', atomStage: 1 },\n    { atomStaticKey, atomName: 'atom-three', atomStage: 2 },\n  ];\n\n  class ModelController extends app.Controller {\n\n    async model() {\n\n      // model\n      const model = this.ctx.model.module('a-base').atom;\n\n      // insert one row\n      await model.insert(__rows[0]);\n      // insert multi rows\n      await model.insert(__rows.slice(1));\n\n      // select\n      let list = await model.select({\n        where: { atomStaticKey },\n      });\n      assert.equal(list.length, 3);\n\n      // read\n      const item = await model.get({\n        atomStaticKey,\n        atomName: 'atom-one',\n      });\n\n      // update one row\n      await model.update({\n        id: item.id,\n        readCount: item.readCount + 1,\n      });\n\n      // update with options.where and options.columns\n      await model.update({\n        readCount: 1,\n      }, {\n        where: { atomStaticKey },\n        columns: [ 'readCount' ],\n      });\n\n      // select: in\n      list = await model.select({\n        where: { atomStaticKey: [ atomStaticKey ] },\n      });\n      assert.equal(list.length, 3);\n      list = await model.select({\n        where: {\n          atomStaticKey: {\n            op: 'in', val: [ atomStaticKey ],\n          },\n        },\n      });\n      assert.equal(list.length, 3);\n\n      // select: is null\n      list = await model.select({\n        where: {\n          atomStaticKey: [ atomStaticKey ],\n          atomName: null,\n        },\n      });\n      assert.equal(list.length, 0);\n\n      // select: is not null\n      list = await model.select({\n        where: {\n          atomStaticKey: [ atomStaticKey ],\n          atomName: {\n            op: 'notNull',\n          },\n        },\n      });\n      assert.equal(list.length, 3);\n\n      // select: like\n      list = await model.select({\n        where: {\n          atomStaticKey: [ atomStaticKey ],\n          atomName: {\n            op: 'likeRight',\n            val: 'atom-',\n          },\n        },\n      });\n      assert.equal(list.length, 3);\n\n      // select: or\n      list = await model.select({\n        where: {\n          atomStaticKey: [ atomStaticKey ],\n          __or__: [\n            { atomName: 'atom-one' },\n            { atomName: 'atom-two' },\n          ],\n        },\n      });\n      assert.equal(list.length, 2);\n\n\n      // delete\n      await model.delete({ atomStaticKey });\n\n      // count\n      const count = await model.count({ atomStaticKey });\n      assert.equal(count, 0);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return ModelController;\n\n};\n","module.exports = app => {\n\n  class ProgressController extends app.Controller {\n\n    async progress() {\n      // create progress\n      const progressId = await this.ctx.bean.progress.create();\n      // background\n      this.ctx.runInBackground(async () => {\n        await this._progressInBackground({ progressId });\n      });\n      // return progressId\n      this.ctx.success({ progressId });\n    }\n\n    async _progressInBackground({ progressId }) {\n      try {\n        // level one\n        await this._levelOne({ progressId, progressNo: 0 });\n        // progress done\n        await this.ctx.bean.progress.done({ progressId, message: this.ctx.text('Well Done') });\n        // ok\n        this.ctx.success(true);\n      } catch (err) {\n        // progress error\n        await this.ctx.bean.progress.error({ progressId, message: err.message });\n        // throw err\n        throw err;\n      }\n    }\n\n    async _levelOne({ progressId, progressNo }) {\n      const total = 2;\n      let current = 0;\n      for (let i = 0; i < total; i++) {\n        const text = `${this.ctx.text('Level One')}: ${i + 1}`;\n        await this.ctx.bean.progress.update({\n          progressId,\n          progressNo,\n          total,\n          progress: current++,\n          text,\n        });\n        // sleep\n        await this.ctx.bean.util.sleep(1500);\n        // level two\n        await this._levelTwo({ progressId, progressNo: progressNo + 1 });\n      }\n    }\n\n    async _levelTwo({ progressId, progressNo }) {\n      const total = 2;\n      let current = 0;\n      for (let i = 0; i < total; i++) {\n        const text = `${this.ctx.text('Level Two')}: ${i + 1}`;\n        await this.ctx.bean.progress.update({\n          progressId,\n          progressNo,\n          total,\n          progress: current++,\n          text,\n        });\n        // sleep\n        await this.ctx.bean.util.sleep(1500);\n        // level two\n        await this._levelThree({ progressId, progressNo: progressNo + 1 });\n      }\n    }\n\n    async _levelThree({ progressId, progressNo }) {\n      const total = 3;\n      let current = 0;\n      for (let i = 0; i < total; i++) {\n        const text = `${this.ctx.text('Level Three')}: ${i + 1}`;\n        await this.ctx.bean.progress.update({\n          progressId,\n          progressNo,\n          total,\n          progress: current++,\n          text,\n        });\n        // sleep\n        await this.ctx.bean.util.sleep(1500);\n      }\n    }\n\n  }\n  return ProgressController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class QueueController extends app.Controller {\n\n    async pushAsync() {\n      const res = await this.ctx.app.meta.queue.pushAsync({\n        locale: this.ctx.locale,\n        subdomain: this.ctx.subdomain,\n        module: 'test-party',\n        queueName: 'queueTest',\n        data: { a: 1, b: 2 },\n      });\n      assert.equal(res, 3);\n      this.ctx.success();\n    }\n\n    async push() {\n      this.ctx.app.meta.queue.push({\n        locale: this.ctx.locale,\n        subdomain: this.ctx.subdomain,\n        module: 'test-party',\n        queueName: 'queueTest',\n        data: { a: 1, b: 2 },\n      });\n      this.ctx.success();\n    }\n\n  }\n\n  return QueueController;\n\n};\n","module.exports = app => {\n\n  class SendMailController extends app.Controller {\n\n    async sendMail() {\n      // send\n      const message = this.ctx.request.body.data;\n      await this.ctx.bean.mail.send({\n        scene: 'test',\n        message,\n      });\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return SendMailController;\n\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\nconst pMap = require3('p-map');\n\nmodule.exports = app => {\n  class SequenceController extends app.Controller {\n\n    async sequence() {\n      const arr = [ 1, 2, 3, 4, 5 ];\n      let results;\n\n      // current\n      let current = await this.ctx.bean.sequence.current('test');\n      assert.equal(current, 0);\n\n      // next\n      let next = await this.ctx.bean.sequence.next('test');\n      assert.equal(next, 1);\n\n      // current\n      current = await this.ctx.bean.sequence.current('test');\n      assert.equal(current, 1);\n\n      // reset\n      await this.ctx.bean.sequence.reset('test');\n\n      // other module's sequence\n      const moduleSequence = this.ctx.bean.sequence.module(this.ctx.module.info.relativeName);\n\n      // next\n      next = await moduleSequence.next('test');\n      assert.equal(next, 1);\n\n      // current\n      current = await moduleSequence.current('test');\n      assert.equal(current, 1);\n\n      // reset\n      await moduleSequence.reset('test');\n\n      // concurrency\n      results = await pMap(arr, async () => {\n        return await moduleSequence.next('test');\n      });\n      assert.equal(new Set(results).size, new Set(arr).size);\n\n      // reset\n      await moduleSequence.reset('test');\n\n      // concurrency transaction\n      results = await pMap(arr, async () => {\n        return await app.meta.util.executeBean({\n          subdomain: this.ctx.subdomain,\n          beanModule: this.ctx.module.info.relativeName,\n          transaction: true,\n          fn: async ({ ctx }) => {\n            const res = await ctx.bean.sequence.next('test');\n            await ctx.bean.util.sleep(50);\n            return res;\n          },\n        });\n      });\n      assert.equal(new Set(results).size, new Set(arr).size, `sequence next: ${results}`);\n\n      // reset\n      await moduleSequence.reset('test');\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n  return SequenceController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class SettingsController extends app.Controller {\n\n    async settings() {\n\n      // user\n\n      // get settings from config\n      let data = await this.ctx.bean.settings.getUser({ name: '/groupInfo/username' });\n      assert.equal(data, 'zhennann');\n      data = await this.ctx.bean.settings.getUser({ name: '/groupExtra/panelExtra/groupInfo/language' });\n      assert.equal(data, 'en-us');\n\n      // load settings\n      data = await this.ctx.bean.settings.loadSettingsUser();\n      assert.equal(data.groupInfo.username, 'zhennann');\n      // save settings\n      data.groupExtra.panelExtra.groupInfo.language = 'zh-cn';\n      await this.ctx.bean.settings.saveSettingsUser({ data });\n\n      // get settings from db\n      data = await this.ctx.bean.settings.getUser({ name: '/groupExtra/panelExtra/groupInfo/language' });\n      assert.equal(data, 'zh-cn');\n\n      // instance\n\n      // get settings from config\n      data = await this.ctx.bean.settings.getInstance({ name: '/groupInfo/slogan' });\n      assert.equal(data, '');\n\n      // load settings\n      data = await this.ctx.bean.settings.loadSettingsInstance();\n      assert.equal(data.groupInfo.slogan, '');\n      // save settings\n      data.groupInfo.slogan = 'Less is more, while more is less';\n      await this.ctx.bean.settings.saveSettingsInstance({ data });\n\n      // get settings from db\n      data = await this.ctx.bean.settings.getInstance({ name: '/groupInfo/slogan' });\n      assert.equal(data, 'Less is more, while more is less');\n\n      // ok\n      this.ctx.success();\n    }\n\n  }\n  return SettingsController;\n};\n\n","\nconst _subscribePath = '/test/party/test';\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class SocketIOController extends app.Controller {\n\n    async publish() {\n      const options = this.ctx.request.body.options;\n      const message = this.ctx.request.body.message;\n      message.userIdFrom = this.ctx.state.user.op.id;\n      const res = await this.ctx.bean.io.publish({\n        path: _subscribePath,\n        message,\n        messageClass: {\n          module: moduleInfo.relativeName,\n          messageClassName: 'test',\n        },\n        options,\n      });\n      // done\n      this.ctx.success(res);\n    }\n\n  }\n\n  return SocketIOController;\n\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n  class StatsController extends app.Controller {\n\n    async stats() {\n\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      const user = { id: userIds.Tom };\n\n      // old\n      let value = await this.ctx.bean.stats.get({\n        name: 'tasksUser',\n        nameSub: 'department.project',\n        user,\n      });\n      assert.equal(value, undefined);\n\n      // notify\n      await this.ctx.bean.stats.notifyAsync({\n        name: 'tasksUser',\n        nameSub: 'department.project',\n        user,\n      });\n\n      // new\n      value = await this.ctx.bean.stats.get({\n        name: 'tasksUser',\n        nameSub: 'department.project',\n        user,\n      });\n      assert.equal(value, 1);\n\n      // instance\n      value = await this.ctx.bean.stats.get({\n        name: 'tasksInstance',\n        user,\n      });\n      assert.equal(value, 1);\n\n      // done\n      this.ctx.success();\n    }\n\n    async plus() {\n      this.ctx.bean.stats.notify({\n        name: 'tasksUser',\n        nameSub: 'department.project',\n      });\n      this.ctx.success();\n    }\n\n  }\n  return StatsController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class StatusController extends app.Controller {\n\n    async status() {\n\n      // name\n      const name = '__test_enable';\n\n      // get\n      let value = await this.ctx.bean.status.get(name);\n      assert.equal(value, undefined);\n\n      // set\n      await this.ctx.bean.status.set(name, true);\n\n      // get\n      value = await this.ctx.bean.status.get(name);\n      assert.equal(value, true);\n\n      // other module's status\n      const moduleStatus = this.ctx.bean.status.module(this.ctx.module.info.relativeName);\n      value = await moduleStatus.get(name);\n      assert.equal(value, true);\n\n      // set\n      await this.ctx.bean.status.set(name, false);\n\n      // get\n      value = await this.ctx.bean.status.get(name);\n      assert.equal(value, false);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n  return StatusController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class TagController extends app.Controller {\n\n    async tag() {\n\n      // atomClass\n      const atomClass = {\n        module: 'test-party',\n        atomClassName: 'party',\n      };\n\n      // add\n      const tagId = await this.ctx.bean.tag.add({\n        atomClass,\n        data: {\n          language: 'en-us',\n          tagName: 'tagOne',\n        },\n      });\n      assert(tagId > 0);\n\n      // parseTags: 'tagOne,tagTwo,tagThree'\n      const tagIds = await this.ctx.bean.tag.parseTags({\n        atomClass,\n        language: 'en-us',\n        tagName: 'tagOne,tagTwo,tagThree',\n        force: true,\n      });\n      assert.equal(tagIds.length, 3);\n\n      // ok\n      this.ctx.success();\n    }\n\n  }\n\n  return TagController;\n\n};\n","module.exports = app => {\n\n  class ValidationController extends app.Controller {\n\n    async success() {\n      this.ctx.success();\n    }\n\n    async fail() {\n      this.ctx.success();\n    }\n\n    async schema() {\n      this.ctx.success();\n    }\n\n  }\n\n  return ValidationController;\n};\n\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class MonkeyeeController extends app.Controller {\n\n    async test() {\n      this.ctx.success(moduleInfo.relativeName);\n    }\n\n  }\n\n  return MonkeyeeController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class AllController extends app.Controller {\n\n    async all() {\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      const userTom = { id: userIds.Tom };\n\n      // function all: including widgets\n      const resourceStaticsAll = this.ctx.module.main.meta.base.statics['a-base.resource'].items;\n      const resourceCount = resourceStaticsAll.length;\n\n      // Tom list all\n      let list = await this.ctx.bean.resource.select({\n        options: {\n          where: { 'a.atomStaticKey': {\n            op: 'likeRight', val: 'test-party:',\n          } },\n          orders: [[ 'a.id', 'asc' ]],\n          page: { index: 0, size: 0 },\n          locale: 'en-us',\n        },\n        user: userTom,\n      });\n      assert.equal(list.length, resourceCount - 2);\n      assert.equal(!!list[0].atomNameLocale, true);\n\n      // hold first\n      const resource_one = list[0];\n\n      // check\n      list = await this.ctx.bean.resource.check({\n        atomStaticKeys: [ resource_one.atomStaticKey ],\n        user: userTom,\n      });\n      assert.equal(list[0].passed, true);\n\n      // read\n      const item = await this.ctx.bean.resource.read({\n        key: { atomId: resource_one.atomId },\n        options: { locale: 'en-us' },\n        user: userTom,\n      });\n      assert.equal(!!item.atomNameLocale, true);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return AllController;\n};\n\n","module.exports = app => {\n\n  class RightController extends app.Controller {\n\n    async checkRightResourceUser() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._resource);\n    }\n\n  }\n\n  return RightController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class UserRoleController extends app.Controller {\n\n    async userRole() {\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      // roleIds\n      const roleIds = this.ctx.cache.mem.get('roleIds');\n\n      // direct\n      let list = await this.ctx.bean.role.getUserRolesDirect({ userId: userIds.root });\n      assert.equal(list.length, 1);\n      // parent\n      list = await this.ctx.bean.role.getUserRolesParent({ userId: userIds.root });\n      assert.equal(list.length, 3);\n      // expand\n      list = await this.ctx.bean.role.getUserRolesExpand({ userId: userIds.root });\n      assert(list.length > 3);\n\n      // direct\n      let res = await this.ctx.bean.role.userInRoleDirect({\n        userId: userIds.root, roleId: roleIds.superuser,\n      });\n      assert.equal(res, true);\n      // parent\n      res = await this.ctx.bean.role.userInRoleParent({\n        userId: userIds.root, roleId: roleIds.root,\n      });\n      assert.equal(res, true);\n      // expand\n      res = await this.ctx.bean.role.userInRoleExpand({\n        userId: userIds.root, roleId: roleIds.system,\n      });\n      assert.equal(res, true);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return UserRoleController;\n};\n\n","const party = require('./controller/party.js');\nconst testAtomStarLabel = require('./controller/test/atom/starLabel.js');\nconst testAtomAll = require('./controller/test/atom/all.js');\nconst testAtomRight = require('./controller/test/atom/right.js');\nconst testResourceRight = require('./controller/test/resource/right.js');\nconst testResourceAll = require('./controller/test/resource/all.js');\nconst testCtxPerformAction = require('./controller/test/ctx/performAction.js');\nconst testCtxTransaction = require('./controller/test/ctx/transaction.js');\nconst testCtxTail = require('./controller/test/ctx/tail.js');\nconst testCtxSession = require('./controller/test/ctx/session.js');\nconst testCtxRequest = require('./controller/test/ctx/request.js');\nconst testCtxResponse = require('./controller/test/ctx/response.js');\nconst testCtxConfig = require('./controller/test/ctx/config.js');\nconst testCtxLocale = require('./controller/test/ctx/locale.js');\nconst testCacheMem = require('./controller/test/cache/mem.js');\nconst testCacheDb = require('./controller/test/cache/db.js');\nconst testCacheRedis = require('./controller/test/cache/redis.js');\nconst testRoleUserRole = require('./controller/test/role/userRole.js');\nconst testEventHello = require('./controller/test/event/hello.js');\nconst testFeatBean = require('./controller/test/feat/bean.js');\nconst testFeatHttpLog = require('./controller/test/feat/httpLog.js');\nconst testFeatSendMail = require('./controller/test/feat/sendMail.js');\nconst testFeatSocketIO = require('./controller/test/feat/socketio.js');\nconst testFeatInstance = require('./controller/test/feat/instance.js');\nconst testFeatProgress = require('./controller/test/feat/progress.js');\nconst testFeatSequence = require('./controller/test/feat/sequence.js');\nconst testFeatSettings = require('./controller/test/feat/settings.js');\nconst testFeatStats = require('./controller/test/feat/stats.js');\nconst testFeatStatus = require('./controller/test/feat/status.js');\nconst testFeatValidation = require('./controller/test/feat/validation.js');\nconst testFeatMiddleware = require('./controller/test/feat/middleware.js');\nconst testFeatQueue = require('./controller/test/feat/queue.js');\nconst testFeatBroadcast = require('./controller/test/feat/broadcast.js');\nconst testFeatModel = require('./controller/test/feat/model.js');\nconst testFeatCategory = require('./controller/test/feat/category.js');\nconst testFeatTag = require('./controller/test/feat/tag.js');\nconst testMonkeyee = require('./controller/test/monkey/monkeyee.js');\nconst testKitchensinkAutocomplete = require('./controller/kitchen-sink/autocomplete.js');\nconst testKitchensinkGuide = require('./controller/kitchen-sink/guide.js');\nconst testKitchensinkFormSchemaValidation = require('./controller/kitchen-sink/form-schema-validation.js');\nconst testKitchensinkPtrIsLoadMore = require('./controller/kitchen-sink/ptr-is-loadmore.js');\n\nmodule.exports = app => {\n  const controllers = {\n    party,\n    testAtomStarLabel,\n    testAtomAll,\n    testAtomRight,\n    testResourceRight,\n    testResourceAll,\n    testCtxPerformAction,\n    testCtxTransaction,\n    testCtxTail,\n    testCtxSession,\n    testCtxRequest,\n    testCtxResponse,\n    testCtxConfig,\n    testCtxLocale,\n    testCacheMem,\n    testCacheDb,\n    testCacheRedis,\n    testRoleUserRole,\n    testEventHello,\n    testFeatBean,\n    testFeatHttpLog,\n    testFeatSendMail,\n    testFeatSocketIO,\n    testFeatInstance,\n    testFeatProgress,\n    testFeatSequence,\n    testFeatSettings,\n    testFeatStats,\n    testFeatStatus,\n    testFeatValidation,\n    testFeatMiddleware,\n    testFeatQueue,\n    testFeatBroadcast,\n    testFeatModel,\n    testFeatCategory,\n    testFeatTag,\n    testMonkeyee,\n    testKitchensinkAutocomplete,\n    testKitchensinkGuide,\n    testKitchensinkFormSchemaValidation,\n    testKitchensinkPtrIsLoadMore,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\nmodule.exports = app => {\n\n  // aops\n  const aops = require('./aops.js')(app);\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    aops,\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const meta = {\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    // schemas\n    const schemas = require('./config/validation/schemas.js')(app);\n    // keywords\n    const keywords = require('./config/validation/keywords.js')(app);\n    // socketio\n    const socketioTest = require('./config/socketio/test.js')(app);\n    // static\n    const staticDashboards = require('./config/static/dashboards.js')(app);\n    const staticResources = require('./config/static/resources.js')(app);\n    // meta\n    extend(true, meta, {\n      base: {\n        atoms: {\n          party: {\n            info: {\n              bean: 'party',\n              title: 'Party',\n              tableName: 'testParty',\n              tableNameModes: {\n                default: 'testPartyView',\n              },\n              language: false,\n              category: true,\n              tag: true,\n            },\n            actions: {\n              partyOver: {\n                code: 101,\n                title: 'PartyOver',\n                actionModule: moduleInfo.relativeName,\n                actionComponent: 'action',\n                icon: { material: 'check_circle_outline' },\n                enableOnOpened: true,\n                stage: 'archive',\n              },\n              partyOverBulk: {\n                code: 201,\n                title: 'PartyOver',\n                actionModule: moduleInfo.relativeName,\n                actionComponent: 'action',\n                icon: { material: 'check_circle_outline' },\n                bulk: true,\n                select: true,\n              },\n            },\n            validator: 'party',\n            search: {\n              validator: 'partySearch',\n            },\n          },\n        },\n        statics: {\n          'a-dashboard.dashboard': {\n            items: staticDashboards,\n          },\n          'a-base.resource': {\n            items: staticResources,\n          },\n        },\n      },\n      validation: {\n        validators: {\n          party: {\n            schemas: 'party',\n          },\n          partySearch: {\n            schemas: 'partySearch',\n          },\n          userTest: {\n            schemas: 'settingsUser,settingsUserExtra',\n          },\n          instanceTest: {\n            schemas: 'settingsInstance',\n          },\n          formTest: {\n            schemas: 'formTest',\n          },\n          formCaptchaTest: {\n            schemas: 'formCaptchaTest',\n          },\n          formMobileVerifyTest: {\n            schemas: 'formMobileVerifyTest',\n          },\n        },\n        keywords: {\n          'x-languages': keywords.languages,\n        },\n        schemas: {\n          party: schemas.party,\n          partySearch: schemas.partySearch,\n          settingsUser: schemas.settingsUser,\n          settingsUserExtra: schemas.settingsUserExtra,\n          settingsInstance: schemas.settingsInstance,\n          formTest: schemas.formTest,\n          formCaptchaTest: schemas.formCaptchaTest,\n          formMobileVerifyTest: schemas.formMobileVerifyTest,\n        },\n      },\n      settings: {\n        user: {\n          validator: 'userTest',\n        },\n        instance: {\n          validator: 'instanceTest',\n        },\n      },\n      event: {\n        implementations: {\n          'a-base:loginInfo': 'loginInfoDashboard',\n        },\n      },\n      index: {\n        indexes: {\n          testParty: 'createdAt,updatedAt,atomId,partyTypeId',\n        },\n      },\n      socketio: {\n        messages: {\n          test: socketioTest,\n        },\n      },\n      stats: {\n        providers: {\n          tasksUser: {\n            user: true,\n            bean: 'tasksUser',\n          },\n          tasksInstance: {\n            user: false,\n            bean: 'tasksInstance',\n            dependencies: 'tasksUser',\n          },\n        },\n      },\n    });\n  }\n  if (app.meta.isTest) {\n    // meta\n    extend(true, meta, {\n      base: {\n      },\n      event: {\n        declarations: {\n          hello: 'This is a test for event',\n        },\n        implementations: {\n          'test-party:hello': 'helloEcho',\n          'a-base:userVerify': 'userVerify',\n          'a-base:loginInfo': 'loginInfo',\n        },\n      },\n      sequence: {\n        providers: {\n          test: {\n            bean: 'test',\n            start: 0,\n          },\n        },\n      },\n    });\n  }\n  return meta;\n};\n","module.exports = app => {\n\n  class Party extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testParty', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return Party;\n};\n","module.exports = app => {\n\n  class PartyType extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testPartyType', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return PartyType;\n};\n","const party = require('./model/party.js');\nconst partyType = require('./model/partyType.js');\n\nmodule.exports = app => {\n  const models = {\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    Object.assign(models, {\n      party,\n      partyType,\n    });\n  }\n  return models;\n};\n","module.exports = app => {\n  let routes = [\n  ];\n  if (app.meta.isTest || app.meta.isLocal) {\n    routes = routes.concat([\n      // atom: party\n      { method: 'post', path: 'party/types', controller: 'party' },\n      { method: 'post', path: 'party/over', controller: 'party' },\n      { method: 'post', path: 'party/over', controller: 'party', middlewares: 'transaction',\n        meta: { right: { type: 'atom', action: 101 } },\n      },\n      { method: 'post', path: 'party/overBulk', controller: 'party', middlewares: 'transaction',\n        meta: { right: { type: 'atom', action: 201 } },\n      },\n\n      // test/atom/starLabel\n      { method: 'post', path: 'test/atom/starLabel', controller: 'testAtomStarLabel', middlewares: 'test' },\n      // test/atom/all\n      { method: 'post', path: 'test/atom/all', controller: 'testAtomAll', middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/atom/right(checked by middleware)\n      { method: 'post', path: 'test/atom/checkRightCreate', controller: 'testAtomRight', middlewares: 'test',\n        meta: { right: { type: 'atom', action: 1 } },\n      },\n      { method: 'post', path: 'test/atom/checkRightRead', controller: 'testAtomRight', middlewares: 'test',\n        meta: { right: { type: 'atom', action: 2 } },\n      },\n      { method: 'post', path: 'test/atom/checkRightWrite', controller: 'testAtomRight', middlewares: 'test',\n        meta: { right: { type: 'atom', action: 3 } },\n      },\n      { method: 'post', path: 'test/atom/checkRightAction', controller: 'testAtomRight', middlewares: 'test',\n        meta: { right: { type: 'atom', action: 101 } },\n      },\n\n      // test/resource/right\n      { method: 'post', path: 'test/resource/checkRightResourceUser', controller: 'testResourceRight', middlewares: 'test',\n        meta: { right: { type: 'resource', module: 'test-party', name: 'createParty' } },\n      },\n      // test/resource/all\n      { method: 'post', path: 'test/resource/all', controller: 'testResourceAll', middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/role/userRole\n      { method: 'post', path: 'test/role/userRole', controller: 'testRoleUserRole', middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/ctx/performAction\n      { method: 'post', path: 'test/ctx/performAction', controller: 'testCtxPerformAction', middlewares: 'test' },\n      { method: 'post', path: 'test/ctx/performAction/echo', controller: 'testCtxPerformAction', middlewares: 'test' },\n      // test/ctx/transaction\n      { method: 'post', path: 'test/ctx/transaction', controller: 'testCtxTransaction', middlewares: 'test,transaction' },\n      // test/ctx/tail\n      { method: 'post', path: 'test/ctx/tail', controller: 'testCtxTail', middlewares: 'test' },\n      // test/ctx/session\n      { method: 'post', path: 'test/ctx/session', controller: 'testCtxSession', middlewares: 'test' },\n      { method: 'post', path: 'test/ctx/session/echo1', controller: 'testCtxSession', middlewares: 'test' },\n      { method: 'post', path: 'test/ctx/session/echo2', controller: 'testCtxSession', middlewares: 'test' },\n      // test/ctx/request\n      { method: 'post', path: 'test/ctx/request/:id', controller: 'testCtxRequest', action: 'request', middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/requestXML', controller: 'testCtxRequest', middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/ctx/response\n      { method: 'post', path: 'test/ctx/response/success', controller: 'testCtxResponse', middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/response/successMore', controller: 'testCtxResponse', middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/response/fail', controller: 'testCtxResponse', middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/response/throwError', controller: 'testCtxResponse', middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/ctx/config\n      { method: 'post', path: 'test/ctx/config/test', controller: 'testCtxConfig', middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/ctx/locale\n      { method: 'post', path: 'test/ctx/locale/enus', controller: 'testCtxLocale', middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/locale/zhcn', controller: 'testCtxLocale', middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/event/hello\n      { method: 'post', path: 'test/event/hello', controller: 'testEventHello', middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/cache\n      { method: 'post', path: 'test/cache/mem', controller: 'testCacheMem', middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/cache/db', controller: 'testCacheDb', middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/cache/redis', controller: 'testCacheRedis', middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/bean\n      { method: 'get', path: 'test/feat/bean', controller: 'testFeatBean', /* middlewares: 'test',*/ meta: { auth: { enable: false } } },\n\n      // test/feat/httpLog\n      { method: 'post', path: 'test/feat/httpLog', controller: 'testFeatHttpLog', middlewares: 'test,httpLog', meta: { auth: { enable: false } } },\n\n      // test/feat/sendMail\n      { method: 'post', path: 'test/feat/sendMail', controller: 'testFeatSendMail', meta: { auth: { enable: false } } },\n\n      // test/feat/socketio\n      { method: 'post', path: 'test/feat/socketio/publish', controller: 'testFeatSocketIO', middlewares: '', meta: { auth: { user: true } } },\n\n      // test/feat/instance\n      { method: 'post', path: 'test/feat/instance', controller: 'testFeatInstance', middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/progress\n      { method: 'post', path: 'test/feat/progress', controller: 'testFeatProgress' },\n\n      // test/feat/sequence\n      { method: 'post', path: 'test/feat/sequence', controller: 'testFeatSequence', middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/settings\n      { method: 'post', path: 'test/feat/settings', controller: 'testFeatSettings', middlewares: 'test' },\n\n      // test/feat/stats\n      { method: 'post', path: 'test/feat/stats', controller: 'testFeatStats', middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/feat/stats/plus', controller: 'testFeatStats' },\n\n      // test/feat/status\n      { method: 'post', path: 'test/feat/status', controller: 'testFeatStatus', middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/validation\n      { method: 'post', path: 'test/feat/validation/success', controller: 'testFeatValidation', middlewares: 'test,validate',\n        meta: { auth: { enable: false }, validate: { validator: 'userTest' } },\n      },\n      { method: 'post', path: 'test/feat/validation/fail', controller: 'testFeatValidation', middlewares: 'test,validate',\n        meta: { auth: { enable: false }, validate: { validator: 'userTest' } },\n      },\n      { method: 'post', path: 'test/feat/validation/schema', controller: 'testFeatValidation', middlewares: 'test,validate',\n        meta: { auth: { enable: false }, validate: { validator: 'userTest', schema: 'settingsUserExtra' } },\n      },\n\n      // test/feat/middleware\n      { method: 'post', path: 'test/feat/middleware/interception', controller: 'testFeatMiddleware', middlewares: 'test,testInterception' },\n      { method: 'post', path: 'test/feat/middleware/restructuring', controller: 'testFeatMiddleware', middlewares: 'test,testInterception,testRestructuring' },\n\n      // test/feat/queue\n      { method: 'post', path: 'test/feat/pushAsync', controller: 'testFeatQueue', middlewares: 'test' },\n      { method: 'post', path: 'test/feat/push', controller: 'testFeatQueue', middlewares: 'test' },\n\n      // test/feat/broadcast\n      { method: 'post', path: 'test/feat/broadcast/emit', controller: 'testFeatBroadcast', middlewares: 'test' },\n\n      // test/feat/model\n      { method: 'post', path: 'test/feat/model', controller: 'testFeatModel', middlewares: 'test' },\n\n      // test/feat/category\n      { method: 'post', path: 'test/feat/category', controller: 'testFeatCategory', middlewares: 'test' },\n\n      // test/feat/tag\n      { method: 'post', path: 'test/feat/tag', controller: 'testFeatTag', middlewares: 'test' },\n\n      // test/monkey/monkeyee\n      { method: 'post', path: 'test/monkey/monkeyee/test', controller: 'testMonkeyee', middlewares: 'test' },\n\n      // kitchen-sink/guide\n      { method: 'post', path: 'kitchen-sink/guide/echo', controller: 'testKitchensinkGuide' },\n      { method: 'post', path: 'kitchen-sink/guide/echo3', controller: 'testKitchensinkGuide' },\n      { method: 'post', path: 'kitchen-sink/guide/echo4', controller: 'testKitchensinkGuide' },\n      { method: 'post', path: 'kitchen-sink/guide/echo6', controller: 'testKitchensinkGuide' },\n      { method: 'post', path: 'kitchen-sink/guide/echo7', controller: 'testKitchensinkGuide' },\n      { method: 'post', path: 'kitchen-sink/guide/echo8', controller: 'testKitchensinkGuide', middlewares: 'transaction' },\n      { method: 'post', path: 'kitchen-sink/guide/echo9', controller: 'testKitchensinkGuide',\n        meta: {\n          right: { type: 'resource', name: 'kitchenSink' },\n        },\n      },\n\n      // kitchen-sink/autocomplete\n      { method: 'get', path: 'kitchen-sink/autocomplete/languages/:query', controller: 'testKitchensinkAutocomplete', action: 'languages', meta: { auth: { enable: false } } },\n      // kitchen-sink/form-schema-validation\n      { method: 'get', path: 'kitchen-sink/form-schema-validation/load', controller: 'testKitchensinkFormSchemaValidation' },\n      { method: 'post', path: 'kitchen-sink/form-schema-validation/saveSimple', controller: 'testKitchensinkFormSchemaValidation' },\n      { method: 'post', path: 'kitchen-sink/form-schema-validation/saveValidation', controller: 'testKitchensinkFormSchemaValidation', middlewares: 'validate',\n        meta: { validate: { validator: 'formTest' } },\n      },\n      { method: 'post', path: 'kitchen-sink/form-captcha/signup', controller: 'testKitchensinkFormSchemaValidation', middlewares: 'captchaVerify,validate',\n        meta: {\n          captchaVerify: { scene: { name: 'formCaptchaTest' } },\n          validate: { validator: 'formCaptchaTest' },\n        },\n      },\n      { method: 'post', path: 'kitchen-sink/form-mobile-verify/mobileVerify', controller: 'testKitchensinkFormSchemaValidation', middlewares: 'captchaVerify,validate',\n        meta: {\n          captchaVerify: { scene: { name: 'formMobileVerifyTest' } },\n          validate: { validator: 'formMobileVerifyTest' },\n        },\n      },\n      // kitchen-sink/ptr-is-loadmore\n      { method: 'post', path: 'kitchen-sink/ptr-is-loadmore/list', controller: 'testKitchensinkPtrIsLoadMore' },\n\n    ]);\n  }\n  return routes;\n};\n","module.exports = app => {\n\n  class Party extends app.Service {\n\n    async types() {\n      const items = await this.ctx.model.partyType.select();\n      return items.map(item => {\n        return {\n          id: item.id,\n          name: this.ctx.text(item.name),\n        };\n      });\n    }\n\n    async over({ key, user }) {\n      await this.ctx.model.party.update({\n        id: key.itemId,\n        partyOver: 1,\n      });\n    }\n\n    async overBulk({ keys, user }) {\n      const resKeys = [];\n      for (const key of keys) {\n        const res = await this._overBulk_item({ key, user });\n        if (res) {\n          resKeys.push(key);\n        }\n      }\n      return { keys: resKeys };\n    }\n\n    async _overBulk_item({ key, user }) {\n      // check right\n      const res = await this.ctx.bean.atom.checkRightAction({\n        atom: { id: key.atomId }, action: 101, user,\n      });\n      if (!res) return false;\n      // over\n      await this.over({ key, user });\n      // ok\n      return true;\n    }\n\n  }\n\n  return Party;\n};\n","const party = require('./service/party.js');\n\nmodule.exports = app => {\n  const services = {\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    Object.assign(services, {\n      party,\n    });\n  }\n  return services;\n};\n","module.exports = require(\"require3\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(9421);\n"],"sourceRoot":""}