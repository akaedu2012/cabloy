{"version":3,"sources":["webpack://egg-born-module-a-authsimple/../node_modules/passport-strategy/lib/index.js","webpack://egg-born-module-a-authsimple/../node_modules/passport-strategy/lib/strategy.js","webpack://egg-born-module-a-authsimple/../node_modules/password-hash-and-salt/index.js","webpack://egg-born-module-a-authsimple/../node_modules/password-hash-and-salt/lib/hashsalt.js","webpack://egg-born-module-a-authsimple/./backend/src/bean/event.accountMigration.js","webpack://egg-born-module-a-authsimple/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-authsimple/./backend/src/beans.js","webpack://egg-born-module-a-authsimple/./backend/src/config/config.js","webpack://egg-born-module-a-authsimple/./backend/src/config/errors.js","webpack://egg-born-module-a-authsimple/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-authsimple/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-authsimple/./backend/src/config/locales.js","webpack://egg-born-module-a-authsimple/./backend/src/config/passport/auth.js","webpack://egg-born-module-a-authsimple/./backend/src/config/passport/strategy.js","webpack://egg-born-module-a-authsimple/./backend/src/config/validation/keywords.js","webpack://egg-born-module-a-authsimple/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-authsimple/./backend/src/controller/auth.js","webpack://egg-born-module-a-authsimple/./backend/src/controllers.js","webpack://egg-born-module-a-authsimple/./backend/src/main.js","webpack://egg-born-module-a-authsimple/./backend/src/meta.js","webpack://egg-born-module-a-authsimple/./backend/src/model/authSimple.js","webpack://egg-born-module-a-authsimple/./backend/src/models.js","webpack://egg-born-module-a-authsimple/./backend/src/routes.js","webpack://egg-born-module-a-authsimple/./backend/src/service/auth.js","webpack://egg-born-module-a-authsimple/./backend/src/services.js","webpack://egg-born-module-a-authsimple/external \"crypto\"","webpack://egg-born-module-a-authsimple/external \"require3\"","webpack://egg-born-module-a-authsimple/external \"util\"","webpack://egg-born-module-a-authsimple/webpack/bootstrap","webpack://egg-born-module-a-authsimple/webpack/startup"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,eAAe,mBAAO,CAAC,GAAY;;;AAGnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;;;;;;;;ACdhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;;;;AC3Ba;;AAEb,yCAA6C,C;;;;;;;;ACFhC;;AAEb,aAAa,mBAAO,CAAC,GAAQ;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,E;AACL,IAAI;AACJ;AACA,I;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,+C;AACA,IAAI,E;AACJ;AACA;AACA;;;AAGA;;;;;;;;AClEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oDAAoD,0BAA0B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC5BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mDAAmD,mBAAmB;AACtE;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;;;;;;ACxCA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,8BAA8B,mBAAO,CAAC,GAAkC;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,KAAK;AACL;;AAEA;AACA;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA,KAAK,UAAU;;AAEf;;AAEA,EAAE;;AAEF;AACA,EAAE,UAAU;AACZ;;AAEA;AACA;AACA,wDAAwD,UAAU;AAClE;AACA;AACA;AACA,KAAK,UAAU;;AAEf;;AAEA,EAAE;;AAEF;AACA,EAAE,UAAU;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzCA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA,KAAK,UAAU;;AAEf;;AAEA,EAAE;;AAEF;AACA,EAAE,UAAU;AACZ;;AAEA;AACA;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA,KAAK,UAAU;;AAEf;;AAEA,EAAE;;AAEF;AACA,EAAE,UAAU;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClDA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA,iBAAiB,mBAAO,CAAC,GAAe;AACxC;AACA;AACA;AACA;AACA,WAAW,6BAA6B;AACxC;AACA,wCAAwC,uCAAuC;AAC/E;AACA,6CAA6C,4CAA4C;AACzF;AACA;AACA;AACA;AACA,sDAAsD,4BAA4B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB,WAAW,EAAE;AAC5C,aAAa;AACb;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;ACpDA,iBAAiB,mBAAO,CAAC,GAAmB;AAC5C,aAAa,mBAAO,CAAC,GAAM;;AAE3B;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAiE;;AAEjF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wBAAwB;AACtC,gBAAgB,wBAAwB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA,2BAA2B,uEAAuE;AAClG;AACA;AACA;AACA,2BAA2B,0EAA0E;AACrG;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA,2BAA2B,kGAAkG;AAC7H;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yBAAyB;AACzC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yBAAyB;AACzC,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;AC9JA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA,kDAAkD,cAAc;AAChE;AACA;;AAEA;AACA,aAAa,8CAA8C;AAC3D;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,aAAa,2BAA2B;AACxC,8CAA8C,iEAAiE;AAC/G;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,8CAA8C,QAAQ;AACtD;AACA;;AAEA;AACA,aAAa,cAAc;AAC3B;AACA,6CAA6C,qBAAqB;AAClE;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,4CAA4C,yCAAyC;AACrF;AACA;;AAEA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;;;AAGA;AACA;AACA;;;;;;;;ACxDA,aAAa,mBAAO,CAAC,GAAsB;;AAE3C;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA,eAAe,mBAAO,CAAC,GAAa;AACpC,iBAAiB,mBAAO,CAAC,GAAe;AACxC,eAAe,mBAAO,CAAC,GAAa;AACpC,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;AAC3C,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxBA;AACA;AACA,eAAe,mBAAO,CAAC,GAA2B;AAClD;AACA,mBAAmB,mBAAO,CAAC,GAAiC;AAC5D;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;ACjDA;;AAEA;;AAEA;AACA,kBAAkB,iCAAiC,uBAAuB,EAAE;AAC5E;;AAEA;;AAEA;AACA;;;;;;;;ACXA,mBAAmB,mBAAO,CAAC,GAAuB;;AAElD;AACA;AACA;;;;;;;;ACJA;AACA,GAAG;AACH;AACA,sBAAsB,SAAS,iBAAiB,EAAE;AAClD,KAAK;AACL,GAAG;AACH,GAAG;AACH;AACA,sBAAsB,SAAS,iBAAiB,EAAE;AAClD,iBAAiB,sBAAsB;AACvC,KAAK;AACL,GAAG;AACH,GAAG;AACH;AACA,sBAAsB,SAAS,yBAAyB,EAAE;AAC1D,iBAAiB,8BAA8B;AAC/C,KAAK;AACL,GAAG;AACH,GAAG;AACH,WAAW,YAAY,8BAA8B,EAAE;AACvD,GAAG;AACH,GAAG;AACH,WAAW,YAAY,6BAA6B,EAAE;AACtD,GAAG;AACH,GAAG;AACH,WAAW,YAAY,4BAA4B,EAAE;AACrD,GAAG;AACH,GAAG,oEAAoE;;AAEvE;;;;;;;;AC7BA,aAAa,mBAAO,CAAC,GAAM;AAC3B,mBAAmB,mBAAO,CAAC,GAAwB,EAAE;AACrD,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB,qEAAqE;;AAEvF;AACA,sDAAsD,WAAW;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,0DAA0D,qBAAqB;AAC/E;;AAEA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA,8CAA8C,2BAA2B;;AAEzE;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,iBAAiB,uCAAuC;AACxD,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,cAAc;AACd,kBAAkB,wBAAwB;AAC1C;AACA;AACA,uDAAuD,MAAM;AAC7D,eAAe,OAAO;AACtB,OAAO;AACP;AACA;;AAEA,0BAA0B,WAAW;AACrC;AACA;AACA,6CAA6C,WAAW;AACxD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,eAAe,mBAAmB;AAClC;AACA,sDAAsD,WAAW;AACjE;AACA,8CAA8C,2BAA2B;;AAEzE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,8CAA8C,kCAAkC;AAChF;AACA;AACA;AACA;;AAEA,0BAA0B,mCAAmC;AAC7D;AACA,4CAA4C,gCAAgC;AAC5E;AACA;AACA,mCAAmC,sBAAsB;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,0DAA0D,kCAAkC;AAC5F;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA,OAAO;AACP,6CAA6C,wBAAwB;AACrE;AACA;AACA;AACA,OAAO;AACP;;AAEA,yBAAyB,qBAAqB;AAC9C;AACA,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA,iDAAiD,aAAa;AAC9D,oBAAoB;AACpB,uCAAuC,uBAAuB;AAC9D;AACA;AACA;;AAEA,0BAA0B,QAAQ;AAClC;AACA,oDAAoD,QAAQ;AAC5D;AACA;AACA,6FAA6F,MAAM;AACnG;AACA;AACA;AACA;AACA,6DAA6D,oCAAoC;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,yBAAyB,MAAM;AAC/B,SAAS,kBAAkB;AAC3B;AACA;AACA;;AAEA,wBAAwB,cAAc;AACtC;AACA;AACA,eAAe,wCAAwC;AACvD,OAAO;AACP;AACA;AACA,uGAAuG,MAAM;AAC7G;AACA;AACA;AACA;AACA,6DAA6D,oCAAoC;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,wBAAwB,MAAM;AAC9B,SAAS,kBAAkB;AAC3B;AACA;AACA;;AAEA;AACA,6BAA6B,QAAQ;AACrC;AACA,uCAAuC,MAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,OAAO;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gCAAgC;AAC/C,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;;AAEA,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;;AAEA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AClTA,aAAa,mBAAO,CAAC,GAAmB;AACxC;AACA;AACA;;;;;;;;;ACHA,oC;;;;;;;;ACAA,sC;;;;;;;;ACAA,kC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;UCrBA;UACA;UACA;UACA","file":"backend.js","sourcesContent":["/**\n * Module dependencies.\n */\nvar Strategy = require('./strategy');\n\n\n/**\n * Expose `Strategy` directly from package.\n */\nexports = module.exports = Strategy;\n\n/**\n * Export constructors.\n */\nexports.Strategy = Strategy;\n","/**\n * Creates an instance of `Strategy`.\n *\n * @constructor\n * @api public\n */\nfunction Strategy() {\n}\n\n/**\n * Authenticate request.\n *\n * This function must be overridden by subclasses.  In abstract form, it always\n * throws an exception.\n *\n * @param {Object} req The request to authenticate.\n * @param {Object} [options] Strategy-specific options.\n * @api public\n */\nStrategy.prototype.authenticate = function(req, options) {\n  throw new Error('Strategy#authenticate must be overridden by subclass');\n};\n\n\n/**\n * Expose `Strategy`.\n */\nmodule.exports = Strategy;\n","'use strict';\n\nmodule.exports = require('./lib/hashsalt.js');","'use strict';\n\nvar crypto = require('crypto');\n\nvar iterations = 10000;\nvar password = function(password) {\n\treturn {\n\t\thash: function(salt, callback) {\n\t\t\t// Make salt optional\n\t\t\tif(callback === undefined && salt instanceof Function) {\n\t\t\t\tcallback = salt;\n\t\t\t\tsalt = undefined;\n\t\t\t}\n\n\t\t\tif(!password) {\n\t\t\t\treturn callback('No password provided')\n\t\t\t}\n\n\t\t\tif(typeof salt === 'string') {\n\t\t\t\tsalt = new Buffer(salt, 'hex');\n\t\t\t}\n\n\t\t\tvar calcHash = function() {\n\t\t\t\tcrypto.pbkdf2(password, salt, iterations, 64, 'sha1', function(err, key) {\n\t\t\t\t\tif(err)\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\tvar res = 'pbkdf2$' + iterations + \n\t\t\t\t\t\t\t\t'$' + key.toString('hex') + \n\t\t\t\t\t\t\t\t'$' + salt.toString('hex');\n\t\t\t\t\tcallback(null, res);\n\t\t\t\t})\t\t\n\t\t\t};\n\n\t\t\tif(!salt) {\n\t\t\t\tcrypto.randomBytes(64, function(err, gensalt) {\n\t\t\t\t\tif(err)\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\tsalt = gensalt;\n\t\t\t\t\tcalcHash();\n\t\t\t\t});\t\t\n\t\t\t} else {\n\t\t\t\tcalcHash();\n\t\t\t}\t\t\t\n\t\t},\n\n\t\tverifyAgainst: function(hashedPassword, callback) {\n\t\t\tif(!hashedPassword || !password)\n\t\t\t\treturn callback(null, false);\n\n\t\t\tvar key = hashedPassword.split('$');\n\t\t\tif(key.length !== 4 || !key[2] || !key[3])\n\t\t\t\treturn callback('Hash not formatted correctly');\n\n\t\t\tif(key[0] !== 'pbkdf2' || key[1] !== iterations.toString())\n\t\t\t\treturn callback('Wrong algorithm and/or iterations');\n\n\t\t\tthis.hash(key[3], function(error, newHash) {\n\t\t\t\tif(error)\n\t\t\t\t\treturn callback(error);\n\t\t\t\tcallback(null, newHash === hashedPassword);\t\t\t\t\n\t\t\t});\t\n\t\t}\n\t};\n}\n\n\nmodule.exports = password;\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class eventBean {\n\n    async execute(context, next) {\n      const data = context.data;\n      const modelAuthSimple = ctx.model.module(moduleInfo.relativeName).authSimple;\n      // check userIdFrom\n      const authSimple = await modelAuthSimple.get({ userId: data.userIdFrom });\n      if (authSimple) {\n        // delete old record\n        await ctx.model.query(\n          'delete from aAuthSimple where deleted=0 and iid=? and userId=?',\n          [ ctx.instance.id, data.userIdTo ]\n        );\n        // update\n        await ctx.model.query(\n          'update aAuthSimple a set a.userId=? where a.deleted=0 and a.iid=? and a.userId=?',\n          [ data.userIdTo, ctx.instance.id, data.userIdFrom ]\n        );\n      }\n      // next\n      await next();\n    }\n\n  }\n\n  return eventBean;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aStatus\n        const sql = `\n          CREATE TABLE aAuthSimple (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            hash text DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // root\n        const user = await this.ctx.bean.user.get({ userName: 'root' });\n        await this.ctx.service.auth.add({\n          userId: user.id,\n          password: options.password,\n        });\n      }\n    }\n\n    async test() {\n\n    }\n\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst eventAccountMigration = require('./bean/event.accountMigration.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // event\n    'event.accountMigration': {\n      mode: 'ctx',\n      bean: eventAccountMigration,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {\n  };\n\n  // defaultPassword\n  config.defaultPassword = '123456';\n\n  // confirmation\n  config.confirmation = {\n    timeout: 2 * 24 * 60 * 60 * 1000, // 2 days\n  };\n\n  // passwordReset\n  config.passwordReset = {\n    timeout: 30 * 60 * 1000, // 30 minutes\n  };\n\n  // account\n  config.account = {\n    url: {\n      emailConfirm: '/a/authsimple/emailConfirm',\n      passwordChange: '/a/authsimple/passwordChange',\n      passwordForgot: '/a/authsimple/passwordForgot',\n      passwordReset: '/a/authsimple/passwordReset',\n    },\n  };\n\n  // captcha scenes\n  config.captcha = {\n    scenes: {\n      passwordChange: null,\n      signup: null,\n      signin: null, // means using default\n      // signin: {\n      //   module: 'a-captchasimple',\n      //   name: 'captcha',\n      // },\n    },\n  };\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Authentication Failed',\n  1002: 'User is Disabled',\n  1003: 'passwordResetEmailExpired',\n};\n","// confirmationEmail\n//   subject\nconst confirmationEmailSubject = '{{siteName}} Account Confirmation';\n//   body\nconst confirmationEmailBody =\n`\nHi {{userName}},\n\nWelcome to join us. Please click this link to confirm your email:\n\n{{link}}\n\nRegards,\n{{siteName}} Team\n`;\n\n// passwordResetEmail\n//   subject\nconst passwordResetEmailSubject = 'Password Reset for {{siteName}}';\n//   body\nconst passwordResetEmailBody =\n`\nHi {{userName}},\n\nTo reset your password, visit the following address:\n\n{{link}}\n\nRegards,\n{{siteName}} Team\n`;\n\n//\nmodule.exports = {\n  confirmationEmailExpired: 'This email confirmation link has expired',\n  confirmationEmailSucceeded: 'Your email address has been confirmed',\n  confirmationEmailSubject,\n  confirmationEmailBody,\n  passwordResetEmailExpired: 'This password reset link has expired',\n  passwordResetEmailSubject,\n  passwordResetEmailBody,\n};\n","// confirmationEmail\n//   subject\nconst confirmationEmailSubject = '{{siteName}} 账号确认';\n//   body\nconst confirmationEmailBody =\n`\n您好，{{userName}}，\n\n欢迎加入我们。请点击以下链接验证您的邮件：\n\n{{link}}\n\n此致，\n{{siteName}} 团队\n`;\n\n// passwordResetEmail\n//   subject\nconst passwordResetEmailSubject = '{{siteName}}重置密码';\n//   body\nconst passwordResetEmailBody =\n`\n您好，{{userName}}，\n\n请点击以下链接重置密码：\n\n{{link}}\n\n此致，\n{{siteName}} 团队\n`;\n\nmodule.exports = {\n  Close: '关闭',\n  'User/Password': '用户/密码',\n  'Authentication Failed': '认证失败',\n  'User is Disabled': '用户被禁用',\n  'Auth-Simple': '认证-简单',\n  'Reset Password': '重置密码',\n  'Element Exists': '元素已存在',\n  'Cannot Contain __': '不能包含__',\n  'Resend Confirmation Email': '重新发送确认邮件',\n  'Email Address does not Exist': '邮件地址不存在',\n  confirmationEmailExpired: '确认邮件链接已经过期',\n  confirmationEmailSucceeded: '您的邮件地址已经确认',\n  confirmationEmailSubject,\n  confirmationEmailBody,\n  passwordResetEmailExpired: '重置密码链接已经过期',\n  passwordResetEmailSubject,\n  passwordResetEmailBody,\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","const strategy = require('./strategy.js');\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const provider = moduleInfo.name;\n  async function verify(ctx, body) {\n    const { auth, password, rememberMe } = body.data;\n    // validate\n    await ctx.bean.validation.validate({ validator: 'signin', data: body.data });\n    // exists\n    const user = await ctx.bean.user.exists({ userName: auth, email: auth, mobile: auth });\n    if (!user) return ctx.throw(1001);\n    // disabled\n    if (user.disabled) return ctx.throw(1002);\n    // verify\n    const authSimple = await ctx.service.auth.verify({ userId: user.id, password });\n    if (!authSimple) return ctx.throw(1001);\n    return {\n      module: moduleInfo.relativeName,\n      provider,\n      profileId: authSimple.id,\n      maxAge: rememberMe ? null : 0,\n      authShouldExists: true,\n      profile: {\n        authSimpleId: authSimple.id,\n        rememberMe,\n      },\n    };\n  }\n  return {\n    providers: {\n      [provider]: {\n        meta: {\n          title: 'User/Password',\n          inline: true,\n          mode: 'direct',\n          component: 'signin',\n        },\n        config: {\n        },\n        handler: app => {\n          return {\n            strategy,\n            callback: (req, body, done) => {\n              verify(req.ctx, body).then(user => {\n                app.passport.doVerify(req, user, done);\n              }).catch(err => { done(err); });\n            },\n          };\n        },\n      },\n    },\n  };\n};\n","const passport = require('passport-strategy');\nconst util = require('util');\n\nfunction Strategy(options, verify) {\n  if (typeof options === 'function') {\n    verify = options;\n    options = {};\n  }\n  if (!verify) { throw new TypeError('LocalStrategy requires a verify callback'); }\n\n  passport.Strategy.call(this);\n  this.name = 'simple';\n  this._verify = verify;\n  this._passReqToCallback = options.passReqToCallback;\n}\n\n/**\n * Inherit from `passport.Strategy`.\n */\nutil.inherits(Strategy, passport.Strategy);\n\nStrategy.prototype.authenticate = function(req) {\n  // self\n  const self = this;\n\n  // check\n  if (req.method === 'GET') {\n    // not allow\n    return self.error(req.ctx.parseFail(403));\n  }\n\n  // verified\n  function verified(err, user, info) {\n    if (err) { return self.error(err); }\n    if (!user) { return self.fail(info); }\n    req.ctx.success(user);\n    self.success(user, info);\n  }\n\n  try {\n    if (self._passReqToCallback) {\n      this._verify(req, req.body, verified);\n    } else {\n      this._verify(req.body, verified);\n    }\n  } catch (ex) {\n    return self.error(ex);\n  }\n};\n\nmodule.exports = Strategy;\n","module.exports = app => {\n  const keywords = {};\n  keywords.exists = {\n    async: true,\n    type: 'string',\n    errors: true,\n    compile() {\n      return async function(data, path, rootData, name) {\n        const ctx = this;\n        const res = await ctx.bean.user.exists({ [name]: data });\n        if (res && res.id !== ctx.state.user.agent.id) {\n          const errors = [{ keyword: 'x-exists', params: [], message: ctx.text('Element Exists') }];\n          throw new app.meta.ajv.ValidationError(errors);\n        }\n        if (!res && data.indexOf('__') > -1) {\n          const errors = [{ keyword: 'x-exists', params: [], message: ctx.text('Cannot Contain __') }];\n          throw new app.meta.ajv.ValidationError(errors);\n        }\n        return true;\n      };\n    },\n  };\n  keywords.passwordForgotEmail = {\n    async: true,\n    type: 'string',\n    errors: true,\n    compile() {\n      return async function(data, path, rootData, name) {\n        const ctx = this;\n        const res = await ctx.bean.user.exists({ [name]: data });\n        if (!res) {\n          const errors = [{ keyword: 'x-passwordForgotEmail', params: [], message: ctx.text('Email Address does not Exist') }];\n          throw new app.meta.ajv.ValidationError(errors);\n        }\n        return true;\n      };\n    },\n  };\n  return keywords;\n};\n","module.exports = app => {\n  const schemas = {};\n  schemas.signup = {\n    type: 'object',\n    properties: {\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        notEmpty: true,\n        'x-exists': true,\n      },\n      realName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Realname',\n        notEmpty: true,\n      },\n      email: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Email',\n        notEmpty: true,\n        format: 'email',\n        'x-exists': true,\n      },\n      // mobile: {\n      //   type: 'string',\n      //   ebType: 'text',\n      //   ebTitle: 'Mobile',\n      //   notEmpty: true,\n      //   'x-exists': true,\n      // },\n      password: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Password',\n        ebSecure: true,\n        notEmpty: true,\n        minLength: 6,\n      },\n      passwordAgain: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Password Again',\n        ebSecure: true,\n        notEmpty: true,\n        const: { $data: '1/password' },\n      },\n    },\n  };\n  schemas.signin = {\n    type: 'object',\n    properties: {\n      auth: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Your Username/Mobile/Email',\n        notEmpty: true,\n      },\n      password: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Your Password',\n        ebSecure: true,\n        notEmpty: true,\n        minLength: 6,\n      },\n      rememberMe: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Remember Me',\n      },\n    },\n  };\n  schemas.passwordChange = {\n    type: 'object',\n    properties: {\n      passwordOld: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Old Password',\n        ebSecure: true,\n        notEmpty: true,\n        minLength: 6,\n      },\n      passwordNew: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'New Password',\n        ebSecure: true,\n        notEmpty: true,\n        minLength: 6,\n      },\n      passwordNewAgain: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'New Password Again',\n        ebSecure: true,\n        notEmpty: true,\n        const: { $data: '1/passwordNew' },\n      },\n    },\n  };\n  schemas.emailConfirm = {\n    type: 'object',\n    properties: {\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        ebReadOnly: true,\n      },\n      email: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Email',\n        notEmpty: true,\n        format: 'email',\n        'x-exists': true,\n      },\n    },\n  };\n  schemas.passwordForgot = {\n    type: 'object',\n    properties: {\n      email: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Email',\n        notEmpty: true,\n        format: 'email',\n        'x-passwordForgotEmail': true,\n      },\n    },\n  };\n  schemas.passwordReset = {\n    type: 'object',\n    properties: {\n      passwordNew: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'New Password',\n        ebSecure: true,\n        notEmpty: true,\n        minLength: 6,\n      },\n      passwordNewAgain: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'New Password Again',\n        ebSecure: true,\n        notEmpty: true,\n        const: { $data: '1/passwordNew' },\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  class AuthController extends app.Controller {\n\n    async signin() {\n      // data: { auth, password, rememberMe }\n      const data = this.ctx.request.body.data;\n      const state = this.ctx.request.body.state;\n      const res = await this.service.auth.signin({ data, state });\n      this.ctx.success(res);\n    }\n\n    async signup() {\n      const { userName, realName, email, mobile, password } = this.ctx.request.body.data;\n      const state = this.ctx.request.body.state;\n      const res = await this.service.auth.signup({\n        user: this.ctx.state.user.agent,\n        state,\n        userName, realName, email, mobile, password,\n      });\n      this.ctx.success(res);\n    }\n\n    async passwordChange() {\n      const { passwordOld, passwordNew } = this.ctx.request.body.data;\n      await this.service.auth.passwordChange({ passwordOld, passwordNew, userId: this.ctx.state.user.agent.id });\n      this.ctx.success();\n    }\n\n    async passwordForgot() {\n      const { email } = this.ctx.request.body.data;\n      await this.service.auth.passwordForgot({ email });\n      this.ctx.success();\n    }\n\n    async passwordReset() {\n      const { passwordNew } = this.ctx.request.body.data;\n      const token = this.ctx.request.body.token;\n      await this.service.auth.passwordReset({ passwordNew, token });\n      this.ctx.success();\n    }\n\n    async emailConfirm() {\n      const { email } = this.ctx.request.body.data;\n      await this.service.auth.emailConfirm({ email, user: this.ctx.state.user.agent });\n      this.ctx.success();\n    }\n\n    async emailConfirmation() {\n      const token = this.ctx.request.query.token;\n      await this.service.auth.emailConfirmation({ token });\n      // this.ctx.success();\n    }\n\n\n  }\n  return AuthController;\n};\n","const auth = require('./controller/auth.js');\n\nmodule.exports = app => {\n  const controllers = {\n    auth,\n  };\n  return controllers;\n};\n","const routes = require('./routes.js');\nconst services = require('./services.js');\nconst models = require('./models.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst metaFn = require('./meta.js');\n\nmodule.exports = app => {\n  // beans\n  const beans = require('./beans.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta: metaFn(app),\n  };\n};\n","module.exports = app => {\n  // auth\n  const auth = require('./config/passport/auth.js')(app);\n  // keywords\n  const keywords = require('./config/validation/keywords.js')(app);\n  // schemas\n  const schemas = require('./config/validation/schemas.js')(app);\n  return {\n    auth,\n    validation: {\n      validators: {\n        signup: {\n          schemas: 'signup',\n        },\n        signin: {\n          schemas: 'signin',\n        },\n        passwordChange: {\n          schemas: 'passwordChange',\n        },\n        passwordForgot: {\n          schemas: 'passwordForgot',\n        },\n        passwordReset: {\n          schemas: 'passwordReset',\n        },\n        emailConfirm: {\n          schemas: 'emailConfirm',\n        },\n      },\n      keywords: {\n        'x-exists': keywords.exists,\n        'x-passwordForgotEmail': keywords.passwordForgotEmail,\n      },\n      schemas: {\n        signup: schemas.signup,\n        signin: schemas.signin,\n        passwordChange: schemas.passwordChange,\n        passwordForgot: schemas.passwordForgot,\n        passwordReset: schemas.passwordReset,\n        emailConfirm: schemas.emailConfirm,\n      },\n    },\n    event: {\n      implementations: {\n        'a-base:accountMigration': 'accountMigration',\n      },\n    },\n  };\n};\n","module.exports = app => {\n\n  class AuthSimple extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aAuthSimple', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return AuthSimple;\n};\n","const authSimple = require('./model/authSimple.js');\n\nmodule.exports = {\n  authSimple,\n};\n","module.exports = [\n  { method: 'post', path: 'auth/signin', controller: 'auth', middlewares: 'captchaVerify',\n    meta: {\n      captchaVerify: { scene: { name: 'signin' } },\n    },\n  },\n  { method: 'post', path: 'auth/signup', controller: 'auth', middlewares: 'captchaVerify,validate',\n    meta: {\n      captchaVerify: { scene: { name: 'signup' } },\n      validate: { validator: 'signup' },\n    },\n  },\n  { method: 'post', path: 'auth/passwordChange', controller: 'auth', middlewares: 'captchaVerify,validate',\n    meta: {\n      captchaVerify: { scene: { name: 'passwordChange' } },\n      validate: { validator: 'passwordChange' },\n    },\n  },\n  { method: 'post', path: 'auth/passwordForgot', controller: 'auth', middlewares: 'validate',\n    meta: { validate: { validator: 'passwordForgot' } },\n  },\n  { method: 'post', path: 'auth/passwordReset', controller: 'auth', middlewares: 'validate',\n    meta: { validate: { validator: 'passwordReset' } },\n  },\n  { method: 'post', path: 'auth/emailConfirm', controller: 'auth', middlewares: 'validate',\n    meta: { validate: { validator: 'emailConfirm' } },\n  },\n  { method: 'get', path: 'auth/emailConfirmation', controller: 'auth' },\n\n];\n","const util = require('util');\nconst passwordFn = require('password-hash-and-salt'); // should compile\nconst require3 = require('require3');\nconst uuid = require3('uuid');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Auth extends app.Service {\n\n    // mobile: not use\n    async signup({ user, state = 'login', userName, realName, email, mobile, password }) {\n\n      // add authsimple\n      const authSimpleId = await this._addAuthSimple({ password });\n\n      // profileUser\n      const profileUser = {\n        module: moduleInfo.relativeName,\n        provider: 'authsimple',\n        profileId: authSimpleId,\n        maxAge: 0,\n        profile: {\n          authSimpleId,\n          rememberMe: false,\n        },\n      };\n\n      // verify\n      const verifyUser = await this.ctx.bean.user.verify({ state, profileUser });\n      if (!verifyUser) this.ctx.throw(403);\n\n      // userId\n      const userId = verifyUser.agent.id;\n      // remove old records\n      await this.ctx.model.authSimple.delete({ userId });\n      // update userId\n      await this.ctx.model.authSimple.update({ id: authSimpleId, userId });\n\n      // override user's info: userName/realName/email\n      const userNew = { id: userId, realName };\n      if (state === 'login' || !user.userName || user.userName.indexOf('__') > -1) {\n        userNew.userName = userName;\n      }\n      await this.ctx.bean.user.save({\n        user: userNew,\n      });\n      // save email\n      if (email !== verifyUser.agent.email) {\n        await this.ctx.bean.user.setActivated({\n          user: { id: userId, email, emailConfirmed: 0 },\n        });\n      }\n\n      // login now\n      //   always no matter login/associate\n      await this.ctx.login(verifyUser);\n\n      // ok\n      return verifyUser;\n    }\n\n    // data: { auth, password, rememberMe }\n    async signin({ data, state = 'login' }) {\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: `passport/a-authsimple/authsimple?state=${state}`,\n        body: { data },\n      });\n      return res;\n    }\n\n    async _addAuthSimple({ password }) {\n      // hash\n      password = password || this.ctx.config.defaultPassword;\n      const hash = await this._calcPassword({ password });\n      // auth simple\n      const res = await this.ctx.model.authSimple.insert({\n        userId: 0,\n        hash,\n      });\n      return res.insertId;\n    }\n\n    async add({ userId, password }) {\n      // add authsimple\n      const authSimpleId = await this._addAuthSimple({ password });\n      // update userId\n      await this.ctx.model.authSimple.update({ id: authSimpleId, userId });\n\n      // auth\n      const providerItem = await this.ctx.bean.user.getAuthProvider({\n        module: moduleInfo.relativeName,\n        providerName: 'authsimple',\n      });\n      const modelAuth = this.ctx.model.module('a-base').auth;\n      await modelAuth.insert({\n        userId,\n        providerId: providerItem.id,\n        profileId: authSimpleId,\n        profile: JSON.stringify({\n          authSimpleId,\n          rememberMe: false,\n        }),\n      });\n    }\n\n    async verify({ userId, password }) {\n      // check\n      if (!password) return false;\n      // authSimple\n      const authSimple = await this.ctx.model.authSimple.get({\n        userId,\n      });\n      if (!authSimple) return false;\n      // verify\n      const res = await this._verifyPassword({ password, hash: authSimple.hash });\n      if (!res) return false;\n      // ok\n      return authSimple;\n    }\n\n    async passwordChange({ passwordOld, passwordNew, userId }) {\n      // verify old\n      const authSimple = await this.verify({ userId, password: passwordOld });\n      if (!authSimple) this.ctx.throw(403);\n      // save new\n      await this._passwordSaveNew({ passwordNew, userId });\n\n      // profileUser\n      const authSimpleId = authSimple.id;\n      const profileUser = {\n        module: moduleInfo.relativeName,\n        provider: 'authsimple',\n        profileId: authSimpleId,\n        maxAge: 0,\n        profile: {\n          authSimpleId,\n          rememberMe: false,\n        },\n      };\n\n      // verify\n      const verifyUser = await this.ctx.bean.user.verify({ state: 'associate', profileUser });\n      if (!verifyUser) this.ctx.throw(403);\n      // login now\n      //   always no matter login/associate\n      // await this.ctx.login(verifyUser);\n    }\n\n    async _passwordSaveNew({ passwordNew, userId }) {\n      // save new\n      const auth = await this.ctx.model.authSimple.get({\n        userId,\n      });\n      const hash = await this._calcPassword({ password: passwordNew });\n      await this.ctx.model.authSimple.update({\n        id: auth.id,\n        hash,\n      });\n    }\n\n    async passwordReset({ passwordNew, token }) {\n      // token value\n      const cacheKey = `passwordReset:${token}`;\n      const value = await this.ctx.cache.db.get(cacheKey);\n      if (!value) {\n        // expired, send confirmation mail again\n        //  1003: passwordResetEmailExpired\n        this.ctx.throw(1003);\n      }\n      // userId\n      const userId = value.userId;\n\n      // save new\n      await this._passwordSaveNew({ passwordNew, userId });\n      // clear token\n      await this.ctx.cache.db.remove(cacheKey);\n      // login antomatically\n      const user = await this.ctx.bean.user.get({ id: userId });\n      const data = { auth: user.email, password: passwordNew, rememberMe: false };\n      const user2 = await this.signin({ data, state: 'login' });\n      // ok\n      return user2;\n    }\n\n    async passwordForgot({ email }) {\n      // user by email\n      const user = await this.ctx.bean.user.exists({ email });\n      // link\n      const token = uuid.v4().replace(/-/g, '');\n      const link = this.ctx.bean.base.getAbsoluteUrl(`/#!/a/authsimple/passwordReset?token=${token}`);\n      // email scene\n      const scene = (app.meta.isTest || app.meta.isLocal) ? 'test' : 'system';\n      // email subject\n      let subject = this.ctx.text('passwordResetEmailSubject');\n      subject = this.ctx.bean.util.replaceTemplate(subject, { siteName: this.ctx.instance.title });\n      // email body\n      let body = this.ctx.text('passwordResetEmailBody');\n      body = this.ctx.bean.util.replaceTemplate(body, {\n        userName: user.userName,\n        link,\n        siteName: this.ctx.instance.title,\n      });\n      // send\n      await this.ctx.bean.mail.send({\n        scene,\n        message: {\n          to: email,\n          subject,\n          text: body,\n        },\n      });\n      // save\n      await this.ctx.cache.db.set(\n        `passwordReset:${token}`,\n        { userId: user.id },\n        this.ctx.config.passwordReset.timeout\n      );\n    }\n\n    async emailConfirm({ email, user }) {\n      // save email\n      await this.ctx.bean.user.setActivated({\n        user: { id: user.id, email, emailConfirmed: 0 },\n      });\n      // link\n      const token = uuid.v4().replace(/-/g, '');\n      const link = this.ctx.bean.base.getAbsoluteUrl(`/api/a/authsimple/auth/emailConfirmation?token=${token}`);\n      // email scene\n      const scene = (app.meta.isTest || app.meta.isLocal) ? 'test' : 'system';\n      // email subject\n      let subject = this.ctx.text('confirmationEmailSubject');\n      subject = this.ctx.bean.util.replaceTemplate(subject, { siteName: this.ctx.instance.title });\n      // email body\n      let body = this.ctx.text('confirmationEmailBody');\n      body = this.ctx.bean.util.replaceTemplate(body, {\n        userName: user.userName,\n        link,\n        siteName: this.ctx.instance.title,\n      });\n      // send\n      await this.ctx.bean.mail.send({\n        scene,\n        message: {\n          to: email,\n          subject,\n          text: body,\n        },\n      });\n      // save\n      await this.ctx.cache.db.set(\n        `emailConfirm:${token}`,\n        { userId: user.id },\n        this.ctx.config.confirmation.timeout\n      );\n    }\n\n    // invoke by user clicking the link\n    async emailConfirmation({ token }) {\n      // token value\n      const cacheKey = `emailConfirm:${token}`;\n      const value = await this.ctx.cache.db.get(cacheKey);\n      if (!value) {\n        // expired, send confirmation mail again\n        const data = {\n          message: this.ctx.text('confirmationEmailExpired'),\n          link: '/a/authsimple/emailConfirm',\n          linkText: this.ctx.text('Resend Confirmation Email'),\n        };\n        const url = this.ctx.bean.base.getAlertUrl({ data });\n        return this.ctx.redirect(url);\n      }\n      // userId\n      const userId = value.userId;\n      // activated\n      await this.ctx.bean.user.setActivated({\n        user: { id: userId, emailConfirmed: 1 },\n      });\n      // clear token\n      await this.ctx.cache.db.remove(cacheKey);\n      // not: login antomatically\n      // ok\n      const data = {\n        message: this.ctx.text('confirmationEmailSucceeded'),\n        link: '#back',\n        linkText: this.ctx.text('Close'),\n      };\n      const url = this.ctx.bean.base.getAlertUrl({ data });\n      return this.ctx.redirect(url);\n    }\n\n    async _calcPassword({ password }) {\n      const _password = passwordFn(password.toString());\n      const hashFn = util.promisify(_password.hash);\n      return await hashFn.call(_password);\n    }\n\n    async _verifyPassword({ password, hash }) {\n      const _password = passwordFn(password.toString());\n      const verifyFn = util.promisify(_password.verifyAgainst);\n      return await verifyFn.call(_password, hash);\n    }\n\n  }\n\n  return Auth;\n};\n","const auth = require('./service/auth.js');\nmodule.exports = {\n  auth,\n};\n","module.exports = require(\"crypto\");;","module.exports = require(\"require3\");;","module.exports = require(\"util\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(421);\n"],"sourceRoot":""}