{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/external \"require3\"","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/en-us.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/captcha.js","webpack://backend/./backend/src/controller/auth.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/captcha.js","webpack://backend/./backend/src/sms/providers.js","webpack://backend/./backend/src/sms/provider/test.js","webpack://backend/./backend/src/sms/provider/aliyun.js","webpack://backend/./backend/src/service/auth.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/config/passport/auth.js","webpack://backend/./backend/src/config/passport/strategy.js","webpack://backend//Users/yangjian/Documents/data/cabloy/egg-born-demo/node_modules/passport-strategy/lib/index.js","webpack://backend//Users/yangjian/Documents/data/cabloy/egg-born-demo/node_modules/passport-strategy/lib/strategy.js","webpack://backend/external \"util\"","webpack://backend/./backend/src/config/validation/keywords.js","webpack://backend/./backend/src/config/validation/schemas.js"],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,qC;;;;;;ACAA,eAAe,mBAAO,CAAC,CAAoB;AAC3C,gBAAgB,mBAAO,CAAC,CAAqB;AAC7C,eAAe,mBAAO,CAAC,CAAoB;AAC3C,oBAAoB,mBAAO,CAAC,CAAyB;;AAErD;;AAEA;AACA,iBAAiB,mBAAO,CAAC,CAAa;AACtC;AACA,mBAAmB,mBAAO,CAAC,EAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,EAAa;AACtC;AACA,eAAe,mBAAO,CAAC,EAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC3BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;ACnDA;AACA,WAAW,mBAAO,CAAC,CAAmB;AACtC,WAAW,mBAAO,CAAC,CAAmB;AACtC;;;;;;;ACHA;AACA;AACA;AACA;AACA;;;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;AACA,0DAA0D,qBAAqB;AAC/E;;AAEA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,eAAe,wCAAwC;AACvD,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,OAAO;AACP;AACA;;AAEA,wBAAwB,eAAe;AACvC,yBAAyB,mEAAmE;AAC5F;;AAEA;;AAEA;AACA;;;;;;;ACnEA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA,eAAe,mBAAO,CAAC,EAA2B;AAClD;AACA,mBAAmB,mBAAO,CAAC,EAAiC;AAC5D;AACA,kBAAkB,mBAAO,CAAC,EAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;;;;;;AC/BA,iBAAiB,mBAAO,CAAC,EAAe;AACxC;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA,wCAAwC,kCAAkC;AAC1E;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB,WAAW,EAAE;AAC5C,aAAa;AACb;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;AChDA,iBAAiB,mBAAO,CAAC,EAAmB;AAC5C,aAAa,mBAAO,CAAC,EAAM;;AAE3B;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAiE;;AAEjF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI,YAAY,uCAAuC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wBAAwB;AACtC,gBAAgB,wBAAwB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;;;;;;AC3DA;AACA;AACA;AACA,eAAe,mBAAO,CAAC,EAAY;;;AAGnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;;AC3BA,iC;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA,2BAA2B,uEAAuE;AAClG;AACA;AACA;AACA,2BAA2B,0EAA0E;AACrG;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"require3\");","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\n\nmodule.exports = app => {\n\n  // routes\n  const routes = require('./routes.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    meta,\n  };\n\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // account\n  config.account = {\n    url: {\n      mobileVerify: '/a/authsms/mobileVerify',\n    },\n  };\n\n  // captcha scenes\n  // const _captchaSimple = {\n  //   module: 'a-captchasimple',\n  //   name: 'captcha',\n  // };\n  const _captchaSMS = {\n    module: 'a-authsms',\n    name: 'captcha',\n  };\n  config.captcha = {\n    scenes: {\n      mobileVerify: _captchaSMS,\n      signup: _captchaSMS,\n      signin: _captchaSMS,\n      signupCode: null, // _captchaSimple,\n    },\n  };\n\n  // sms provider\n  config.sms = {\n    provider: {\n      default: '',\n    },\n    providers: {\n      aliyun: {\n        accessKeyId: '',\n        secretAccessKey: '',\n        endpoint: 'https://dysmsapi.aliyuncs.com',\n        apiVersion: '2017-05-25',\n        signName: '',\n        templates: {\n          mobileVerify: '',\n          signup: '',\n          signin: '',\n        },\n      },\n    },\n  };\n\n  return config;\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  smsProviderNonePrompt: 'Please specify the sms provider',\n  SMSCodeInvalid: 'Verification code is invalid, please retrieve again',\n  SMSCodeMismatch: 'Mismatch Verification Code',\n};\n","module.exports = {\n  SMS: '短信',\n  smsProviderNonePrompt: '请指定SMS Provider',\n  SMSCodeInvalid: '认证码已失效，请重新获取',\n  SMSCodeMismatch: '认证码不匹配',\n  'Element Exists': '元素已存在',\n  'Cannot Contain __': '不能包含__',\n  'SMS Verification': '短信认证',\n  'Authentication Failed': '认证失败',\n  'User is Disabled': '用户被禁用',\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'smsProviderNonePrompt',\n  1002: 'SMSCodeInvalid',\n  1003: 'SMSCodeMismatch',\n  1004: 'Authentication Failed',\n  1005: 'User is Disabled',\n};\n","module.exports = {\n};\n","const version = require('./controller/version.js');\nconst captcha = require('./controller/captcha.js');\nconst auth = require('./controller/auth.js');\n\nmodule.exports = app => {\n  const routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/test', controller: version, middlewares: 'test' },\n    // captcha\n    { method: 'post', path: 'captcha/sendCode', controller: captcha, middlewares: 'captcha' },\n    { method: 'post', path: 'captcha/verify', controller: captcha, middlewares: 'inner' },\n    // auth\n    { method: 'post', path: 'auth/signin', controller: auth, middlewares: 'captchaVerify',\n      meta: {\n        captchaVerify: { scene: { name: 'signin' } },\n      },\n    },\n    { method: 'post', path: 'auth/signup', controller: auth, middlewares: 'captchaVerify,validate',\n      meta: {\n        captchaVerify: {\n          scenes: [\n            { name: 'signupCode', dataKey: 'captchaCode', fieldKey: 'tokenCode' },\n            { name: 'signup', dataKey: 'captcha', fieldKey: 'token' },\n          ],\n        },\n        validate: { validator: 'signup' },\n      },\n    },\n    { method: 'post', path: 'auth/mobileVerify', controller: auth, middlewares: 'validate,captchaVerify',\n      meta: {\n        validate: { validator: 'mobileVerify' },\n        captchaVerify: { scene: { name: 'mobileVerify' } },\n      },\n    },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async test() {\n      await this.service.version.test(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","module.exports = app => {\n  class CaptchaController extends app.Controller {\n\n    async sendCode() {\n      await this.ctx.service.captcha.sendCode({\n        providerInstanceId: this.ctx.request.body.providerInstanceId,\n        context: this.ctx.request.body.context,\n      });\n      this.ctx.success();\n    }\n\n    async verify() {\n      const { providerInstanceId, context, data, dataInput } = this.ctx.request.body;\n      await this.ctx.service.captcha.verify({ providerInstanceId, context, data, dataInput });\n      this.ctx.success();\n    }\n\n  }\n  return CaptchaController;\n};\n","module.exports = app => {\n  class AuthController extends app.Controller {\n\n    async signin() {\n      const { mobile, rememberMe } = this.ctx.request.body.data;\n      const res = await this.service.auth.signin({ mobile, rememberMe });\n      this.ctx.success(res);\n    }\n\n    async signup() {\n      const { userName, realName, mobile } = this.ctx.request.body.data;\n      const state = this.ctx.request.body.state;\n      const res = await this.service.auth.signup({\n        user: this.ctx.user.agent,\n        state,\n        userName, realName, mobile,\n      });\n      this.ctx.success(res);\n    }\n\n    async mobileVerify() {\n      const { mobile } = this.ctx.request.body.data;\n      const res = await this.service.auth.mobileVerify({\n        user: this.ctx.user.agent,\n        mobile,\n      });\n      this.ctx.success(res);\n    }\n\n\n  }\n  return AuthController;\n};\n","const version = require('./service/version.js');\nconst captcha = require('./service/captcha.js');\nconst auth = require('./service/auth.js');\n\nmodule.exports = app => {\n  const services = {\n    version,\n    captcha,\n    auth,\n  };\n  return services;\n};\n","module.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n    }\n\n    async init(options) {\n    }\n\n    async test() {\n    }\n\n  }\n\n  return Version;\n};\n","const require3 = require('require3');\nconst chalk = require3('chalk');\nconst boxen = require3('boxen');\nconst SMSProviders = require('../sms/providers.js');\n\nconst boxenOptions = { padding: 1, margin: 1, align: 'center', borderColor: 'yellow', borderStyle: 'round' };\n\nmodule.exports = app => {\n\n  class Captcha extends app.Service {\n\n    async sendCode({ providerInstanceId, context }) {\n      // sms provider\n      const { provider, config } = this.__createSMSProvider();\n      // sendCode\n      const data = await provider.sendCode({ providerInstanceId, context, config });\n      // update\n      await this.ctx.meta.captcha.update({\n        providerInstanceId, data, context,\n      });\n    }\n\n    async verify({ providerInstanceId, context, data, dataInput }) {\n      // sms provider\n      const { provider, config } = this.__createSMSProvider();\n      // verify\n      await provider.verify({ providerInstanceId, context, data, dataInput, config });\n    }\n\n    __createSMSProvider() {\n      // providerName\n      let providerName = this.ctx.config.sms.provider.default;\n      if (!providerName && (app.meta.isTest || app.meta.isLocal)) {\n        providerName = 'test';\n      }\n      if (!providerName) {\n        // prompt\n        const message = chalk.keyword('orange')(this.ctx.text('smsProviderNonePrompt'));\n        console.log('\\n' + boxen(message, boxenOptions));\n        this.ctx.throw(1001);\n      }\n      // provider\n      const provider = new (SMSProviders[providerName](this.ctx))();\n      const config = this.ctx.config.sms.providers[providerName];\n      return { provider, config };\n    }\n\n  }\n\n  return Captcha;\n};\n","const test = require('./provider/test.js');\nconst aliyun = require('./provider/aliyun.js');\n\nmodule.exports = {\n  test,\n  aliyun,\n};\n","const require3 = require('require3');\nconst chalk = require3('chalk');\nconst boxen = require3('boxen');\n\nconst boxenOptions = { padding: 1, margin: 1, align: 'center', borderColor: 'yellow', borderStyle: 'round' };\n\nmodule.exports = function(ctx) {\n\n  class Provider {\n\n    async sendCode({ context }) {\n      // token\n      const token = this.__prefix0(parseInt(Math.random() * 10000), 4);\n      // prompt\n      const message = chalk.keyword('cyan')('Test SMS Verification Code To: ')\n                        + chalk.keyword('yellow')(context.mobile)\n                        + chalk.keyword('orange')('\\n' + token);\n      console.log('\\n' + boxen(message, boxenOptions));\n      // ok\n      return { token };\n    }\n\n    async verify({ data, dataInput }) {\n      if (!data) ctx.throw(1002);\n      if (data.token !== dataInput.token) ctx.throw(1003);\n    }\n\n    __prefix0(num, length) {\n      return (Array(length).join('0') + num).slice(-length);\n    }\n\n  }\n\n  return Provider;\n};\n","const require3 = require('require3');\nconst popCore = require3('@alicloud/pop-core');\n\nmodule.exports = function(ctx) {\n\n  class Provider {\n\n    async sendCode({ providerInstanceId, context, config }) {\n      // get\n      const providerInstance = await ctx.meta.captcha.getProviderInstance({ providerInstanceId });\n      if (!providerInstance) ctx.throw(403);\n      // token\n      const token = this.__prefix0(parseInt(Math.random() * 10000), 4);\n      const templateParam = { code: token };\n      // params\n      const params = {\n        PhoneNumbers: context.mobile,\n        SignName: config.signName,\n        TemplateCode: config.templates[providerInstance.sceneName],\n        TemplateParam: JSON.stringify(templateParam),\n      };\n      // send\n      await this.__sendSms({ params, config });\n      // ok\n      return { token };\n    }\n\n    async verify({ data, dataInput }) {\n      if (!data) ctx.throw(1002);\n      if (data.token !== dataInput.token) ctx.throw(1003);\n    }\n\n    async __sendSms({ params, config }) {\n      const client = new popCore.RPCClient({\n        accessKeyId: config.accessKeyId,\n        secretAccessKey: config.secretAccessKey,\n        endpoint: config.endpoint,\n        apiVersion: config.apiVersion,\n      });\n      const requestOption = {\n        method: 'POST',\n      };\n      await client.request('SendSms', params, requestOption);\n    }\n\n    __prefix0(num, length) {\n      return (Array(length).join('0') + num).slice(-length);\n    }\n\n  }\n\n  return Provider;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Auth extends app.Service {\n\n    async signup({ user, state = 'login', userName, realName, mobile }) {\n\n      // profileUser\n      const profileUser = {\n        module: moduleInfo.relativeName,\n        provider: 'authsms',\n        profileId: mobile,\n        maxAge: 0,\n        profile: {\n          mobile,\n          rememberMe: false,\n        },\n      };\n\n      // verify\n      const verifyUser = await this.ctx.meta.user.verify({ state, profileUser });\n      if (!verifyUser) this.ctx.throw(403);\n\n      // userId\n      const userId = verifyUser.agent.id;\n\n      // override user's info: userName/realName/mobile\n      const userNew = { id: userId };\n      if (userName) {\n        if (state === 'login' || !user.userName || user.userName.indexOf('__') > -1) {\n          userNew.userName = userName;\n        }\n      }\n      if (realName) {\n        userNew.realName = realName;\n      }\n      await this.ctx.meta.user.save({\n        user: userNew,\n      });\n      // save mobile\n      await this.ctx.meta.user.setActivated({\n        user: { id: userId, mobile, mobileVerified: 1 },\n      });\n\n      // login now\n      //   always no matter login/associate\n      await this.ctx.login(verifyUser);\n\n      // ok\n      return verifyUser;\n    }\n\n    async signin({ mobile, rememberMe }) {\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'passport/a-authsms/authsms',\n        body: { mobile, rememberMe },\n      });\n      return res;\n    }\n\n    async mobileVerify({ user, mobile }) {\n      await this.signup({ user, state: 'associate', userName: null, realName: null, mobile });\n    }\n\n  }\n\n  return Auth;\n};\n","module.exports = app => {\n  const models = {\n  };\n  return models;\n};\n","module.exports = app => {\n  // auth\n  const auth = require('./config/passport/auth.js')(app);\n  // keywords\n  const keywords = require('./config/validation/keywords.js')(app);\n  // schemas\n  const schemas = require('./config/validation/schemas.js')(app);\n  return {\n    auth,\n    validation: {\n      validators: {\n        signup: {\n          schemas: 'signup',\n        },\n        signin: {\n          schemas: 'signin',\n        },\n        mobileVerify: {\n          schemas: 'mobileVerify',\n        },\n      },\n      keywords: {\n        'x-exists': keywords.exists,\n      },\n      schemas: {\n        signup: schemas.signup,\n        signin: schemas.signin,\n        mobileVerify: schemas.mobileVerify,\n      },\n    },\n  };\n};\n","const strategy = require('./strategy.js');\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const provider = moduleInfo.name;\n  async function verify(ctx, body) {\n    const { mobile, rememberMe } = body;\n    // validate\n    await ctx.meta.validation.validate({ validator: 'signin', data: body });\n    // exists\n    const user = await ctx.meta.user.exists({ mobile });\n    if (!user) return ctx.throw(1004);\n    // disabled\n    if (user.disabled) return ctx.throw(1005);\n    return {\n      module: moduleInfo.relativeName,\n      provider,\n      profileId: mobile,\n      maxAge: rememberMe ? null : 0,\n      authShouldExists: true,\n      profile: {\n        mobile,\n        rememberMe,\n      },\n    };\n  }\n  return {\n    providers: {\n      [provider]: {\n        meta: {\n          title: 'SMS',\n          mode: 'direct',\n          component: 'signin',\n        },\n        config: {\n        },\n        handler: app => {\n          return {\n            strategy,\n            callback: (req, body, done) => {\n              verify(req.ctx, body).then(user => {\n                app.passport.doVerify(req, user, done);\n              }).catch(err => { done(err); });\n            },\n          };\n        },\n      },\n    },\n  };\n};\n","const passport = require('passport-strategy');\nconst util = require('util');\n\nfunction Strategy(options, verify) {\n  if (typeof options === 'function') {\n    verify = options;\n    options = {};\n  }\n  if (!verify) { throw new TypeError('LocalStrategy requires a verify callback'); }\n\n  passport.Strategy.call(this);\n  this.name = 'sms';\n  this._verify = verify;\n  this._passReqToCallback = options.passReqToCallback;\n}\n\n/**\n * Inherit from `passport.Strategy`.\n */\nutil.inherits(Strategy, passport.Strategy);\n\nStrategy.prototype.authenticate = function(req) {\n  // self\n  const self = this;\n\n  // check\n  if (req.method === 'GET') {\n    if (req.query.state === 'associate') {\n      // goto signup\n      let url = '/#!/a/authsms/signup?state=associate';\n      if (req.query.returnTo) {\n        url = `${url}&returnTo=${encodeURIComponent(req.query.returnTo)}`;\n      }\n      url = req.ctx.meta.base.getAbsoluteUrl(url);\n      return self.redirect(url);\n    }\n    // not allow\n    return self.error(req.ctx.parseFail(403));\n  }\n\n  // verified\n  function verified(err, user, info) {\n    if (err) { return self.error(err); }\n    if (!user) { return self.fail(info); }\n    req.ctx.success(user);\n    self.success(user, info);\n  }\n\n  try {\n    if (self._passReqToCallback) {\n      this._verify(req, req.body, verified);\n    } else {\n      this._verify(req.body, verified);\n    }\n  } catch (ex) {\n    return self.error(ex);\n  }\n};\n\nmodule.exports = Strategy;\n","/**\n * Module dependencies.\n */\nvar Strategy = require('./strategy');\n\n\n/**\n * Expose `Strategy` directly from package.\n */\nexports = module.exports = Strategy;\n\n/**\n * Export constructors.\n */\nexports.Strategy = Strategy;\n","/**\n * Creates an instance of `Strategy`.\n *\n * @constructor\n * @api public\n */\nfunction Strategy() {\n}\n\n/**\n * Authenticate request.\n *\n * This function must be overridden by subclasses.  In abstract form, it always\n * throws an exception.\n *\n * @param {Object} req The request to authenticate.\n * @param {Object} [options] Strategy-specific options.\n * @api public\n */\nStrategy.prototype.authenticate = function(req, options) {\n  throw new Error('Strategy#authenticate must be overridden by subclass');\n};\n\n\n/**\n * Expose `Strategy`.\n */\nmodule.exports = Strategy;\n","module.exports = require(\"util\");","module.exports = app => {\n  const keywords = {};\n  keywords.exists = {\n    async: true,\n    type: 'string',\n    errors: true,\n    compile() {\n      return async function(data, path, rootData, name) {\n        const ctx = this;\n        const res = await ctx.meta.user.exists({ [name]: data });\n        if (res && res.id !== ctx.user.agent.id) {\n          const errors = [{ keyword: 'x-exists', params: [], message: ctx.text('Element Exists') }];\n          throw new app.meta.ajv.ValidationError(errors);\n        }\n        if (!res && data.indexOf('__') > -1) {\n          const errors = [{ keyword: 'x-exists', params: [], message: ctx.text('Cannot Contain __') }];\n          throw new app.meta.ajv.ValidationError(errors);\n        }\n        return true;\n      };\n    },\n  };\n  return keywords;\n};\n","module.exports = app => {\n  const schemas = {};\n  schemas.signup = {\n    type: 'object',\n    properties: {\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        notEmpty: true,\n        'x-exists': true,\n      },\n      realName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Realname',\n        notEmpty: true,\n      },\n      mobile: {\n        type: 'string',\n        ebType: 'text',\n        ebInputType: 'tel',\n        ebTitle: 'Phone Number',\n        notEmpty: true,\n        'x-exists': true,\n      },\n    },\n  };\n  schemas.signin = {\n    type: 'object',\n    properties: {\n      mobile: {\n        type: 'string',\n        ebType: 'text',\n        ebInputType: 'tel',\n        ebTitle: 'Phone Number',\n        notEmpty: true,\n      },\n      rememberMe: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Remember Me',\n      },\n    },\n  };\n  schemas.mobileVerify = {\n    type: 'object',\n    properties: {\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        ebReadOnly: true,\n      },\n      mobile: {\n        type: 'string',\n        ebType: 'text',\n        ebInputType: 'tel',\n        ebTitle: 'Phone Number',\n        notEmpty: true,\n        'x-exists': true,\n      },\n    },\n  };\n\n  return schemas;\n};\n\n"],"sourceRoot":""}