{"version":3,"sources":["webpack://egg-born-module-a-socketio/./backend/src/bean/bean.io.js","webpack://egg-born-module-a-socketio/./backend/src/bean/broadcast.socketEmit.js","webpack://egg-born-module-a-socketio/./backend/src/bean/local.message.js","webpack://egg-born-module-a-socketio/./backend/src/bean/local.messageClass.js","webpack://egg-born-module-a-socketio/./backend/src/bean/local.procedure.js","webpack://egg-born-module-a-socketio/./backend/src/bean/middleware.connection.js","webpack://egg-born-module-a-socketio/./backend/src/bean/middleware.packet.js","webpack://egg-born-module-a-socketio/./backend/src/bean/queue.delivery.js","webpack://egg-born-module-a-socketio/./backend/src/bean/queue.process.js","webpack://egg-born-module-a-socketio/./backend/src/bean/queue.push.js","webpack://egg-born-module-a-socketio/./backend/src/bean/queue.pushDirect.js","webpack://egg-born-module-a-socketio/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-socketio/./backend/src/beans.js","webpack://egg-born-module-a-socketio/./backend/src/common/ioChannelBase.js","webpack://egg-born-module-a-socketio/./backend/src/common/ioMessageBase.js","webpack://egg-born-module-a-socketio/./backend/src/config/config.js","webpack://egg-born-module-a-socketio/./backend/src/config/errors.js","webpack://egg-born-module-a-socketio/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-socketio/./backend/src/config/locales.js","webpack://egg-born-module-a-socketio/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-socketio/./backend/src/controller/io.js","webpack://egg-born-module-a-socketio/./backend/src/controller/message.js","webpack://egg-born-module-a-socketio/./backend/src/controller/messageClass.js","webpack://egg-born-module-a-socketio/./backend/src/controllers.js","webpack://egg-born-module-a-socketio/./backend/src/main.js","webpack://egg-born-module-a-socketio/./backend/src/meta.js","webpack://egg-born-module-a-socketio/./backend/src/model/message.js","webpack://egg-born-module-a-socketio/./backend/src/model/messageClass.js","webpack://egg-born-module-a-socketio/./backend/src/model/messageSync.js","webpack://egg-born-module-a-socketio/./backend/src/models.js","webpack://egg-born-module-a-socketio/./backend/src/routes.js","webpack://egg-born-module-a-socketio/./backend/src/service/io.js","webpack://egg-born-module-a-socketio/./backend/src/service/message.js","webpack://egg-born-module-a-socketio/./backend/src/service/messageClass.js","webpack://egg-born-module-a-socketio/./backend/src/services.js","webpack://egg-born-module-a-socketio/external \"require3\"","webpack://egg-born-module-a-socketio/webpack/bootstrap","webpack://egg-born-module-a-socketio/webpack/startup"],"names":[],"mappings":";;;;;;;AAAA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB,GAAG,QAAQ,GAAG,KAAK;AAC1D,yBAAyB,sBAAsB,GAAG,SAAS;AAC3D;AACA;AACA;;AAEA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB,GAAG,QAAQ,GAAG,KAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,sBAAsB;AAC3D;AACA,2BAA2B,UAAU,EAAE,IAAI,GAAG,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,4BAA4B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,mBAAmB,uCAAuC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,yBAAyB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C,oBAAoB;AACnE,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,uCAAuC;AAC/D;AACA;AACA;AACA;AACA,yDAAyD,yBAAyB;AAClF;AACA,mCAAmC,mDAAmD;AACtF;;AAEA,0BAA0B,mDAAmD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA,6BAA6B,+CAA+C;AAC5E;AACA;;AAEA;AACA,yBAAyB,qDAAqD;AAC9E;AACA;AACA;AACA;AACA,0DAA0D,OAAO;AACjE;AACA;AACA;AACA;AACA;AACA,kDAAkD,oFAAoF;AACtI;AACA,SAAS;AACT;AACA,gDAAgD,sEAAsE;AACtH;AACA;AACA;;AAEA;AACA,qBAAqB,4DAA4D;AACjF;AACA;AACA;AACA,iDAAiD,gEAAgE;AACjH;AACA;AACA;AACA,0CAA0C,gEAAgE;AAC1G;AACA;;AAEA,iCAAiC,gEAAgE;AACjG;AACA,gCAAgC,8CAA8C;AAC9E;;AAEA,gBAAgB,8CAA8C;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,iFAAiF;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,iFAAiF;AACzG;AACA;AACA;AACA;AACA;AACA,2DAA2D,+DAA+D;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,uDAAuD;AAC1G;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,4BAA4B;AACvD;AACA,iCAAiC,eAAe,GAAG,aAAa;AAChE;AACA;AACA;AACA;AACA,iDAAiD,mBAAmB;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA,8BAA8B,wBAAwB,cAAc,sBAAsB;AAC1F;AACA;AACA,mDAAmD,aAAa;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,6BAA6B,cAAc,2BAA2B;AACtG;AACA;AACA;AACA;AACA,sDAAsD,aAAa;AACnE;AACA;AACA;AACA;;AAEA,oBAAoB,4DAA4D;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA,+BAA+B,OAAO;AACtC;AACA;AACA,2BAA2B,UAAU,EAAE,gBAAgB,KAAK,KAAK;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,sEAAsE;AAC3G;AACA,oCAAoC,oDAAoD;AACxF;;AAEA,oBAAoB,oDAAoD;AACxE;AACA;AACA,8CAA8C,oDAAoD;AAClG;AACA;AACA;AACA,2BAA2B,8CAA8C;AACzE;;AAEA;AACA;AACA;AACA,gBAAgB,yDAAyD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2CAA2C;AACtF;AACA;AACA,oCAAoC,2CAA2C;AAC/E;;AAEA,2BAA2B,2CAA2C;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB,GAAG,OAAO,GAAG,KAAK;AAC1D;AACA,kCAAkC;AAClC;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA;;AAEA;AACA,sBAAsB,2CAA2C;AACjE;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB,GAAG,OAAO,GAAG,KAAK;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oCAAoC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,oCAAoC;AACrD;AACA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD,OAAO;AACP;;AAEA;AACA;AACA;;;;;;;;ACzcA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACrBA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;;AAEA,qBAAqB,mCAAmC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,8BAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,cAAc;AACd;;AAEA,kBAAkB,8BAA8B;AAChD,+BAA+B,wCAAwC;AACvE;;AAEA,iBAAiB,8BAA8B;AAC/C,sCAAsC,wCAAwC;AAC9E,cAAc;AACd;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,iBAAiB,qCAAqC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACpKA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6BAA6B,+BAA+B;AAC5D;AACA,2CAA2C,2BAA2B;AACtE;AACA;;AAEA,eAAe,+BAA+B;AAC9C,yBAAyB,KAAK,IAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA,wBAAwB,MAAM;AAC9B,mEAAmE,2BAA2B;AAC9F,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,yBAAyB,2BAA2B;AACpD;AACA,oDAAoD,2BAA2B;AAC/E;AACA;AACA,8CAA8C,2BAA2B;AACzE,yDAAyD,OAAO,GAAG,iBAAiB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,2BAA2B;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;;ACtJA;AACA;;AAEA,oBAAoB,0CAA0C;;AAE9D;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,MAAM;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,sCAAsC,iBAAiB;AACvD,OAAO;AACP;AACA;;AAEA;AACA;AACA,kBAAkB,cAAc;AAChC,YAAY;AACZ;AACA,yDAAyD;AACzD,eAAe;AACf;AACA,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA,aAAa,0BAA0B;;AAEvC;;AAEA;AACA;AACA;AACA,sBAAsB,IAAI,cAAc,OAAO,qBAAqB,YAAY;AAChF;;AAEA;AACA;AACA;;AAEA,YAAY,0BAA0B;;AAEtC;;AAEA;AACA;AACA;AACA,sBAAsB,IAAI,cAAc,OAAO,qBAAqB,YAAY;AAChF;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA,8EAA8E,gBAAgB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4FAA4F,QAAQ,WAAW,SAAS;AACxH;AACA,+FAA+F,QAAQ,WAAW,SAAS;;AAE3H;AACA;AACA,mDAAmD,sBAAsB;AACzE;AACA;AACA;AACA;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;;AAEA;AACA,aAAa,qDAAqD;AAClE,mDAAmD,qDAAqD;AACxG;;AAEA;;AAEA;AACA;;;;;;;;ACXA;AACA;;AAEA;AACA,aAAa,uCAAuC;AACpD,kDAAkD,uCAAuC;AACzF;;AAEA;;AAEA;AACA;;;;;;;;ACXA;AACA;;AAEA;AACA,aAAa,4DAA4D;AACzE,+CAA+C,4DAA4D;AAC3G;;AAEA;;AAEA;AACA;;;;;;;;ACXA;AACA;;AAEA;AACA,aAAa,4BAA4B;AACzC,qDAAqD,4BAA4B;AACjF;;AAEA;;AAEA;AACA;;;;;;;;ACXA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AClFA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,qBAAqB,mBAAO,CAAC,GAAyB;AACtD,0BAA0B,mBAAO,CAAC,EAA8B;AAChE,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,4BAA4B,mBAAO,CAAC,GAAgC;AACpE,qBAAqB,mBAAO,CAAC,GAAyB;AACtD,sBAAsB,mBAAO,CAAC,GAA0B;AACxD,kBAAkB,mBAAO,CAAC,GAAsB;AAChD,wBAAwB,mBAAO,CAAC,EAA4B;AAC5D,6BAA6B,mBAAO,CAAC,GAAiC;AACtE,yBAAyB,mBAAO,CAAC,GAA6B;AAC9D,eAAe,mBAAO,CAAC,EAAmB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACxEA;AACA;;AAEA,qBAAqB,uDAAuD;AAC5E;AACA;;AAEA;AACA;AACA;;;;;;;;ACTA;AACA;;AAEA,uBAAuB,kCAAkC;AACzD;AACA;AACA;AACA;;AAEA,2BAA2B,yBAAyB;AACpD;AACA;;AAEA,qBAAqB,mDAAmD;AACxE,+CAA+C,mDAAmD;AAClG;;AAEA,kBAAkB,8CAA8C;AAChE,qCAAqC,8CAA8C;AACnF;;AAEA,sBAAsB,oDAAoD;AAC1E,yCAAyC,oDAAoD;AAC7F;;AAEA,8BAA8B,+DAA+D;AAC7F;AACA;;AAEA,mBAAmB,uCAAuC;AAC1D,wCAAwC,uCAAuC;AAC/E;;AAEA;AACA;AACA;AACA,gBAAgB,8CAA8C,GAAG,8CAA8C;AAC/G;;AAEA;AACA;AACA;;;;;;;;ACzCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;;AC/CA;AACA;AACA;;;;;;;;ACFA;AACA;;;;;;;;ACDA;AACA,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACFA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;;AAEA;AACA;AACA;A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","file":"backend.js","sourcesContent":["const require3 = require('require3');\nconst uuid = require3('uuid');\n\nconst SOCKETSONLINE = Symbol.for('APP#__SOCKETSONLINE');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class IO {\n\n    constructor() {\n      this._redis = null;\n    }\n\n    get messageClass() {\n      return ctx.bean._getBean(moduleInfo.relativeName, 'local.messageClass');\n    }\n\n    get message() {\n      return ctx.bean._getBean(moduleInfo.relativeName, 'local.message');\n    }\n\n    get redis() {\n      if (!this._redis) this._redis = ctx.app.redis.get('io') || ctx.app.redis.get('cache');\n      return this._redis;\n    }\n\n    _registerSocket(socketId, socket) {\n      const socketsOnline = ctx.app.geto(SOCKETSONLINE);\n      socketsOnline[socketId] = socket;\n    }\n\n    _unRegisterSocket(socketId) {\n      const socketsOnline = ctx.app.geto(SOCKETSONLINE);\n      delete socketsOnline[socketId];\n    }\n\n    // subcribe\n    //    hash key: userId:path\n    //    hash value: scene -> workerId:socketId\n    async subscribe({ subscribes, socketId, user }) {\n      for (const item of subscribes) {\n        const path = item.path;\n        if (!path) ctx.throw(403);\n        const scene = item.scene || '';\n        const key = `${ctx.instance.id}:${user.id}:${path}`;\n        const value = `${ctx.app.meta.workerId}:${socketId}`;\n        await this.redis.hset(key, scene, value);\n      }\n    }\n\n    async unsubscribe({ subscribes, user }) {\n      for (const item of subscribes) {\n        const path = item.path;\n        if (!path) ctx.throw(403);\n        const scene = item.scene || '';\n        const socketId = item.socketId;\n        if (!socketId) continue;\n        const key = `${ctx.instance.id}:${user.id}:${path}`;\n        // check if socketId is consistent\n        const value = await this.redis.hget(key, scene);\n        if (value && value.indexOf(socketId) > -1) {\n          await this.redis.hdel(key, scene);\n        }\n      }\n    }\n\n    async unsubscribeWhenDisconnect({ iid, user, socketId }) {\n      const keyPrefix = this.redis.options.keyPrefix;\n      const keyPatern = `${keyPrefix}${iid}:${user.id}:*`;\n      const keys = await this.redis.keys(keyPatern);\n      for (const fullKey of keys) {\n        const key = fullKey.substr(keyPrefix.length);\n        const values = await this.redis.hgetall(key);\n        if (!values) continue;\n        for (const field in values) {\n          const value = values[field];\n          if (value && value.indexOf(socketId) > -1) {\n            await this.redis.hdel(key, field);\n          }\n        }\n      }\n    }\n\n    async pushDirect({ content, channel, options }) {\n      ctx.app.meta.queue.push({\n        subdomain: ctx.subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'pushDirect',\n        data: {\n          content,\n          channel,\n          options,\n        },\n      });\n    }\n\n    async publish({ path, message, messageClass, options }) {\n      // options\n      const messageScene = (options && options.scene) || '';\n      // messageClass\n      messageClass = await this.messageClass.get(messageClass);\n      const messageClassBase = this.messageClass.messageClass(messageClass);\n      // message/userId\n      message.userIdFrom = parseInt(message.userIdFrom || 0);\n      if (message.userIdTo === undefined || message.userIdTo === null) message.userIdTo = -2;\n      message.userIdTo = parseInt(message.userIdTo || 0);\n      const userIdFrom = message.userIdFrom;\n      const userIdTo = message.userIdTo;\n      // sessionId\n      const beanMessage = this._getBeanMessage(messageClassBase);\n      const sessionId = await beanMessage.onSessionId({ path, message, options });\n      // message\n      const _message = {\n        messageClassId: messageClass.id,\n        messageType: message.messageType,\n        messageFilter: message.messageFilter,\n        messageGroup: message.messageGroup,\n        messageScene,\n        userIdTo,\n        userIdFrom,\n        sessionId,\n        content: JSON.stringify(message.content), // should use string for db/queue\n      };\n\n      // save\n      if (messageClassBase.info.persistence) {\n        _message.id = await this.message.save({ message: _message });\n      } else {\n        _message.id = message.id || uuid.v4();\n        _message.createdAt = new Date();\n      }\n\n      // to queue\n      ctx.app.meta.queue.push({\n        subdomain: ctx.subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'process',\n        data: {\n          path,\n          options,\n          message: _message,\n          messageClass,\n        },\n      });\n\n      // ok\n      return {\n        id: _message.id,\n      };\n    }\n\n    // queue: process\n    async queueProcess({ path, options, message, messageClass }) {\n      // messageClass\n      const messageClassBase = this.messageClass.messageClass(messageClass);\n      const beanMessage = this._getBeanMessage(messageClassBase);\n      // groupUsers\n      const groupUsers = await beanMessage.onGroupUsers({ path, message, options });\n      // onProcess\n      await beanMessage.onProcess({ path, options, message, groupUsers, messageClass });\n    }\n\n    async _onProcessBase({ path, options, message, groupUsers, messageClass }) {\n      // messageClass\n      const messageClassBase = this.messageClass.messageClass(messageClass);\n      // save syncs\n      const messageSyncs = await this.message.saveSyncs({\n        message,\n        groupUsers,\n        persistence: messageClassBase.info.persistence,\n      });\n      // to queue: delivery/push\n      if (path) {\n        // delivery\n        ctx.app.meta.queue.push({\n          subdomain: ctx.subdomain,\n          module: moduleInfo.relativeName,\n          queueName: 'delivery',\n          data: {\n            path,\n            options,\n            message,\n            messageSyncs,\n            messageClass,\n          },\n        });\n      } else {\n        // push\n        this._pushQueuePush({ options, message, messageSyncs, messageClass });\n      }\n    }\n\n    // queue: delivery\n    async queueDelivery({ path, options, message, messageSyncs, messageClass }) {\n      const messageClassBase = this.messageClass.messageClass(messageClass);\n      for (const messageSync of messageSyncs) {\n        if (messageSync.userId === -1 && path) {\n          // broadcast to online users\n          const userIds = await this._getPathUsersOnline({ path });\n          for (const userId of userIds) {\n            const _messageSync = {\n              ...messageSync,\n              userId,\n            };\n            await this._queueDeliveryMessageSync({ messageClassBase, path, options, message, messageSync: _messageSync, messageClass });\n          }\n        } else {\n          // normal\n          await this._queueDeliveryMessageSync({ messageClassBase, path, options, message, messageSync, messageClass });\n        }\n      }\n    }\n\n    // queue: push\n    async queuePush({ options, message, messageSyncs, messageSync, messageClass }) {\n      const messageClassBase = this.messageClass.messageClass(messageClass);\n      if (messageSync) {\n        // only one message\n        return await this._queuePushMessageSync({ messageClassBase, options, message, messageSync, messageClass });\n      }\n      // more messages\n      for (const messageSync of messageSyncs) {\n        await this._queuePushMessageSync({ messageClassBase, options, message, messageSync, messageClass });\n      }\n    }\n\n    async _queuePushMessageSync({ messageClassBase, options, message, messageSync, messageClass }) {\n      const beanMessage = this._getBeanMessage(messageClassBase);\n      await beanMessage.onPush({ options, message, messageSync, messageClass });\n    }\n\n    async push({ options, message, messageSync, messageClass }) {\n      const messageClassBase = this.messageClass.messageClass(messageClass);\n      // userId\n      const userId = messageSync.userId;\n      const isSender = message.userIdFrom === userId;\n      // ignore sender\n      if (isSender) return true;\n      // adjust auto\n      let autoFirstValid = false;\n      // options maybe set push.channels\n      let channels = options && options.push && options.channels;\n      if (!channels) {\n        channels = messageClassBase.info.push.channels;\n        autoFirstValid = true;\n      }\n      if (!channels) return false;\n      // loop\n      let atLeastDone = false;\n      for (const channelFullName of channels) {\n        const res = await this._pushChannel({ messageClassBase, options, message, messageSync, messageClass, channelFullName });\n        if (!res) continue;\n        atLeastDone = true;\n        if (autoFirstValid) break;\n      }\n      // log\n      if (!atLeastDone) {\n        ctx.logger.info('not found any valid channel for this message:', message);\n        return false;\n      }\n      // done\n      return true;\n    }\n\n    async _pushChannel({ messageClassBase, options, message, messageSync, messageClass, channelFullName }) {\n      try {\n        // bean\n        const beanMessage = this._getBeanMessage(messageClassBase);\n        if (!beanMessage) return false;\n        // render message content\n        const content = await beanMessage.onChannelRender({ channelFullName, options, message, messageSync, messageClass });\n        if (!content) return false;\n        // get channel base\n        const beanChannel = this._getBeanChannel(channelFullName);\n        if (!beanChannel) {\n          return false;\n        }\n        // push\n        const pushDone = await beanChannel.onPush({ content, options, message, messageSync, messageClass });\n        if (!pushDone) return false;\n        // done this channel\n        return true;\n      } catch (err) {\n        // log\n        ctx.logger.error(err);\n        return false;\n      }\n    }\n\n    async queuePushDirect({ content, options, channel }) {\n      // get channel base\n      const channelFullName = `${channel.module}:${channel.name}`;\n      const beanChannel = this._getBeanChannel(channelFullName);\n      if (!beanChannel) {\n        return false;\n      }\n      const pushDone = await beanChannel.onPush({ content, options });\n      // done\n      return pushDone;\n    }\n\n    _getBeanChannel(channelFullName) {\n      // get channel base\n      const channelBase = this.messageClass.channel(channelFullName);\n      if (!channelBase) {\n        ctx.logger.info(`channel not found: ${channelFullName}`);\n        return;\n      }\n      // bean\n      const beanFullName = `${channelBase.info.module}.io.channel.${channelBase.info.bean}`;\n      const beanChannel = ctx.bean._getBean(beanFullName);\n      if (!beanChannel) {\n        ctx.logger.info(`channel bean not found: ${beanFullName}`);\n        return;\n      }\n      return beanChannel;\n    }\n\n    _getBeanMessage(messageClassBase) {\n      // bean\n      let beanMessage;\n      if (messageClassBase.info.bean) {\n        const beanFullName = `${messageClassBase.info.module}.io.message.${messageClassBase.info.bean}`;\n        beanMessage = ctx.bean._getBean(beanFullName);\n      }\n      if (!beanMessage) {\n        beanMessage = new (ctx.app.meta.IOMessageBase(ctx))();\n        // ctx.logger.info(`message bean not found: ${beanFullName}`);\n        // return;\n      }\n      return beanMessage;\n    }\n\n    _pushQueuePush({ options, message, messageSyncs, messageSync, messageClass }) {\n      const messageClassBase = this.messageClass.messageClass(messageClass);\n      // check if enable push\n      const infoPush = messageClassBase.info && messageClassBase.info.push;\n      if (infoPush && infoPush.channels) {\n        ctx.app.meta.queue.push({\n          subdomain: ctx.subdomain,\n          module: moduleInfo.relativeName,\n          queueName: 'push',\n          data: {\n            options,\n            message,\n            messageSyncs,\n            messageSync,\n            messageClass,\n          },\n        });\n      }\n    }\n\n    async _getPathUsersOnline({ path }) {\n      const userIds = [];\n      const keyPrefix = this.redis.options.keyPrefix;\n      const keyPatern = `${keyPrefix}${ctx.instance.id}:*:${path}`;\n      const keys = await this.redis.keys(keyPatern);\n      for (const fullKey of keys) {\n        const key = fullKey.substr(keyPrefix.length);\n        userIds.push(parseInt(key.split(':')[1]));\n      }\n      return userIds;\n    }\n\n    async _queueDeliveryMessageSync({ messageClassBase, path, options, message, messageSync, messageClass }) {\n      const beanMessage = this._getBeanMessage(messageClassBase);\n      await beanMessage.onDelivery({ path, options, message, messageSync, messageClass });\n    }\n\n    async delivery({ path, options, message, messageSync, messageClass }) {\n      // ignore delivery online if !path\n      if (path) {\n        const deliveryDone = await this.emit({ path, options, message, messageSync, messageClass });\n        if (deliveryDone) return;\n      }\n      // to queue: push\n      this._pushQueuePush({ options, message, messageSync, messageClass });\n    }\n\n    // offline: return false\n    //    hash key: userId:path\n    //    hash value: scene -> workerId:socketId\n    async emit({ path, options, message, messageSync/* , messageClass*/ }) {\n      // userId\n      const userId = messageSync.userId;\n      if (!userId) return true;\n      // options\n      const messageScene = (options && options.scene) || '';\n      // // no scene\n      // if (!messageScene) {\n      //   return await this._emitNoScene({ path, message, messageSync, messageScene });\n      // }\n      // scene\n      return await this._emitScene({ path, message, messageSync, messageScene });\n    }\n\n    // async _emitNoScene({ path, message, messageSync, messageScene }) {\n    //   // userId\n    //   const userId = messageSync.userId;\n    //   const isSender = message.userIdFrom === userId;\n    //   // ignore sender\n    //   if (isSender) return true;\n    //   // get hash value\n    //   const key = `${ctx.instance.id}:${userId}:${path}`;\n    //   const value = await this.redis.hget(key, messageScene);\n    //   if (!value) return false; // offline\n    //   // emit\n    //   const [ workerId, socketId ] = value.split(':');\n    //   this._emitSocket({ path, message, workerId, socketId });\n    //   // done\n    //   return true;\n    // }\n\n    // return true when any emitSocket\n    async _emitScene({ path, message, messageSync, messageScene }) {\n      // userId\n      const userId = messageSync.userId;\n      const isSender = message.userIdFrom === userId;\n      // get hash value\n      const key = `${ctx.instance.id}:${userId}:${path}`;\n      const values = await this.redis.hgetall(key);\n      if (!values) {\n        // offline\n        //  only support offline-notification for receiver\n        return !!isSender;\n      }\n      let bSent = false;\n      for (const field in values) {\n        if (!isSender || field !== messageScene) {\n          bSent = true;\n          const value = values[field];\n          const [ workerId, socketId ] = value.split(':');\n          this._emitSocket({ path, message, workerId, socketId });\n        }\n      }\n      if (!bSent) {\n        // offline\n        //  only support offline-notification for receiver\n        return !!isSender;\n      }\n      // done\n      return true;\n    }\n\n    _emitSocket({ path, message, workerId, socketId }) {\n      // broadcast\n      ctx.app.meta.broadcast.emit({\n        subdomain: ctx.subdomain,\n        module: moduleInfo.relativeName,\n        broadcastName: 'socketEmit',\n        data: { path, message, workerId, socketId },\n      });\n    }\n\n  }\n  return IO;\n};\n","const SOCKETSONLINE = Symbol.for('APP#__SOCKETSONLINE');\nmodule.exports = app => {\n  class Broadcast extends app.meta.BeanBase {\n\n    async execute(context) {\n      const data = context.data;\n      if (app.meta.workerId === data.workerId) {\n        const socketsOnline = app.geto(SOCKETSONLINE);\n        const socket = socketsOnline[data.socketId];\n        if (socket) {\n          socket.emit('message', {\n            path: data.path,\n            message: data.message,\n          });\n        }\n      }\n    }\n\n  }\n\n  return Broadcast;\n};\n","const require3 = require('require3');\nconst uuid = require3('uuid');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class MessageClass {\n\n    constructor() {\n      this._sqlProcedure = null;\n    }\n\n    get modelMessage() {\n      return ctx.model.module(moduleInfo.relativeName).message;\n    }\n\n    get modelMessageSync() {\n      return ctx.model.module(moduleInfo.relativeName).messageSync;\n    }\n\n    get sqlProcedure() {\n      return ctx.bean._getBean(moduleInfo.relativeName, 'local.procedure');\n    }\n\n    async save({ message }) {\n      // insert\n      const res = await this.modelMessage.insert(message);\n      return res.insertId;\n    }\n\n    async saveSyncs({ message, groupUsers, persistence }) {\n      // messageId\n      const messageId = message.id;\n      // message sync\n      const messageSyncs = [];\n      //  :userIdFrom\n      const isSame = message.userIdTo === message.userIdFrom;\n      messageSyncs.push({\n        messageId,\n        userId: message.userIdFrom,\n        messageDirection: isSame ? 0 : 1, // self/send\n        messageRead: 1,\n      });\n      //  :userIdTo\n      if (!message.messageGroup) {\n        // single chat\n        if (!isSame) {\n          messageSyncs.push({\n            messageId,\n            userId: message.userIdTo,\n            messageDirection: 2, // receive\n            messageRead: 0,\n          });\n        }\n      } else {\n        // group chat\n        if (groupUsers) {\n          for (const groupUser of groupUsers) {\n            const _userIdTo = groupUser.userId;\n            if (_userIdTo !== message.userIdFrom) {\n              messageSyncs.push({\n                messageId,\n                userId: _userIdTo,\n                messageDirection: 2, // receive\n                messageRead: 0,\n              });\n            }\n          }\n        }\n      }\n      //  :save\n      for (const messageSync of messageSyncs) {\n        if (persistence) {\n          const res = await this.modelMessageSync.insert(messageSync);\n          messageSync.messageSyncId = res.insertId;\n        } else {\n          messageSync.messageSyncId = uuid.v4();\n        }\n      }\n      // ok\n      return messageSyncs;\n    }\n\n    // the first unread message\n    // options:\n    //    where\n    async offset({ messageClass, options, user }) {\n      // messageClass\n      messageClass = await ctx.bean.io.messageClass.get(messageClass);\n      // where\n      const where = (options && options.where) || {};\n      where.iid = ctx.instance.id;\n      where.deleted = 0;\n      where.syncDeleted = 0;\n      where.messageClassId = messageClass.id;\n      where.userId = user ? user.id : 0;\n      where.messageRead = 0;\n      // offset\n      const res = await ctx.db.select('aSocketIOMessageView', {\n        where,\n        columns: [ 'id' ],\n        orders: [[ 'id', 'asc' ]],\n        limit: 1,\n        offset: 0,\n      });\n      // offset - 1\n      const offset = res[0] ? res[0].id - 1 : -1;\n      return { offset };\n    }\n\n    async select({ messageClass, options, user }) {\n      return await this._list({ messageClass, options, user, count: 0 });\n    }\n\n    async count({ messageClass, options, user }) {\n      const count = await this._list({ messageClass, options, user, count: 1 });\n      return { count };\n    }\n\n    async setRead({ messageIds, user }) {\n      if (!messageIds || messageIds.length === 0) return;\n      // query\n      const sql = this.sqlProcedure.setRead({\n        iid: ctx.instance.id,\n        messageIds,\n        userId: user ? user.id : 0,\n      });\n      await ctx.model.query(sql);\n    }\n\n    async delete({ messageIds, user }) {\n      if (!messageIds || messageIds.length === 0) return;\n      // query\n      const sql = this.sqlProcedure.delete({\n        iid: ctx.instance.id,\n        messageIds,\n        userId: user ? user.id : 0,\n      });\n      await ctx.model.query(sql);\n    }\n\n    async _list({ messageClass, options, user, count }) {\n      // messageClass\n      messageClass = await ctx.bean.io.messageClass.get(messageClass);\n      // where\n      const where = (options && options.where) || {};\n      where.messageClassId = messageClass.id;\n      where.userId = user ? user.id : 0;\n      // orders\n      const orders = (options && options.orders) || [[ 'createdAt', 'asc' ]];\n      // query\n      const sql = this.sqlProcedure.selectMessages({\n        iid: ctx.instance.id,\n        where,\n        orders,\n        page: options.page,\n        offset: options.offset,\n        count,\n      });\n      const res = await ctx.model.query(sql);\n      return count ? res[0]._count : res;\n    }\n\n  }\n  return MessageClass;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nconst _cacheMessageClasses = {};\nconst _cacheChannels = {};\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class MessageClass {\n\n    get modelMessageClass() {\n      return ctx.model.module(moduleInfo.relativeName).messageClass;\n    }\n\n    async getMessageClassId({ id, module, messageClassName }) {\n      if (id) return id;\n      const messageClass = await this.get({ module, messageClassName });\n      return messageClass.id;\n    }\n\n    async get({ id, module, messageClassName }) {\n      const data = id ? { id } : { module, messageClassName };\n      const res = await this.modelMessageClass.get(data);\n      if (res) return res;\n      if (!module || !messageClassName) throw new Error('Invalid arguments');\n      // lock\n      return await ctx.app.meta.util.lock({\n        subdomain: ctx.subdomain,\n        resource: `${moduleInfo.relativeName}.messageClass.register`,\n        fn: async () => {\n          return await ctx.app.meta.util.executeBean({\n            subdomain: ctx.subdomain,\n            beanModule: moduleInfo.relativeName,\n            fn: async ({ ctx }) => {\n              return await ctx.bean.io.messageClass._registerLock({ module, messageClassName });\n            },\n          });\n        },\n      });\n    }\n\n    async _registerLock({ module, messageClassName }) {\n      // get\n      const res = await this.modelMessageClass.get({ module, messageClassName });\n      if (res) return res;\n      // data\n      const messageClass = this.messageClass({ module, messageClassName });\n      if (!messageClass) throw new Error(`messageClass ${module}:${messageClassName} not found!`);\n      const data = {\n        module,\n        messageClassName,\n      };\n      // insert\n      const res2 = await this.modelMessageClass.insert(data);\n      data.id = res2.insertId;\n      return data;\n    }\n\n    messageClasses() {\n      if (!_cacheMessageClasses[ctx.locale]) {\n        _cacheMessageClasses[ctx.locale] = this._prepareMessageClasses();\n      }\n      return _cacheMessageClasses[ctx.locale];\n    }\n\n    messageClass({ module, messageClassName }) {\n      const _messageClasses = this.messageClasses();\n      return _messageClasses[module] && _messageClasses[module][messageClassName];\n    }\n\n    _prepareMessageClasses() {\n      const messageClasses = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        if (module.main.meta && module.main.meta.socketio && module.main.meta.socketio.messages) {\n          const res = this._prepareMessageClassesModule(module, module.main.meta.socketio.messages);\n          if (Object.keys(res).length > 0) {\n            messageClasses[relativeName] = res;\n          }\n        }\n      }\n      return messageClasses;\n    }\n\n    _prepareMessageClassesModule(module, _messages) {\n      const messageClasses = {};\n      for (const key in _messages) {\n        const message = extend(true, {}, _messages[key]);\n        message.info.module = module.info.relativeName;\n        message.info.name = key;\n        // titleLocale\n        message.info.titleLocale = ctx.text(message.info.title);\n        // ok\n        messageClasses[key] = message;\n      }\n      return messageClasses;\n    }\n\n    channels() {\n      if (!_cacheChannels[ctx.locale]) {\n        _cacheChannels[ctx.locale] = this._prepareChannels();\n      }\n      return _cacheChannels[ctx.locale];\n    }\n\n    // string/object\n    channel(channelFullName) {\n      let module,\n        channelName;\n      if (typeof channelFullName === 'string') {\n        [ module, channelName ] = channelFullName.split(':');\n      } else {\n        module = channelFullName.module;\n        channelName = channelFullName.channelName;\n      }\n      const _channels = this.channels();\n      return _channels[module] && _channels[module][channelName];\n    }\n\n    _prepareChannels() {\n      const channels = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        if (module.main.meta && module.main.meta.socketio && module.main.meta.socketio.channels) {\n          const res = this._prepareChannelsModule(module, module.main.meta.socketio.channels);\n          if (Object.keys(res).length > 0) {\n            channels[relativeName] = res;\n          }\n        }\n      }\n      return channels;\n    }\n\n    _prepareChannelsModule(module, _channels) {\n      const channels = {};\n      for (const key in _channels) {\n        const channel = extend(true, {}, _channels[key]);\n        channel.info.module = module.info.relativeName;\n        channel.info.name = key;\n        // titleLocale\n        channel.info.titleLocale = ctx.text(channel.info.title);\n        // ok\n        channels[key] = channel;\n      }\n      return channels;\n    }\n\n\n  }\n  return MessageClass;\n};\n","module.exports = ctx => {\n  class Procedure {\n\n    selectMessages({ iid, where, orders, page, offset, count }) {\n\n      // for safe\n      where = where ? ctx.model._where(where) : null;\n      orders = orders ? ctx.model._orders(orders) : null;\n      const limit = page ? ctx.model._limit(page.size, page.index) : null;\n\n      //\n      const _where = where ? `${where} AND` : ' WHERE';\n      const _orders = orders || '';\n      const _limit = limit || '';\n\n      // fields\n      let _selectFields;\n      if (count) {\n        _selectFields = 'count(*) as _count';\n      } else {\n        _selectFields = 'a.*';\n      }\n\n      // offset\n      let _offsetWhere;\n      if (typeof offset === 'number') {\n        _offsetWhere = ` and a.id > ${parseInt(offset)}`;\n      } else {\n        _offsetWhere = '';\n      }\n\n      // sql\n      const _sql =\n        `select ${_selectFields} from aSocketIOMessageView a\n          ${_where}\n           (\n             a.deleted=0 and a.syncDeleted=0 and a.iid=${iid}\n             ${_offsetWhere}\n           )\n          ${count ? '' : _orders}\n          ${count ? '' : _limit}\n        `;\n\n      // ok\n      return _sql;\n    }\n\n    setRead({ iid, messageIds, userId }) {\n\n      const _messageIds = messageIds.map(item => parseInt(item)).join(',');\n\n      // sql\n      const _sql =\n        `update aSocketIOMessageSync set messageRead=1\n          where iid=${iid} and userId=${userId} and messageId in (${_messageIds})\n        `;\n\n      // ok\n      return _sql;\n    }\n\n    delete({ iid, messageIds, userId }) {\n\n      const _messageIds = messageIds.map(item => parseInt(item)).join(',');\n\n      // sql\n      const _sql =\n        `update aSocketIOMessageSync set deleted=1\n          where iid=${iid} and userId=${userId} and messageId in (${_messageIds})\n        `;\n\n      // ok\n      return _sql;\n    }\n\n  }\n\n  return Procedure;\n\n};\n","module.exports = ctx => {\n  const app = ctx.app;\n  class Middleware {\n    async execute(options, next) {\n      // should startup: true\n      const appReadyInstance = await ctx.bean.instance.checkAppReadyInstance({ startup: true });\n      if (!appReadyInstance) return ctx.throw(403);\n      // cache userId/socketId for disconnect\n      const user = ctx.session.passport.user.op;\n      if (user.anonymous) return ctx.throw(403);\n      const iid = user.iid;\n      const socketId = ctx.socket.id;\n      ctx.bean.io._registerSocket(socketId, ctx.socket);\n\n      if (app.meta.isTest || app.meta.isLocal) app.logger.info(`socket io connected: user:${user.id}, socket:${socketId}`);\n      await next();\n      if (app.meta.isTest || app.meta.isLocal) app.logger.info(`socket io disconnected: user:${user.id}, socket:${socketId}`);\n\n      // execute when disconnect\n      ctx.bean.io._unRegisterSocket(socketId);\n      await ctx.bean.io.unsubscribeWhenDisconnect({ iid, user, socketId });\n    }\n  }\n  return Middleware;\n};\n","module.exports = () => {\n  class Middleware {\n    async execute(options, next) {\n      await next();\n    }\n  }\n  return Middleware;\n};\n","module.exports = app => {\n  class Queue extends app.meta.BeanBase {\n\n    async execute(context) {\n      const { path, options, message, messageSyncs, messageClass } = context.data;\n      return await this.ctx.bean.io.queueDelivery({ path, options, message, messageSyncs, messageClass });\n    }\n\n  }\n\n  return Queue;\n};\n","module.exports = app => {\n  class Queue extends app.meta.BeanBase {\n\n    async execute(context) {\n      const { path, options, message, messageClass } = context.data;\n      return await this.ctx.bean.io.queueProcess({ path, options, message, messageClass });\n    }\n\n  }\n\n  return Queue;\n};\n","module.exports = app => {\n  class Queue extends app.meta.BeanBase {\n\n    async execute(context) {\n      const { options, message, messageSyncs, messageSync, messageClass } = context.data;\n      return await this.ctx.bean.io.queuePush({ options, message, messageSyncs, messageSync, messageClass });\n    }\n\n  }\n\n  return Queue;\n};\n","module.exports = app => {\n  class Queue extends app.meta.BeanBase {\n\n    async execute(context) {\n      const { options, content, channel } = context.data;\n      return await this.ctx.bean.io.queuePushDirect({ options, content, channel });\n    }\n\n  }\n\n  return Queue;\n};\n","module.exports = app => {\n\n  class Version extends app.meta.BeanBase {\n\n    async update(options) {\n      if (options.version === 1) {\n        let sql;\n\n        // create table: aSocketIOMessageClass\n        sql = `\n          CREATE TABLE aSocketIOMessageClass (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            messageClassName varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aSocketIOMessage\n        sql = `\n          CREATE TABLE aSocketIOMessage (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            messageClassId int(11) DEFAULT '0',\n            messageType int(11) DEFAULT '0',\n            messageFilter varchar(255) DEFAULT NULL,\n            messageGroup int(11) DEFAULT '0',\n            messageScene varchar(50) DEFAULT NULL,\n            userIdTo int(11) DEFAULT '0',\n            userIdFrom int(11) DEFAULT '0',\n            sessionId varchar(255) DEFAULT NULL,\n            content json DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aSocketIOMessageSync\n        sql = `\n          CREATE TABLE aSocketIOMessageSync (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            messageId int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            messageDirection int(11) DEFAULT '0',\n            messageRead int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create view: aSocketIOMessageView\n        sql = `\n          CREATE VIEW aSocketIOMessageView as\n            select a.*,b.userId,b.messageDirection,b.messageRead,b.deleted as syncDeleted from aSocketIOMessage a\n              left join aSocketIOMessageSync b on a.id=b.messageId\n        `;\n        await this.ctx.model.query(sql);\n\n      }\n    }\n\n    async init(options) {\n    }\n\n    async test() {\n    }\n\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst localMessage = require('./bean/local.message.js');\nconst localMessageClass = require('./bean/local.messageClass.js');\nconst localProcedure = require('./bean/local.procedure.js');\nconst broadcastSocketEmit = require('./bean/broadcast.socketEmit.js');\nconst queueProcess = require('./bean/queue.process.js');\nconst queueDelivery = require('./bean/queue.delivery.js');\nconst queuePush = require('./bean/queue.push.js');\nconst queuePushDirect = require('./bean/queue.pushDirect.js');\nconst middlewareConnection = require('./bean/middleware.connection.js');\nconst middlewarePacket = require('./bean/middleware.packet.js');\nconst beanIO = require('./bean/bean.io.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // local\n    'local.message': {\n      mode: 'ctx',\n      bean: localMessage,\n    },\n    'local.messageClass': {\n      mode: 'ctx',\n      bean: localMessageClass,\n    },\n    'local.procedure': {\n      mode: 'ctx',\n      bean: localProcedure,\n    },\n    // broadcast\n    'broadcast.socketEmit': {\n      mode: 'app',\n      bean: broadcastSocketEmit,\n    },\n    // queue\n    'queue.process': {\n      mode: 'app',\n      bean: queueProcess,\n    },\n    'queue.delivery': {\n      mode: 'app',\n      bean: queueDelivery,\n    },\n    'queue.push': {\n      mode: 'app',\n      bean: queuePush,\n    },\n    'queue.pushDirect': {\n      mode: 'app',\n      bean: queuePushDirect,\n    },\n    // middleware\n    'middleware.connection': {\n      mode: 'ctx',\n      bean: middlewareConnection,\n    },\n    'middleware.packet': {\n      mode: 'ctx',\n      bean: middlewarePacket,\n    },\n    // global\n    io: {\n      mode: 'ctx',\n      bean: beanIO,\n      global: true,\n    },\n  };\n  return beans;\n};\n","module.exports = (/* ctx*/) => {\n  class IOChannelBase {\n\n    async onPush(/* { content, options, message, messageSync, messageClass }*/) {\n      return false;\n    }\n\n  }\n  return IOChannelBase;\n};\n","module.exports = ctx => {\n  class IOMessageBase {\n\n    async onSessionId({ /* path,*/ message /* options*/ }) {\n      const userIdFrom = message.userIdFrom;\n      const userIdTo = message.userIdTo;\n      return message.messageGroup ? userIdTo : this._combineSessionId(userIdFrom, userIdTo);\n    }\n\n    async onGroupUsers(/* { path, message, options }*/) {\n      return null;\n    }\n\n    async onProcess({ path, options, message, groupUsers, messageClass }) {\n      return await ctx.bean.io._onProcessBase({ path, options, message, groupUsers, messageClass });\n    }\n\n    async onPush({ options, message, messageSync, messageClass }) {\n      return await ctx.bean.io.push({ options, message, messageSync, messageClass });\n    }\n\n    async onDelivery({ path, options, message, messageSync, messageClass }) {\n      return await ctx.bean.io.delivery({ path, options, message, messageSync, messageClass });\n    }\n\n    async onChannelRender(/* { channelFullName, options, message, messageSync, messageClass }*/) {\n      return null;\n    }\n\n    async publish({ path, message, messageClass, options }) {\n      return await ctx.bean.io.publish({ path, message, messageClass, options });\n    }\n\n    // combine sessionId\n    _combineSessionId(userIdFrom, userIdTo) {\n      if (userIdFrom === userIdTo) return userIdFrom;\n      return `${userIdFrom > userIdTo ? userIdFrom : userIdTo}:${userIdFrom < userIdTo ? userIdFrom : userIdTo}`;\n    }\n\n  }\n  return IOMessageBase;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {\n    connection: {\n      bean: 'connection',\n      type: 'socketio.connection',\n    },\n    packet: {\n      bean: 'packet',\n      type: 'socketio.packet',\n    },\n  };\n\n  // queues\n  config.queues = {\n    registerMessageClass: {\n      bean: 'registerMessageClass',\n    },\n    process: {\n      bean: 'process',\n      concurrency: true,\n    },\n    delivery: {\n      bean: 'delivery',\n      concurrency: true,\n    },\n    push: {\n      bean: 'push',\n      concurrency: true,\n    },\n    pushDirect: {\n      bean: 'pushDirect',\n      concurrency: true,\n    },\n  };\n\n  // broadcasts\n  config.broadcasts = {\n    socketEmit: {\n      bean: 'socketEmit',\n    },\n  };\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","module.exports = {\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const schemas = {};\n  return schemas;\n};\n","module.exports = app => {\n  class IOController extends app.Controller {\n\n    async subscribe() {\n      const res = await this.service.io.subscribe({\n        subscribes: this.ctx.request.body.subscribes,\n        socketId: this.ctx.request.body.socketId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async unsubscribe() {\n      const res = await this.service.io.unsubscribe({\n        subscribes: this.ctx.request.body.subscribes,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return IOController;\n};\n","module.exports = app => {\n  class MessageController extends app.Controller {\n\n    async offset() {\n      const res = await this.ctx.service.message.offset({\n        messageClass: this.ctx.request.body.messageClass,\n        options: this.ctx.request.body.options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async select() {\n      const options = this.ctx.request.body.options;\n      options.page = this.ctx.bean.util.page(options.page);\n      const items = await this.ctx.service.message.select({\n        messageClass: this.ctx.request.body.messageClass,\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n\n    async count() {\n      const options = this.ctx.request.body.options;\n      const count = await this.ctx.service.message.count({\n        messageClass: this.ctx.request.body.messageClass,\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(count);\n    }\n\n    async setRead() {\n      const res = await this.ctx.service.message.setRead({\n        messageIds: this.ctx.request.body.messageIds,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      const res = await this.ctx.service.message.delete({\n        messageIds: this.ctx.request.body.messageIds,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return MessageController;\n};\n","module.exports = app => {\n  class MessageClassController extends app.Controller {\n\n    async messageClass() {\n      const res = await this.ctx.service.messageClass.messageClass({\n        messageClass: this.ctx.request.body.messageClass,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return MessageClassController;\n};\n","const io = require('./controller/io.js');\nconst messageClass = require('./controller/messageClass.js');\nconst message = require('./controller/message.js');\n\nmodule.exports = app => {\n  const controllers = {\n    io,\n    messageClass,\n    message,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst IOMessageBaseFn = require('./common/ioMessageBase.js');\nconst IOChannelBaseFn = require('./common/ioChannelBase.js');\n\nmodule.exports = app => {\n\n  // base\n  app.meta.IOMessageBase = IOMessageBaseFn;\n  app.meta.IOChannelBase = IOChannelBaseFn;\n\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n\n};\n","module.exports = app => {\n  const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n      },\n    },\n    validation: {\n      validators: {\n      },\n      keywords: {},\n      schemas: {\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  class Message extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aSocketIOMessage', options: { disableDeleted: false } });\n    }\n  }\n  return Message;\n};\n","module.exports = app => {\n  class MessageClass extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aSocketIOMessageClass', options: { disableDeleted: false } });\n    }\n  }\n  return MessageClass;\n};\n","module.exports = app => {\n  class MessageSync extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aSocketIOMessageSync', options: { disableDeleted: false } });\n    }\n  }\n  return MessageSync;\n};\n","const messageClass = require('./model/messageClass.js');\nconst message = require('./model/message.js');\nconst messageSync = require('./model/messageSync.js');\n\nmodule.exports = app => {\n  const models = {\n    messageClass,\n    message,\n    messageSync,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // io\n    { method: 'post', path: 'subscribe', controller: 'io', meta: { auth: { user: true } } },\n    { method: 'post', path: 'unsubscribe', controller: 'io', meta: { auth: { user: true } } },\n    // messageClass\n    { method: 'post', path: 'messageClass/messageClass', controller: 'messageClass', meta: { auth: { user: true } } },\n    // message\n    { method: 'post', path: 'message/offset', controller: 'message', meta: { auth: { user: true } } },\n    { method: 'post', path: 'message/select', controller: 'message', meta: { auth: { user: true } } },\n    { method: 'post', path: 'message/count', controller: 'message', meta: { auth: { user: true } } },\n    { method: 'post', path: 'message/setRead', controller: 'message', meta: { auth: { user: true } } },\n    { method: 'post', path: 'message/delete', controller: 'message', meta: { auth: { user: true } } },\n  ];\n  return routes;\n};\n","module.exports = app => {\n\n  class IO extends app.Service {\n\n    async subscribe({ subscribes, socketId, user }) {\n      return await this.ctx.bean.io.subscribe({ subscribes, socketId, user });\n    }\n\n    async unsubscribe({ subscribes, user }) {\n      return await this.ctx.bean.io.unsubscribe({ subscribes, user });\n    }\n\n  }\n\n  return IO;\n};\n","module.exports = app => {\n\n  class Message extends app.Service {\n\n    async offset({ messageClass, options, user }) {\n      return await this.ctx.bean.io.message.offset({ messageClass, options, user });\n    }\n\n    async select({ messageClass, options, user }) {\n      return await this.ctx.bean.io.message.select({ messageClass, options, user });\n    }\n\n    async count({ messageClass, options, user }) {\n      return await this.ctx.bean.io.message.count({ messageClass, options, user });\n    }\n\n    async setRead({ messageIds, user }) {\n      return await this.ctx.bean.io.message.setRead({ messageIds, user });\n    }\n\n    async delete({ messageIds, user }) {\n      return await this.ctx.bean.io.message.delete({ messageIds, user });\n    }\n\n  }\n\n  return Message;\n};\n","module.exports = app => {\n\n  class MessageClass extends app.Service {\n\n    async messageClass({ messageClass }) {\n      return await this.ctx.bean.io.messageClass.get(messageClass);\n    }\n\n  }\n\n  return MessageClass;\n};\n","const io = require('./service/io.js');\nconst messageClass = require('./service/messageClass.js');\nconst message = require('./service/message.js');\n\nmodule.exports = app => {\n  const services = {\n    io,\n    messageClass,\n    message,\n  };\n  return services;\n};\n","module.exports = require(\"require3\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(421);\n"],"sourceRoot":""}