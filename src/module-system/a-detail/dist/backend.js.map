{"version":3,"sources":["webpack://egg-born-module-a-detail/./backend/src/bean/bean.detail.js","webpack://egg-born-module-a-detail/./backend/src/bean/bean.detailAction.js","webpack://egg-born-module-a-detail/./backend/src/bean/bean.detailClass.js","webpack://egg-born-module-a-detail/./backend/src/bean/local.procedure.js","webpack://egg-born-module-a-detail/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-detail/./backend/src/beans.js","webpack://egg-born-module-a-detail/./backend/src/common/detailBase.js","webpack://egg-born-module-a-detail/./backend/src/config/config.js","webpack://egg-born-module-a-detail/./backend/src/config/constants.js","webpack://egg-born-module-a-detail/./backend/src/config/errors.js","webpack://egg-born-module-a-detail/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-detail/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-detail/./backend/src/config/locales.js","webpack://egg-born-module-a-detail/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-detail/./backend/src/controller/base.js","webpack://egg-born-module-a-detail/./backend/src/controller/detail.js","webpack://egg-born-module-a-detail/./backend/src/controllers.js","webpack://egg-born-module-a-detail/./backend/src/main.js","webpack://egg-born-module-a-detail/./backend/src/meta.js","webpack://egg-born-module-a-detail/./backend/src/model/detail.js","webpack://egg-born-module-a-detail/./backend/src/model/detailClass.js","webpack://egg-born-module-a-detail/./backend/src/models.js","webpack://egg-born-module-a-detail/./backend/src/routes.js","webpack://egg-born-module-a-detail/./backend/src/service/base.js","webpack://egg-born-module-a-detail/./backend/src/service/detail.js","webpack://egg-born-module-a-detail/./backend/src/services.js","webpack://egg-born-module-a-detail/external \"require3\"","webpack://egg-born-module-a-detail/webpack/bootstrap","webpack://egg-born-module-a-detail/webpack/startup"],"names":[],"mappings":";;;;;;AAAA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,kBAAkB,mCAAmC;AACrD;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,8BAA8B,yBAAyB,UAAU,kBAAkB;AACnF;AACA;AACA;AACA,kBAAkB,mCAAmC;AACrD;AACA,OAAO;AACP,aAAa,yBAAyB;AACtC;AACA;AACA,iBAAiB,6BAA6B;AAC9C;AACA,OAAO;AACP;AACA,cAAc;AACd;;AAEA;AACA,gBAAgB,qBAAqB;AACrC;AACA,oEAAoE,yBAAyB;AAC7F;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,UAAU,kBAAkB;AACnF;AACA;AACA;AACA,kBAAkB,kCAAkC;AACpD;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,mDAAmD;AAC9E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,gCAAgC;AACtE;AACA;;AAEA,kBAAkB,oEAAoE;AACtF;AACA;AACA;AACA,wDAAwD,yBAAyB;AACjF;AACA;AACA;;AAEA;AACA,4CAA4C,gDAAgD;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,qBAAqB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,gCAAgC,yBAAyB,UAAU,kBAAkB;AACrF;AACA;AACA;AACA,oBAAoB,6CAA6C;AACjE;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,iBAAiB,sCAAsC;AACvD,gCAAgC,gDAAgD;AAChF;;AAEA;AACA,iBAAiB,mCAAmC;AACpD;AACA,oEAAoE,yBAAyB;AAC7F;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,UAAU,kBAAkB;AACnF;AACA,wCAAwC;AACxC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kBAAkB,2DAA2D;AAC7E;AACA,OAAO;AACP;;AAEA;AACA,kBAAkB,oBAAoB;AACtC,oEAAoE,yBAAyB;AAC7F;AACA;AACA;AACA,2BAA2B,iCAAiC;AAC5D;;AAEA,iBAAiB,YAAY;AAC7B,uCAAuC,2BAA2B;AAClE,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,kBAAkB,YAAY;AAC9B,qCAAqC,6BAA6B;AAClE;;AAEA,oBAAoB,YAAY;AAChC,qCAAqC,+BAA+B;AACpE;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA,qDAAqD,mBAAmB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wDAAwD;AAC7F,qCAAqC,yDAAyD;AAC9F;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA,8BAA8B,yBAAyB,UAAU,kBAAkB;AACnF;AACA;AACA;AACA;AACA,kBAAkB,iCAAiC;AACnD;AACA,OAAO;AACP;;AAEA,kBAAkB,sBAAsB;AACxC,8CAA8C,cAAc;AAC5D;AACA,4CAA4C,mEAAmE;AAC/G;;AAEA,qBAAqB,eAAe,KAAK,EAAE;AAC3C,sDAAsD,KAAK;AAC3D,+CAA+C,cAAc;AAC7D;;AAEA,iCAAiC,SAAS;AAC1C;AACA,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,iCAAiC,6BAA6B;AAC9D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA,8BAA8B,gBAAgB;AAC9C;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,4DAA4D,6BAA6B;AACzF;AACA,kBAAkB,cAAc;AAChC;AACA;;AAEA,0BAA0B,2BAA2B;AACrD,qCAAqC,wBAAwB,cAAc;AAC3E,yCAAyC,wCAAwC;AACjF,OAAO,EAAE;AACT;;AAEA,gCAAgC,6BAA6B;AAC7D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,yBAAyB;AACtD;AACA;;AAEA,wBAAwB,sEAAsE;AAC9F,qCAAqC,wBAAwB,cAAc;AAC3E,uCAAuC,mFAAmF;AAC1H,OAAO,EAAE;AACT;;AAEA,8BAA8B,mFAAmF;AACjH;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,kBAAkB,4BAA4B;AAC9C;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,+BAA+B,iCAAiC;AAChE,SAAS;AACT;AACA;AACA,0BAA0B;AAC1B,2BAA2B;AAC3B,kCAAkC,6GAA6G;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,gCAAgC,oGAAoG;AACpI;AACA;;AAEA;AACA,uBAAuB,6GAA6G;AACpI;AACA;AACA,gEAAgE,4BAA4B;AAC5F;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,UAAU,kBAAkB;AACnF;AACA;AACA,qCAAqC,sDAAsD;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA,0BAA0B,mBAAmB,GAAG,0BAA0B;AAC1E,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAmE;AACrF;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA,uEAAuE,kBAAkB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,mBAAmB,qBAAqB;AACxC;AACA;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;AACA;;AAEA,gBAAgB,6CAA6C;AAC7D;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,iBAAiB,sBAAsB,6BAA6B,2CAA2C;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,+CAA+C;AAClE,kCAAkC,4DAA4D;AAC9F;;AAEA,uBAAuB,+CAA+C;AACtE,kCAAkC,2DAA2D;AAC7F;;AAEA,oBAAoB,qDAAqD;AACzE;AACA;AACA,sDAAsD,aAAa;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,0DAA0D;AAC1G,WAAW;AACX,kDAAkD,0DAA0D;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,0DAA0D;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,mBAAmB;AAC9E;AACA,oCAAoC,8CAA8C;AAClF;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA,OAAO;AACP;;AAEA,6BAA6B,0DAA0D;AACvF;AACA,sDAAsD,uBAAuB;AAC7E,mDAAmD,6FAA6F;AAChJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,mBAAmB;AAChF;AACA,sCAAsC,8CAA8C;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,uBAAuB,gDAAgD;AACvE;AACA;AACA;AACA,wDAAwD,SAAS;AACjE;AACA;AACA,uDAAuD,yFAAyF;AAChJ;AACA,sDAAsD,aAAa;AACnE;AACA;AACA;AACA;AACA,2CAA2C,0DAA0D;AACrG;AACA;AACA,2CAA2C,0DAA0D;AACrG;;AAEA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,eAAe;AAClE;AACA;AACA;AACA,gEAAgE,WAAW;AAC3E;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACrtBA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,sCAAsC;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACtEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,0BAA0B;AAC3C;AACA;AACA;;AAEA,eAAe,8BAA8B;AAC7C;AACA,yBAAyB,KAAK,IAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA,sBAAsB,0BAA0B;AAChD;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,yBAAyB,0BAA0B;AACnD;AACA,wCAAwC,0BAA0B;AAClE;AACA;AACA,0CAA0C,0BAA0B;AACpE,qDAAqD,OAAO,GAAG,gBAAgB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACvHA;AACA;;AAEA,mBAAmB,oDAAoD;AACvE;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gCAAgC,MAAM;AACtC;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;AACA;AACA,cAAc;;AAEd,YAAY;AACZ;AACA,qCAAqC,IAAI,mBAAmB;AAC5D;;AAEA,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA,eAAe,2BAA2B;AAC1C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;;AAEd,uBAAuB;AACvB,wCAAwC;AACxC;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;ACnIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACxDA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,mBAAmB,mBAAO,CAAC,GAAuB;AAClD,wBAAwB,mBAAO,CAAC,EAA4B;AAC5D,yBAAyB,mBAAO,CAAC,GAA6B;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACpCA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,mCAAmC;AACrD;AACA;AACA;AACA;AACA;AACA,6BAA6B,wBAAwB,GAAG,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,uBAAuB;AAC3E;AACA,wDAAwD,2CAA2C;AACnG,cAAc;AACd;;AAEA,gBAAgB,kCAAkC;AAClD;AACA,8CAA8C,gDAAgD;AAC9F;;AAEA,qBAAqB,8CAA8C;AACnE;AACA;;AAEA,kBAAkB,uCAAuC;AACzD;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA,OAAO;AACP;;AAEA,iBAAiB,gDAAgD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,mCAAmC;AACrF;AACA;AACA,+BAA+B,6BAA6B;AAC5D;;AAEA,wBAAwB,6BAA6B;AACrD;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,eAAe;AACzD;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC/FA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,6BAA6B;AAC9C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;AClGA;AACA;AACA;;;;;;;;ACFA;AACA;;;;;;;;ACDA;AACA;;;;;;;;ACDA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;ACHA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACZA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;;AC1HA,aAAa,mBAAO,CAAC,GAAsB;AAC3C,eAAe,mBAAO,CAAC,GAAwB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;AAC3C,qBAAqB,mBAAO,CAAC,GAAwB;;AAErD;;AAEA;AACA;;AAEA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,oBAAoB,mBAAO,CAAC,GAAuB;AACnD;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACtCA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP,kBAAkB;AAClB;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC5BA;;AAEA;;AAEA;AACA,kBAAkB,6BAA6B,wBAAwB,EAAE;AACzE;;AAEA;;AAEA;AACA;;;;;;;;ACXA;;AAEA;;AAEA;AACA,kBAAkB,kCAAkC,wBAAwB,EAAE;AAC9E;;AAEA;;AAEA;AACA;;;;;;;;ACXA,eAAe,mBAAO,CAAC,GAAmB;AAC1C,oBAAoB,mBAAO,CAAC,GAAwB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA,KAAK,2DAA2D;AAChE;AACA,KAAK;AACL,aAAa,SAAS,4BAA4B,EAAE;AACpD,KAAK;AACL,KAAK;AACL,aAAa,SAAS,4BAA4B,EAAE;AACpD,KAAK;AACL,KAAK;AACL,aAAa,SAAS,4BAA4B,EAAE;AACpD,KAAK;AACL,KAAK;AACL,aAAa,SAAS,4BAA4B,EAAE;AACpD,KAAK;AACL,KAAK;AACL,aAAa,SAAS,4BAA4B,EAAE;AACpD,KAAK;AACL,KAAK;AACL,aAAa,SAAS,4BAA4B,EAAE;AACpD,KAAK;AACL,KAAK;AACL,aAAa,SAAS,4BAA4B,EAAE;AACpD,KAAK;AACL,KAAK;AACL,aAAa,SAAS,4BAA4B,EAAE;AACpD,KAAK;AACL,KAAK;AACL,aAAa,SAAS,4BAA4B,EAAE;AACpD,KAAK;AACL,KAAK,+DAA+D;AACpE,KAAK,mEAAmE;AACxE,KAAK,iEAAiE;AACtE;AACA;AACA;;;;;;;;ACrCA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACXA;;AAEA;;AAEA,kBAAkB,mCAAmC;AACrD,gDAAgD,mCAAmC;AACnF;;AAEA,gBAAgB,qBAAqB;AACrC,8CAA8C,qBAAqB;AACnE;;AAEA,kBAAkB,sCAAsC;AACxD,gDAAgD,sCAAsC;AACtF;;AAEA,iBAAiB,sCAAsC;AACvD,+CAA+C,sCAAsC;AACrF;;AAEA,iBAAiB,2BAA2B;AAC5C,+CAA+C,2BAA2B;AAC1E;;AAEA,kBAAkB,YAAY;AAC9B,gDAAgD,YAAY;AAC5D;;AAEA,iBAAiB,YAAY;AAC7B,+CAA+C,YAAY;AAC3D;;AAEA,kBAAkB,YAAY;AAC9B,gDAAgD,YAAY;AAC5D;;AAEA,oBAAoB,YAAY;AAChC,kDAAkD,YAAY;AAC9D;;AAEA,mBAAmB,+CAA+C;AAClE,iDAAiD,+CAA+C;AAChG;;AAEA,uBAAuB,+CAA+C;AACtE,qDAAqD,+CAA+C;AACpG;;AAEA,qBAAqB,cAAc;AACnC,mDAAmD,cAAc;AACjE;;AAEA;;AAEA;AACA;;;;;;;;ACvDA,aAAa,mBAAO,CAAC,GAAmB;AACxC,eAAe,mBAAO,CAAC,GAAqB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACTA,sC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UCrBA;UACA;UACA;UACA","file":"backend.js","sourcesContent":["const require3 = require('require3');\nconst uuid = require3('uuid');\nconst mparse = require3('egg-born-mparse').default;\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Detail extends ctx.app.meta.BeanModuleBase {\n\n    constructor(moduleName) {\n      super(ctx, 'detail');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get detailClass() {\n      return ctx.bean.detailClass.module(this.moduleName);\n    }\n\n    get modelDetail() {\n      return ctx.model.module(moduleInfo.relativeName).detail;\n    }\n\n    get sqlProcedure() {\n      return ctx.bean._getBean(moduleInfo.relativeName, 'local.procedure');\n    }\n\n    async getDetailClassId({ module, detailClassName }) {\n      const res = await this.detailClass.get({\n        module,\n        detailClassName,\n      });\n      return res.id;\n    }\n\n    async create({ atomKey, detailClass, item, user }) {\n      // detailClass\n      detailClass = await ctx.bean.detailClass.get(detailClass);\n      // item\n      item = item || { };\n      // detail bean\n      const _moduleInfo = mparse.parseInfo(detailClass.module);\n      const _detailClass = ctx.bean.detailClass.detailClass(detailClass);\n      const beanFullName = `${_moduleInfo.relativeName}.detail.${_detailClass.bean}`;\n      const res = await ctx.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { atomKey, detailClass, item, user },\n        fn: 'create',\n      });\n      const { detailId, detailItemId } = res;\n      // save detailItemId\n      await this._update({\n        detail: { id: detailId, detailItemId },\n        user,\n      });\n      // ok: detailKey\n      return { detailId, detailItemId };\n    }\n\n    // read\n    async read({ key, options, user }) {\n      // detailClass\n      const detailClass = await ctx.bean.detailClass.getByDetailId({ detailId: key.detailId });\n      if (!detailClass) ctx.throw.module('a-base', 1002);\n      // detail bean\n      const _moduleInfo = mparse.parseInfo(detailClass.module);\n      const _detailClass = ctx.bean.detailClass.detailClass(detailClass);\n      const beanFullName = `${_moduleInfo.relativeName}.detail.${_detailClass.bean}`;\n      const item = await ctx.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { detailClass, options, key, user },\n        fn: 'read',\n      });\n      // ok\n      return item;\n    }\n\n    // readByStaticKey\n    //   atomKey or atomStage must be set\n    async readByStaticKey({ atomKey, detailClass, detailStaticKey, atomStage }) {\n      const options = {\n        mode: 'full',\n        stage: atomStage,\n        where: {\n          'a.detailStaticKey': detailStaticKey,\n        },\n      };\n      const list = await this.select({ atomKey, detailClass, options });\n      return list[0];\n    }\n\n    async select({ atomKey, detailClass, options, user, pageForce = false, count = 0 }) {\n      // detailClass\n      if (!detailClass) {\n        // use default detail\n        detailClass = await this.getDetailClassDefault({ atomId: atomKey.atomId });\n      }\n      detailClass = await ctx.bean.detailClass.get(detailClass);\n      const _detailClass = await ctx.bean.detailClass.detailClass(detailClass);\n\n      // tableName\n      const tableName = this._getTableName({ detailClass: _detailClass, mode: options.mode });\n      // 'where' should append atomClassId for safe\n      if (!options.where) options.where = {};\n      // atomKey maybe nulll\n      if (atomKey) {\n        options.where['a.atomId'] = atomKey.atomId;\n      }\n      options.where['a.detailClassId'] = detailClass.id;\n      // atomStage\n      if (options.stage === undefined) {\n        // atom\n        const atom = await ctx.bean.atom.modelAtom.get({ id: atomKey.atomId });\n        options.stage = atom.atomStage;\n      }\n      // orders\n      if (!options.orders || options.orders.length === 0) {\n        options.orders = [\n          [ 'a.detailLineNo', 'asc' ],\n        ];\n      }\n      // select\n      const items = await this._list({\n        tableName,\n        options,\n        user,\n        pageForce,\n        count,\n      });\n      // select items\n      if (!count) {\n        const _moduleInfo = mparse.parseInfo(detailClass.module);\n        const beanFullName = `${_moduleInfo.relativeName}.detail.${_detailClass.bean}`;\n        await ctx.executeBean({\n          beanModule: _moduleInfo.relativeName,\n          beanFullName,\n          context: { atomKey, detailClass, options, items, user },\n          fn: 'select',\n        });\n      }\n      // ok\n      return items;\n    }\n\n    async count({ atomKey, detailClass, options, user }) {\n      return await this.select({ atomKey, detailClass, options, user, count: 1 });\n    }\n\n    // write\n    async write({ key, target, item, options, user }) {\n      // detailClass\n      const detailClass = await ctx.bean.detailClass.getByDetailId({ detailId: key.detailId });\n      if (!detailClass) ctx.throw.module('a-base', 1002);\n      if (!key.detailItemId) key.detailItemId = detailClass.detailItemId;\n      // detail bean\n      const _moduleInfo = mparse.parseInfo(detailClass.module);\n      const _detailClass = ctx.bean.detailClass.detailClass(detailClass);\n      const beanFullName = `${_moduleInfo.relativeName}.detail.${_detailClass.bean}`;\n      // item draft\n      const itemDraft = Object.assign({}, item, {\n        detailId: key.detailId,\n        detailItemId: key.detailItemId,\n        atomStage: ctx.constant.module('a-base').atom.stage.draft,\n      });\n      await ctx.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { detailClass, target, key, item: itemDraft, options, user },\n        fn: 'write',\n      });\n    }\n\n    // delete\n    async delete({ key, target, user }) {\n      const detailClass = await ctx.bean.detailClass.getByDetailId({ detailId: key.detailId });\n      if (!detailClass) ctx.throw.module('a-base', 1002);\n      if (!key.detailItemId) key.detailItemId = detailClass.detailItemId;\n      // delete\n      await this._delete2({ detailClass, key, target, user });\n    }\n\n    async clone({ key, user }) {\n      const srcItem = await this.read({ key, options: null, user });\n      const srcKeyAtom = { atomId: srcItem.atomId };\n      const destKeyAtom = srcKeyAtom;\n      const keyDest = await this._copyDetail({\n        srcKey: key,\n        srcItem,\n        destKey: null,\n        detailClass: null,\n        atomClass: null,\n        target: 'clone',\n        srcKeyAtom,\n        destKeyAtom,\n        destAtom: null,\n        options: null,\n        user,\n      });\n      // ok\n      return keyDest;\n    }\n\n    async moveUp({ key, user }) {\n      return await this._moveLineNo({ key, user, direction: 'up' });\n    }\n\n    async moveDown({ key, user }) {\n      return await this._moveLineNo({ key, user, direction: 'down' });\n    }\n\n    async _moveLineNo({ key, user, direction }) {\n      // from\n      const detailFrom = await this.modelDetail.get({ id: key.detailId });\n      // sql\n      let sql;\n      if (direction === 'up') {\n        sql = `select a.id,a.detailLineNo from aDetail a\n          where a.iid=? and a.deleted=0 and a.atomId=? and a.detailClassId=? and a.detailLineNo<?\n          order by detailLineNo desc`;\n      } else {\n        sql = `select a.id,a.detailLineNo from aDetail a\n          where a.iid=? and a.deleted=0 and a.atomId=? and a.detailClassId=? and a.detailLineNo>?\n          order by detailLineNo asc`;\n      }\n      // to\n      const detailTo = await ctx.model.queryOne(sql, [\n        ctx.instance.id, detailFrom.atomId, detailFrom.detailClassId, detailFrom.detailLineNo,\n      ]);\n      if (!detailTo) {\n        // do nothing\n        return null;\n      }\n      // switch\n      await this.modelDetail.update({ id: key.detailId, detailLineNo: detailTo.detailLineNo });\n      await this.modelDetail.update({ id: detailTo.id, detailLineNo: detailFrom.detailLineNo });\n      // ok\n      return {\n        from: key.detailId,\n        to: detailTo.id,\n      };\n    }\n\n    async _delete2({ detailClass, key, target, user }) {\n      // detail bean\n      const _moduleInfo = mparse.parseInfo(detailClass.module);\n      const _detailClass = ctx.bean.detailClass.detailClass(detailClass);\n      const beanFullName = `${_moduleInfo.relativeName}.detail.${_detailClass.bean}`;\n      // delete\n      await ctx.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { detailClass, target, key, user },\n        fn: 'delete',\n      });\n    }\n\n    async schema({ detailClass, schema }) {\n      const validator = await this.validator({ detailClass });\n      if (!validator) return null;\n      return ctx.bean.validation.getSchema({ module: validator.module, validator: validator.validator, schema });\n    }\n\n    async validator({ detailClass: { id } }) {\n      const detailClass = await this.detailClass.get({ id });\n      return await this.detailClass.validator({ detailClass });\n    }\n\n    async getDetailClassDefault({ atomId }) {\n      // use default\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId });\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      const detailDefault = _atomClass.details && _atomClass.details[0];\n      if (!detailDefault) return null;\n      return this._prepareDetailClassFromName({\n        atomClass, detailClassName: detailDefault,\n      });\n    }\n\n    _prepareDetailClassFromName({ atomClass, detailClassName }) {\n      return (typeof detailClassName === 'string') ? {\n        module: atomClass.module,\n        detailClassName,\n      } : {\n        module: detailClassName.module || atomClass.module,\n        detailClassName: detailClassName.detailClassName,\n      };\n    }\n\n    async _loopDetailClasses({ atomClass, fn }) {\n      // all details of atom\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      const detailClassNames = _atomClass.details;\n      if (!detailClassNames) return; // do nothing\n      // loop\n      for (const detailClassName of detailClassNames) {\n        let detailClass = this._prepareDetailClassFromName({ atomClass, detailClassName });\n        detailClass = await this.detailClass.get(detailClass);\n        await fn({ detailClass });\n      }\n    }\n\n    async _deleteDetails({ atomClass, atomKey, user }) {\n      await this._loopDetailClasses({ atomClass, fn: async ({ detailClass }) => {\n        await this._deleteDetails_Class({ detailClass, atomClass, atomKey, user });\n      } });\n    }\n\n    async _deleteDetails_Class({ detailClass, atomKey, user }) {\n      // details\n      const details = await this.modelDetail.select({\n        where: {\n          atomId: atomKey.atomId,\n          detailClassId: detailClass.id,\n        },\n      });\n      // loop\n      for (const detail of details) {\n        // delete\n        const key = { detailId: detail.id, detailItemId: detail.detailItemId };\n        await this._delete2({ detailClass, key, user });\n      }\n    }\n\n    async _copyDetails({ atomClass, target, srcKeyAtom, destKeyAtom, destAtom, options, user }) {\n      await this._loopDetailClasses({ atomClass, fn: async ({ detailClass }) => {\n        await this._copyDetails_Class({ detailClass, atomClass, target, srcKeyAtom, destKeyAtom, destAtom, options, user });\n      } });\n    }\n\n    async _copyDetails_Class({ detailClass, atomClass, target, srcKeyAtom, destKeyAtom, destAtom, options, user }) {\n      // details dest\n      const detailsDest = await this.modelDetail.select({\n        where: {\n          atomId: destKeyAtom.atomId,\n          detailClassId: detailClass.id,\n        },\n      });\n      // details src\n      const detailsSrc = await this.select({\n        atomKey: { atomId: srcKeyAtom.atomId },\n        detailClass,\n        options: {\n          mode: 'full',\n        },\n        user,\n      });\n      // loop\n      for (const detailDest of detailsDest) {\n        const indexSrc = detailsSrc.findIndex(item => item.detailStaticKey === detailDest.detailStaticKey);\n        if (indexSrc === -1) {\n          // delete\n          const key = { detailId: detailDest.id, detailItemId: detailDest.detailItemId };\n          await this._delete2({ detailClass, key, target, user });\n        } else {\n          // write\n          const srcItem = detailsSrc[indexSrc];\n          const srcKey = { detailId: srcItem.detailId, detailItemId: srcItem.detailItemId };\n          const destKey = { detailId: detailDest.id, detailItemId: detailDest.detailItemId };\n          await this._copyDetail({ srcKey, srcItem, destKey, detailClass, atomClass, target, srcKeyAtom, destKeyAtom, destAtom, options, user });\n          // delete src\n          detailsSrc.splice(indexSrc, 1);\n        }\n      }\n      // append the remains\n      for (const srcItem of detailsSrc) {\n        const srcKey = { detailId: srcItem.detailId, detailItemId: srcItem.detailItemId };\n        await this._copyDetail({ srcKey, srcItem, detailClass, atomClass, target, srcKeyAtom, destKeyAtom, destAtom, options, user });\n      }\n    }\n\n    // target: draft/formal/history/clone\n    async _copyDetail({ srcKey, srcItem, destKey, detailClass, atomClass, target, srcKeyAtom, destKeyAtom, destAtom, options, user }) {\n      // detailClass\n      if (!detailClass) {\n        detailClass = await ctx.bean.detailClass.getByDetailId({ detailId: srcKey.detailId });\n      }\n      // detail bean\n      const _moduleInfo = mparse.parseInfo(detailClass.module);\n      const _detailClass = ctx.bean.detailClass.detailClass(detailClass);\n      const beanFullName = `${_moduleInfo.relativeName}.detail.${_detailClass.bean}`;\n      // destKey\n      if (!destKey) {\n        destKey = await this.create({ atomKey: destKeyAtom, detailClass, item: null, user });\n      }\n      // atomStage\n      const atomStage = ctx.constant.module('a-base').atom.stage[target] || 0;\n      // detail\n      let userIdUpdated = srcItem.userIdUpdated;\n      let userIdCreated = srcItem.userIdCreated || userIdUpdated;\n      const detailCodeId = srcItem.detailCodeId;\n      const detailCode = srcItem.detailCode;\n      let detailName = srcItem.detailName;\n      const detailLineNo = srcItem.detailLineNo;\n      let detailStatic = srcItem.detailStatic;\n      let detailStaticKey = srcItem.detailStaticKey;\n      if (target === 'draft') {\n        userIdUpdated = user.id;\n      } else if (target === 'formal') {\n        // do nothing\n      } else if (target === 'history') {\n        // do nothing\n      } else if (target === 'clone') {\n        userIdUpdated = user.id;\n        userIdCreated = user.id;\n        if (srcKeyAtom.atomId === destKeyAtom.atomId) {\n          detailName = `${srcItem.detailName}-${ctx.text('CloneCopyText')}`;\n        } else {\n          detailName = srcItem.detailName;\n        }\n        detailStatic = 0;\n        if (detailStaticKey) {\n          detailStaticKey = uuid.v4().replace(/-/g, '');\n        }\n      }\n      // destItem\n      const destItem = Object.assign({}, srcItem, {\n        atomId: destKeyAtom.atomId,\n        atomStage,\n        detailId: destKey.detailId,\n        detailItemId: destKey.detailItemId,\n        userIdCreated,\n        userIdUpdated,\n        detailCodeId,\n        detailCode,\n        detailName,\n        detailLineNo,\n        detailStatic,\n        detailStaticKey,\n        createdAt: srcItem.atomCreatedAt,\n        updatedAt: srcItem.atomUpdatedAt,\n      });\n      // update fields\n      const params = {\n        id: destItem.detailId,\n        userIdCreated: destItem.userIdCreated,\n        userIdUpdated: destItem.userIdUpdated,\n        //   see also: detailBase\n        // detailCodeId: destItem.detailCodeId,\n        // detailCode: destItem.detailCode,\n        // detailName: destItem.detailName,\n        // detailStatic: destItem.detailStatic,\n        // detailStaticKey: destItem.detailStaticKey,\n        atomStage: destItem.atomStage,\n        createdAt: destItem.detailCreatedAt,\n        updatedAt: destItem.detailUpdatedAt,\n      };\n      if (target !== 'clone') {\n        params.detailLineNo = destItem.detailLineNo;\n      }\n      await this.modelDetail.update(params);\n      // detail write\n      await ctx.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { detailClass, target, key: destKey, item: destItem, options, user },\n        fn: 'write',\n      });\n      // detail copy\n      await ctx.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: {\n          detailClass, target, srcKey, srcItem, destKey, destItem, options, user,\n          atomClass, srcKeyAtom, destKeyAtom, destAtom,\n        },\n        fn: 'copy',\n      });\n      // ok\n      return destKey;\n    }\n\n    // detail\n\n    async _add({\n      atomKey,\n      detailClass: { id, detailClassName },\n      detail: {\n        detailItemId, detailName, detailLineNo,\n        detailStatic = 0, detailStaticKey = null,\n      },\n      user,\n    }) {\n      let detailClassId = id;\n      if (!detailClassId) detailClassId = await this.getDetailClassId({ detailClassName });\n      const res = await this.modelDetail.insert({\n        atomId: atomKey.atomId,\n        detailItemId,\n        detailClassId,\n        detailName,\n        detailLineNo,\n        detailStatic,\n        detailStaticKey,\n        userIdCreated: user.id,\n        userIdUpdated: user.id,\n      });\n      return res.insertId;\n    }\n\n    async _update({ detail/* , user,*/ }) {\n      await this.modelDetail.update(detail);\n    }\n\n    async _delete({ detail /* user,*/ }) {\n      // aDetail\n      await this.modelDetail.delete(detail);\n    }\n\n    async _get({ detailClass, options, key, mode/* , user*/ }) {\n      if (!options) options = {};\n      //\n      const _detailClass = await ctx.bean.detailClass.detailClass(detailClass);\n      const tableName = this._getTableName({ detailClass: _detailClass, mode });\n      const sql = this.sqlProcedure.getDetail({\n        iid: ctx.instance.id,\n        tableName, detailId: key.detailId,\n      });\n      return await ctx.model.queryOne(sql);\n    }\n\n    async _list({ tableName, options: { where, orders, page, stage }, /* user,*/ pageForce = false, count = 0 }) {\n      page = ctx.bean.util.page(page, pageForce);\n      stage = typeof stage === 'number' ? stage : ctx.constant.module('a-base').atom.stage[stage];\n      const sql = this.sqlProcedure.selectDetails({\n        iid: ctx.instance.id,\n        tableName, where, orders, page,\n        count,\n        stage,\n      });\n      const res = await ctx.model.query(sql);\n      return count ? res[0]._count : res;\n    }\n\n    _getTableName({ detailClass, mode }) {\n      const tableNameModes = detailClass.tableNameModes || {};\n      // not support search\n      // if (mode === 'search') {\n      //   return tableNameModes.search || tableNameModes.full || tableNameModes.default || detailClass.tableName;\n      // }\n      return tableNameModes[mode] || tableNameModes.default || detailClass.tableName;\n    }\n\n    // right\n\n    async actions({ flowTaskId, atomKey, detailClass, mode, user }) {\n      return await this._actions({ flowTaskId, atomKey, detailClass, mode, user, bulk: false });\n    }\n\n    async actionsBulk({ flowTaskId, atomKey, detailClass, mode, user }) {\n      return await this._actions({ flowTaskId, atomKey, detailClass, mode, user, bulk: true });\n    }\n\n    async _actions({ flowTaskId, atomKey, detailClass, mode, user, bulk }) {\n      // atom\n      const atomId = atomKey.atomId;\n      const atom = await ctx.bean.atom.modelAtom.get({ id: atomId });\n      // actionsAll\n      let actionsAll = ctx.bean.detailAction.actions();\n      actionsAll = actionsAll[detailClass.module][detailClass.detailClassName];\n      // actions of mode\n      let _actions = [];\n      for (const name in actionsAll) {\n        const action = actionsAll[name];\n        if (action.authorize === false) continue;\n        if ((!!action.bulk) === bulk && (!action.mode || action.mode === mode)) {\n          _actions.push(action);\n        }\n      }\n      // sort\n      _actions = _actions.sort((a, b) => a.code - b.code);\n      // inherit: read/others\n      const res = [];\n      const rights = [];\n      for (const actionBase of _actions) {\n        let right = rights[actionBase.inherit];\n        if (right === undefined) {\n          if (actionBase.inherit === 'read') {\n            right = await this._checkRightRead({ flowTaskId, detailClass, atomId, atom, actionBase, user });\n          } else {\n            right = await this._checkRightAction({ flowTaskId, detailClass, atomId, atom, actionBase, user });\n          }\n          rights[actionBase.inherit] = right;\n        }\n        if (right) {\n          res.push({\n            ...actionBase,\n            module: detailClass.module,\n            detailClassName: detailClass.detailClassName,\n          });\n        }\n      }\n      // ok\n      return res;\n    }\n\n    _checkSchemaValid({ schema, detailClass }) {\n      for (const key in schema.properties) {\n        const property = schema.properties[key];\n        if (property.ebType === 'details' &&\n          property.ebParams.detailClass.module === detailClass.module &&\n          property.ebParams.detailClass.detailClassName === detailClass.detailClassName) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    async _checkRightRead({ flowTaskId, detailClass, atomId, atom, actionBase, user }) {\n      // special check for stage\n      if (actionBase.stage) {\n        const stages = actionBase.stage.split(',');\n        if (!stages.some(item => ctx.constant.module('a-base').atom.stage[item] === atom.atomStage)) return false;\n      }\n      // todo: special check for flow\n      if (atom.atomStage === 0 && atom.atomFlowId > 0) {\n        if (!flowTaskId) throw new Error('should specify the flowTaskId of detail');\n        const viewAtom = await ctx.bean.flowTask.viewAtom({ flowTaskId, user });\n        if (!viewAtom) ctx.throw(403);\n        if (this._checkSchemaValid({ schema: viewAtom.schema.schema, detailClass })) return true;\n        // default is false\n        return false;\n      }\n      // atom read\n      return !!await ctx.bean.atom.checkRightRead({\n        atom: { id: atomId },\n        user,\n        checkFlow: false,\n      });\n    }\n\n    async _checkRightAction({ flowTaskId, detailClass, atomId, atom, actionBase, user }) {\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.get({ id: atom.atomClassId });\n      const atomActionBase = ctx.bean.base.action({ module: atomClass.module, atomClassName: atomClass.atomClassName, name: actionBase.inherit });\n      // special check for stage\n      if (actionBase.stage) {\n        const stages = actionBase.stage.split(',');\n        if (!stages.some(item => ctx.constant.module('a-base').atom.stage[item] === atom.atomStage)) return false;\n      }\n      // special check write for flow\n      if (actionBase.inherit === 'write') {\n        if (atom.atomStage === 0 && atom.atomFlowId > 0) {\n          if (!flowTaskId) throw new Error('should specify the flowTaskId of detail');\n          const editAtom = await ctx.bean.flowTask.editAtom({ flowTaskId, user });\n          if (!editAtom) ctx.throw(403);\n          if (this._checkSchemaValid({ schema: editAtom.schema.schema, detailClass })) return true;\n          // default is false\n          return false;\n        }\n      }\n      // atom action\n      return !!await ctx.bean.atom.checkRightAction({\n        atom: { id: atomId },\n        action: atomActionBase.code,\n        // need not set stage\n        // stage,\n        user,\n        checkFlow: false,\n      });\n    }\n\n    async _checkRight({ flowTaskId, atomId, detailClass, action, user }) {\n      // detailClass\n      if (!detailClass) {\n        // use default detail\n        detailClass = await this.getDetailClassDefault({ atomId });\n      }\n      // actionBase\n      const actionBase = ctx.bean.detailAction.action({ module: detailClass.module, detailClassName: detailClass.detailClassName, code: action });\n      // atom\n      const atom = await ctx.bean.atom.modelAtom.get({ id: atomId });\n      // inherit\n      const inherit = actionBase.inherit;\n      // read\n      if (inherit === 'read') {\n        return await this._checkRightRead({ flowTaskId, detailClass, atomId, atom, actionBase, user });\n      }\n      // write or others\n      return await this._checkRightAction({ flowTaskId, detailClass, atomId, atom, actionBase, user });\n    }\n\n    // right\n    async _checkRightForMiddleware({ options }) {\n      // atomId/detailClass\n      let atomId;\n      let detailClass;\n      // check key first\n      const key = ctx.request.body.key;\n      if (key) {\n        const detailId = key.detailId;\n        const detail = await this.modelDetail.get({ id: detailId });\n        if (!detail) ctx.throw(403);\n        atomId = detail.atomId;\n        // detailClass\n        detailClass = await ctx.bean.detailClass.getByDetailId({ detailId });\n        if (!detailClass) ctx.throw.module('a-base', 1002);\n        // for safe\n        if (ctx.request.body.atomKey) {\n          ctx.request.body.atomKey = { atomId };\n        }\n        if (ctx.request.body.detailClass) {\n          ctx.request.body.detailClass = detailClass;\n        }\n      } else {\n        // atomKey must be set\n        atomId = ctx.request.body.atomKey && ctx.request.body.atomKey.atomId;\n        if (!atomId) ctx.throw(403);\n        // detailClass maybe empty\n        detailClass = ctx.request.body.detailClass;\n      }\n      // flowTaskId\n      const flowTaskId = ctx.request.body.flowTaskId;\n      // check\n      const res = await this._checkRight({\n        flowTaskId,\n        atomId,\n        detailClass,\n        action: options.action,\n        user: ctx.state.user.op,\n      });\n      if (!res) ctx.throw(403);\n    }\n\n  }\n\n  return Detail;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nconst _actions = {};\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class DetailAction extends ctx.app.meta.BeanModuleBase {\n\n    constructor(moduleName) {\n      super(ctx, 'detailAction');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    actions() {\n      if (!_actions[ctx.locale]) {\n        _actions[ctx.locale] = this._prepareActions();\n      }\n      return _actions[ctx.locale];\n    }\n\n    action({ module, detailClassName, code, name }) {\n      const _actions = this.actions();\n      const actions = _actions[module][detailClassName];\n      if (name) return actions[name];\n      const key = Object.keys(actions).find(key => actions[key].code === code);\n      return actions[key];\n    }\n\n    _prepareActions() {\n      const actions = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        const details = ctx.bean.util.getProperty(module, 'main.meta.detail.details');\n        if (details) {\n          const res = {};\n          for (const detailClassName in details) {\n            const res2 = this._prepareActionsDetailClass(module, details[detailClassName]);\n            if (Object.keys(res2).length > 0) {\n              res[detailClassName] = res2;\n            }\n          }\n          if (Object.keys(res).length > 0) {\n            actions[relativeName] = res;\n          }\n        }\n      }\n      return actions;\n    }\n\n    _prepareActionsDetailClass(module, detailClass) {\n      const actions = {};\n      const _actions = detailClass.actions;\n      const _actionsSystem = ctx.constant.module(moduleInfo.relativeName).detail.action;\n      const _actionsSystemMeta = ctx.constant.module(moduleInfo.relativeName).detail.actionMeta;\n      const _actionsAll = extend(true, {}, _actionsSystemMeta, _actions);\n      for (const key in _actionsAll) {\n        if (key === 'custom') continue;\n        const action = _actionsAll[key];\n        if (!action.code) action.code = _actionsSystem[key];\n        action.name = key;\n        action.titleLocale = ctx.text(action.title);\n        actions[key] = action;\n      }\n      return actions;\n    }\n\n  }\n\n  return DetailAction;\n};\n","const _detailClasses = {};\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class DetailClass extends ctx.app.meta.BeanModuleBase {\n\n    constructor(moduleName) {\n      super(ctx, 'detailClass');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get model() {\n      return ctx.model.module(moduleInfo.relativeName).detailClass;\n    }\n\n    detailClasses() {\n      if (!_detailClasses[ctx.locale]) {\n        _detailClasses[ctx.locale] = this._prepareDetailClasses();\n      }\n      return _detailClasses[ctx.locale];\n    }\n\n    detailClass({ module, detailClassName }) {\n      const _detailClasses = this.detailClasses();\n      return _detailClasses[module] && _detailClasses[module][detailClassName];\n    }\n\n    async get({ id, module, detailClassName }) {\n      module = module || this.moduleName;\n      const data = id ? { id } : { module, detailClassName };\n      const res = await this.model.get(data);\n      if (res) return res;\n      if (!module || !detailClassName) ctx.throw.module('a-base', 1011);\n      // lock\n      return await ctx.app.meta.util.lock({\n        subdomain: ctx.subdomain,\n        resource: `${moduleInfo.relativeName}.detailClass.register`,\n        fn: async () => {\n          return await ctx.app.meta.util.executeBean({\n            subdomain: ctx.subdomain,\n            beanModule: moduleInfo.relativeName,\n            beanFullName: 'detailClass',\n            context: { module, detailClassName },\n            fn: '_registerLock',\n          });\n        },\n      });\n    }\n\n    async _registerLock({ module, detailClassName }) {\n      // get\n      const res = await this.model.get({ module, detailClassName });\n      if (res) return res;\n      // data\n      const atomClass = this.detailClass({ module, detailClassName });\n      if (!atomClass) throw new Error(`detailClass ${module}:${detailClassName} not found!`);\n      const data = {\n        module,\n        detailClassName,\n      };\n      // insert\n      const res2 = await this.model.insert(data);\n      data.id = res2.insertId;\n      return data;\n    }\n\n    async getByDetailId({ detailId }) {\n      const res = await this.model.query(`\n        select a.*,b.id as detailId,b.detailItemId from aDetailClass a\n          left join aDetail b on a.id=b.detailClassId\n            where b.iid=? and b.id=?\n        `, [ ctx.instance.id, detailId ]);\n      return res[0];\n    }\n\n    async validator({ detailClass }) {\n      // default\n      const _module = ctx.app.meta.modules[detailClass.module];\n      const validator = _module.main.meta.detail.details[detailClass.detailClassName].validator;\n      return validator ? {\n        module: detailClass.module,\n        validator,\n      } : null;\n    }\n\n    _prepareDetailClasses() {\n      const detailClasses = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        const details = ctx.bean.util.getProperty(module, 'main.meta.detail.details');\n        if (details) {\n          const res = this._prepareDetailClassesModule(module, details);\n          if (Object.keys(res).length > 0) {\n            detailClasses[relativeName] = res;\n          }\n        }\n      }\n      return detailClasses;\n    }\n\n    _prepareDetailClassesModule(module, _details) {\n      const detailClasses = {};\n      for (const key in _details) {\n        // info\n        const detailClass = {\n          name: key,\n          ..._details[key].info,\n        };\n        // titleLocale\n        detailClass.titleLocale = ctx.text(detailClass.title);\n        // ok\n        detailClasses[key] = detailClass;\n      }\n      return detailClasses;\n    }\n\n  }\n\n  return DetailClass;\n};\n","module.exports = ctx => {\n  class Procedure {\n\n    selectDetails({ iid, tableName, where, orders, page, count, stage }) {\n      // -- tables\n      // -- a: aAtom\n      // -- b: aAtomClass\n      // -- f: {item}\n      // -- g: aUser\n      // -- g2: aUser\n\n      iid = parseInt(iid);\n      stage = parseInt(stage);\n\n      // for safe\n      tableName = tableName ? ctx.model.format('??', tableName) : null;\n      where = where ? ctx.model._where(where) : null;\n      orders = orders ? ctx.model._orders(orders) : null;\n      const limit = page ? ctx.model._limit(page.size, page.index) : null;\n\n      // vars\n      let _itemField,\n        _itemJoin;\n\n      //\n      const _where = where ? `${where} AND` : ' WHERE';\n      const _orders = orders || '';\n      const _limit = limit || '';\n\n      // tableName\n      if (tableName) {\n        _itemField = 'f.*,';\n        _itemJoin = ` inner join ${tableName} f on f.detailId=a.id`;\n      } else {\n        _itemField = '';\n        _itemJoin = '';\n      }\n\n      // fields\n      let _selectFields;\n      if (count) {\n        _selectFields = 'count(*) as _count';\n      } else {\n        _selectFields = `${_itemField}\n                a.id as detailId,a.atomId,a.atomStage,a.detailItemId,a.detailClassId,\n                a.detailCodeId,a.detailCode,a.detailName,a.detailLineNo,\n                a.detailStatic,a.detailStaticKey,\n                a.userIdCreated,a.userIdUpdated,a.createdAt as detailCreatedAt,a.updatedAt as detailUpdatedAt,\n                b.module,b.detailClassName,\n                g.userName,g.avatar,\n                g2.userName as userNameUpdated,g2.avatar as avatarUpdated\n                `;\n      }\n\n      // sql\n      const _sql =\n        `select ${_selectFields} from aDetail a\n            inner join aDetailClass b on a.detailClassId=b.id\n            left join aUser g on a.userIdCreated=g.id\n            left join aUser g2 on a.userIdUpdated=g2.id\n            ${_itemJoin}\n\n          ${_where}\n           (\n             a.deleted=0 and a.iid=${iid} and a.atomStage=${stage}\n           )\n\n          ${count ? '' : _orders}\n          ${count ? '' : _limit}\n        `;\n\n      // ok\n      return _sql;\n    }\n\n    getDetail({ iid, tableName, detailId }) {\n      // -- tables\n      // -- a: aDetail\n      // -- b: aDetailClass\n      // -- f: {item}\n      // -- g: aUser\n      // -- g2: aUser\n\n      // for safe\n      tableName = tableName ? ctx.model.format('??', tableName) : null;\n\n      iid = parseInt(iid);\n      detailId = parseInt(detailId);\n\n      // vars\n      let _itemField,\n        _itemJoin;\n\n      // tableName\n      if (tableName) {\n        _itemField = 'f.*,';\n        _itemJoin = ` inner join ${tableName} f on f.detailId=a.id`;\n      } else {\n        _itemField = '';\n        _itemJoin = '';\n      }\n\n      // sql\n      const _sql =\n        `select ${_itemField}\n                a.id as detailId,a.atomId,a.atomStage,a.detailItemId,a.detailClassId,\n                a.detailCodeId,a.detailCode,a.detailName,a.detailLineNo,\n                a.detailStatic,a.detailStaticKey,\n                a.userIdCreated,a.userIdUpdated,a.createdAt as detailCreatedAt,a.updatedAt as detailUpdatedAt,\n                b.module,b.detailClassName,\n                g.userName,g.avatar,\n                g2.userName as userNameUpdated,g2.avatar as avatarUpdated\n          from aDetail a\n\n            inner join aDetailClass b on a.detailClassId=b.id\n            left join aUser g on a.userIdCreated=g.id\n            left join aUser g2 on a.userIdUpdated=g2.id\n            ${_itemJoin}\n\n          where a.id=${detailId}\n            and a.deleted=0 and a.iid=${iid}\n        `;\n\n      // ok\n      return _sql;\n    }\n\n  }\n\n  return Procedure;\n\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aDetail\n        let sql = `\n          CREATE TABLE aDetail (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            atomStage int(11) DEFAULT '0',\n            detailItemId int(11) DEFAULT '0',\n            detailClassId int(11) DEFAULT '0',\n            detailCodeId int(11) DEFAULT '0',\n            detailCode varchar(255) DEFAULT NULL,\n            detailName varchar(255) DEFAULT NULL,\n            detailLineNo int(11) DEFAULT '0',\n            detailStatic int(11) DEFAULT '0',\n            detailStaticKey varchar(255) DEFAULT NULL,\n            userIdCreated int(11) DEFAULT '0',\n            userIdUpdated int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aDetailClass\n        sql = `\n          CREATE TABLE aDetailClass (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            detailClassName varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {\n    }\n\n    async test() {\n    }\n\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst localProcedure = require('./bean/local.procedure.js');\nconst beanDetail = require('./bean/bean.detail.js');\nconst beanDetailClass = require('./bean/bean.detailClass.js');\nconst beanDetailAction = require('./bean/bean.detailAction.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // local\n    'local.procedure': {\n      mode: 'ctx',\n      bean: localProcedure,\n    },\n    // global\n    detail: {\n      mode: 'ctx',\n      bean: beanDetail,\n      global: true,\n    },\n    detailClass: {\n      mode: 'ctx',\n      bean: beanDetailClass,\n      global: true,\n    },\n    detailAction: {\n      mode: 'ctx',\n      bean: beanDetailAction,\n      global: true,\n    },\n  };\n  return beans;\n};\n","const require3 = require('require3');\nconst uuid = require3('uuid');\n\n// detailLineNo will be changed by other way\nconst __detailBasicFields = [\n  'detailCodeId', 'detailCode', 'detailName',\n  'detailStatic', 'detailStaticKey',\n];\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class DetailBase extends app.meta.BeanBase {\n\n    async create({ atomKey, detailClass, item, user }) {\n      // detailName\n      if (!item.detailName) {\n        // draftId\n        const sequence = this.ctx.bean.sequence.module(moduleInfo.relativeName);\n        const uniqueId = await sequence.next('detail');\n        item.detailName = `${this.ctx.text('Detail')}-${uniqueId}`;\n      }\n      // detailStaticKey\n      if (!item.detailStaticKey) {\n        item.detailStaticKey = uuid.v4().replace(/-/g, '');\n      }\n      // detailLineNo\n      item.detailLineNo = await this._createLineNo({ atomKey, detailClass });\n      // add\n      const detailId = await this.ctx.bean.detail._add({ atomKey, detailClass, detail: item, user });\n      return { detailId };\n    }\n\n    async read({ detailClass, options, key, user }) {\n      // get\n      return await this.ctx.bean.detail._get({ detailClass, options, key, mode: 'full', user });\n    }\n\n    async select(/* {  atomKey, detailClass, options, items, user }*/) {\n      // donothing\n    }\n\n    async delete({ /* detailClass, target, */ key, user }) {\n      // delete\n      await this.ctx.bean.detail._delete({\n        detail: { id: key.detailId },\n        user,\n      });\n    }\n\n    async write({ detailClass, target, key, item, options, user }) {\n      if (!item) return;\n      // stage\n      const atomStage = item.atomStage;\n      // validate\n      const ignoreValidate = options && options.ignoreValidate;\n      if (atomStage === 0 && !target && !ignoreValidate) {\n        await this.ctx.bean.validation._validate({ detailClass, data: item, options });\n      }\n      // write detail\n      await this._writeDetail({ key, item, user, atomStage });\n    }\n\n    async _writeDetail({ key, item, user, atomStage }) {\n      // write detail\n      const detail = { };\n      for (const field of __detailBasicFields) {\n        if (item[field] !== undefined) detail[field] = item[field];\n      }\n      if (atomStage === 0) {\n        detail.updatedAt = new Date();\n      }\n      // update\n      detail.id = key.detailId;\n      await this.ctx.bean.detail._update({ detail, user });\n    }\n\n    async copy(/* {\n      detailClass, target, srcKey, srcItem, destKey, destItem, options, user,\n      atomClass, srcKeyAtom, destKeyAtom, destAtom,\n    }*/) {\n      // do nothing\n    }\n\n    async _createLineNo({ atomKey, detailClass }) {\n      // need not check atomStage\n      const res = await this.ctx.model.queryOne(`\n        select max(a.detailLineNo) as detailLineNo from aDetail a\n          where a.iid=? and a.deleted=0 and a.atomId=? and a.detailClassId=?\n        `, [ this.ctx.instance.id, atomKey.atomId, detailClass.id ]);\n      const detailLineNo = res.detailLineNo;\n      return detailLineNo ? detailLineNo + 1 : 1;\n    }\n\n  }\n  return DetailBase;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {\n  };\n\n  return config;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  return {\n    detail: {\n      action: {\n        create: 1,\n        read: 2,\n        write: 3,\n        delete: 4,\n        clone: 5,\n        moveUp: 6,\n        moveDown: 7,\n\n        save: 51,\n\n        custom: 100, // custom action start from custom\n      },\n      actionMeta: {\n        create: {\n          title: 'Create',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          bulk: true,\n          icon: { material: 'add' },\n          inherit: 'write',\n          mode: 'edit',\n          stage: 'draft',\n        },\n        read: {\n          title: 'View',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          icon: { material: 'visibility' },\n          inherit: 'read',\n          mode: 'view',\n          stage: '',\n        },\n        write: {\n          title: 'Edit',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          icon: { material: 'edit' },\n          inherit: 'write',\n          mode: 'edit',\n          stage: 'draft',\n        },\n        delete: {\n          title: 'Delete',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          icon: { material: 'delete' },\n          inherit: 'write',\n          mode: 'edit',\n          stage: 'draft',\n        },\n        clone: {\n          title: 'Clone',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          icon: { material: 'content_copy' },\n          inherit: 'write',\n          mode: 'edit',\n          stage: 'draft',\n        },\n        moveUp: {\n          title: 'Move Up',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          icon: { material: 'arrow_upward' },\n          inherit: 'write',\n          mode: 'edit',\n          stage: 'draft',\n        },\n        moveDown: {\n          title: 'Move Down',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          icon: { material: 'arrow_downward' },\n          inherit: 'write',\n          mode: 'edit',\n          stage: 'draft',\n        },\n        save: {\n          title: 'Save',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          authorize: false,\n          icon: { material: 'save' },\n          inherit: 'write',\n          mode: 'edit',\n          stage: 'draft',\n        },\n        custom: {\n          title: 'Custom',\n        },\n      },\n    },\n  };\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","module.exports = {\n};\n","module.exports = {\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const schemas = {};\n  return schemas;\n};\n","module.exports = app => {\n\n  class BaseController extends app.Controller {\n\n    actions() {\n      const res = this.ctx.service.base.actions();\n      this.ctx.success(res);\n    }\n\n  }\n\n  return BaseController;\n};\n","module.exports = app => {\n\n  class DetailController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.detail.create({\n        atomKey: this.ctx.request.body.atomKey,\n        detailClass: this.ctx.request.body.detailClass,\n        item: this.ctx.request.body.item,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async read() {\n      const res = await this.ctx.service.detail.read({\n        key: this.ctx.request.body.key,\n        options: this.ctx.request.body.options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    // options\n    //   where, orders, page, star, label\n    async select() {\n      const options = this.ctx.request.body.options || {};\n      options.page = this.ctx.bean.util.page(options.page, false); // false\n      const items = await this.ctx.service.detail.select({\n        atomKey: this.ctx.request.body.atomKey,\n        detailClass: this.ctx.request.body.detailClass,\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n\n    async count() {\n      const options = this.ctx.request.body.options || {};\n      const count = await this.ctx.service.detail.count({\n        atomKey: this.ctx.request.body.atomKey,\n        detailClass: this.ctx.request.body.detailClass,\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(count);\n    }\n\n    async write() {\n      const options = { ignoreValidate: false };\n      await this.ctx.service.detail.write({\n        key: this.ctx.request.body.key,\n        item: this.ctx.request.body.item,\n        user: this.ctx.state.user.op,\n        options,\n      });\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.detail.delete({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success();\n    }\n\n    async clone() {\n      const res = await this.ctx.service.detail.clone({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async moveUp() {\n      const res = await this.ctx.service.detail.moveUp({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async moveDown() {\n      const res = await this.ctx.service.detail.moveDown({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async actions() {\n      const res = await this.ctx.service.detail.actions({\n        flowTaskId: this.ctx.request.body.flowTaskId,\n        atomKey: this.ctx.request.body.atomKey,\n        detailClass: this.ctx.request.body.detailClass,\n        mode: this.ctx.request.body.mode,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async actionsBulk() {\n      const res = await this.ctx.service.detail.actionsBulk({\n        flowTaskId: this.ctx.request.body.flowTaskId,\n        atomKey: this.ctx.request.body.atomKey,\n        detailClass: this.ctx.request.body.detailClass,\n        mode: this.ctx.request.body.mode,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async validator() {\n      const res = await this.ctx.service.detail.validator({\n        detailClass: this.ctx.request.body.detailClass,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return DetailController;\n};\n\n","const base = require('./controller/base.js');\nconst detail = require('./controller/detail.js');\n\nmodule.exports = app => {\n  const controllers = {\n    base,\n    detail,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst DetailBaseFn = require('./common/detailBase.js');\n\nmodule.exports = app => {\n\n  // detailBase\n  app.meta.DetailBase = DetailBaseFn(app);\n\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // constants\n  const constants = require('./config/constants.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    constants,\n    meta,\n  };\n\n};\n","module.exports = app => {\n  const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n      },\n      functions: {\n      },\n    },\n    sequence: {\n      providers: {\n        detail: {\n          bean: {\n            module: 'a-sequence',\n            name: 'simple',\n          },\n          start: 0,\n        },\n      },\n    },\n    validation: {\n      validators: {\n      },\n      keywords: {},\n      schemas,\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n\n  class Detail extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aDetail', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return Detail;\n};\n","module.exports = app => {\n\n  class DetailClass extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aDetailClass', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return DetailClass;\n};\n","const detail = require('./model/detail.js');\nconst detailClass = require('./model/detailClass.js');\n\nmodule.exports = app => {\n  const models = {\n    detail,\n    detailClass,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // base\n    { method: 'post', path: 'base/actions', controller: 'base' },\n    // detail\n    { method: 'post', path: 'detail/create', controller: 'detail', middlewares: 'transaction',\n      meta: { right: { type: 'detail', action: 1 } },\n    },\n    { method: 'post', path: 'detail/read', controller: 'detail',\n      meta: { right: { type: 'detail', action: 2 } },\n    },\n    { method: 'post', path: 'detail/select', controller: 'detail',\n      meta: { right: { type: 'detail', action: 2 } },\n    },\n    { method: 'post', path: 'detail/count', controller: 'detail',\n      meta: { right: { type: 'detail', action: 2 } },\n    },\n    { method: 'post', path: 'detail/write', controller: 'detail', middlewares: 'transaction',\n      meta: { right: { type: 'detail', action: 3 } },\n    },\n    { method: 'post', path: 'detail/delete', controller: 'detail', middlewares: 'transaction',\n      meta: { right: { type: 'detail', action: 4 } },\n    },\n    { method: 'post', path: 'detail/clone', controller: 'detail', middlewares: 'transaction',\n      meta: { right: { type: 'detail', action: 5 } },\n    },\n    { method: 'post', path: 'detail/moveUp', controller: 'detail', middlewares: 'transaction',\n      meta: { right: { type: 'detail', action: 6 } },\n    },\n    { method: 'post', path: 'detail/moveDown', controller: 'detail', middlewares: 'transaction',\n      meta: { right: { type: 'detail', action: 7 } },\n    },\n    { method: 'post', path: 'detail/actions', controller: 'detail' },\n    { method: 'post', path: 'detail/actionsBulk', controller: 'detail' },\n    { method: 'post', path: 'detail/validator', controller: 'detail' },\n  ];\n  return routes;\n};\n","module.exports = app => {\n\n  class Base extends app.Service {\n\n    actions() {\n      return this.ctx.bean.detailAction.actions();\n    }\n\n  }\n\n  return Base;\n};\n","module.exports = app => {\n\n  class Detail extends app.Service {\n\n    async create({ atomKey, detailClass, item, user }) {\n      return await this.ctx.bean.detail.create({ atomKey, detailClass, item, user });\n    }\n\n    async read({ key, options, user }) {\n      return await this.ctx.bean.detail.read({ key, options, user });\n    }\n\n    async select({ atomKey, detailClass, options, user }) {\n      return await this.ctx.bean.detail.select({ atomKey, detailClass, options, user });\n    }\n\n    async count({ atomKey, detailClass, options, user }) {\n      return await this.ctx.bean.detail.count({ atomKey, detailClass, options, user });\n    }\n\n    async write({ key, item, options, user }) {\n      return await this.ctx.bean.detail.write({ key, item, options, user });\n    }\n\n    async delete({ key, user }) {\n      return await this.ctx.bean.detail.delete({ key, user });\n    }\n\n    async clone({ key, user }) {\n      return await this.ctx.bean.detail.clone({ key, user });\n    }\n\n    async moveUp({ key, user }) {\n      return await this.ctx.bean.detail.moveUp({ key, user });\n    }\n\n    async moveDown({ key, user }) {\n      return await this.ctx.bean.detail.moveDown({ key, user });\n    }\n\n    async actions({ flowTaskId, atomKey, detailClass, mode, user }) {\n      return await this.ctx.bean.detail.actions({ flowTaskId, atomKey, detailClass, mode, user });\n    }\n\n    async actionsBulk({ flowTaskId, atomKey, detailClass, mode, user }) {\n      return await this.ctx.bean.detail.actionsBulk({ flowTaskId, atomKey, detailClass, mode, user });\n    }\n\n    async validator({ detailClass }) {\n      return await this.ctx.bean.detail.validator({ detailClass });\n    }\n\n  }\n\n  return Detail;\n};\n","const base = require('./service/base.js');\nconst detail = require('./service/detail.js');\n\nmodule.exports = app => {\n  const services = {\n    base,\n    detail,\n  };\n  return services;\n};\n","module.exports = require(\"require3\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n"],"sourceRoot":""}