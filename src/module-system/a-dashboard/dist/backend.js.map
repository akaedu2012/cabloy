{"version":3,"sources":["webpack://egg-born-module-a-dashboard/./backend/src/bean/atom.dashboard.js","webpack://egg-born-module-a-dashboard/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-dashboard/./backend/src/beans.js","webpack://egg-born-module-a-dashboard/./backend/src/config/config.js","webpack://egg-born-module-a-dashboard/./backend/src/config/errors.js","webpack://egg-born-module-a-dashboard/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-dashboard/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-dashboard/./backend/src/config/locales.js","webpack://egg-born-module-a-dashboard/./backend/src/config/static/dashboard/dashboardDefault.js","webpack://egg-born-module-a-dashboard/./backend/src/config/static/dashboard/dashboardHome.js","webpack://egg-born-module-a-dashboard/./backend/src/config/static/dashboards.js","webpack://egg-born-module-a-dashboard/./backend/src/config/static/resources.js","webpack://egg-born-module-a-dashboard/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-dashboard/./backend/src/controller/dashboard.js","webpack://egg-born-module-a-dashboard/./backend/src/controllers.js","webpack://egg-born-module-a-dashboard/./backend/src/main.js","webpack://egg-born-module-a-dashboard/./backend/src/meta.js","webpack://egg-born-module-a-dashboard/./backend/src/model/dashboard.js","webpack://egg-born-module-a-dashboard/./backend/src/model/dashboardContent.js","webpack://egg-born-module-a-dashboard/./backend/src/model/dashboardFull.js","webpack://egg-born-module-a-dashboard/./backend/src/model/dashboardUser.js","webpack://egg-born-module-a-dashboard/./backend/src/models.js","webpack://egg-born-module-a-dashboard/./backend/src/routes.js","webpack://egg-born-module-a-dashboard/./backend/src/service/dashboard.js","webpack://egg-born-module-a-dashboard/./backend/src/services.js","webpack://egg-born-module-a-dashboard/external \"require3\"","webpack://egg-born-module-a-dashboard/webpack/bootstrap","webpack://egg-born-module-a-dashboard/webpack/startup"],"names":[],"mappings":";;;;;;AAAA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;;AAEA;;AAEA,kBAAkB,wBAAwB;AAC1C;AACA,sCAAsC,wBAAwB;AAC9D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,cAAc;AACd;;AAEA,gBAAgB,gCAAgC;AAChD;AACA,qCAAqC,gCAAgC;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,kCAAkC;AACpD;AACA,0BAA0B,kCAAkC;AAC5D;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,8CAA8C;AAC/D;AACA,yBAAyB,8CAA8C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,GAAG;AACV;AACA,OAAO,EAAE;AACT;;AAEA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA,0BAA0B,uBAAuB;AACjD;;AAEA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACnFA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,uCAAuC;AAClD,WAAW,oDAAoD;AAC/D,WAAW,8DAA8D;AACzE,WAAW,qDAAqD;AAChE,WAAW,+DAA+D;AAC1E,WAAW,sDAAsD;AACjE,WAAW,gEAAgE;AAC3E,WAAW,qDAAqD;AAChE,WAAW,+DAA+D;AAC1E,WAAW,yDAAyD;AACpE,WAAW,mEAAmE;AAC9E,WAAW,2CAA2C;AACtD,WAAW,2CAA2C;AACtD;AACA,oDAAoD,yCAAyC;AAC7F;AACA;;AAEA,kBAAkB;;AAElB;;AAEA;AACA;;;;;;;;ACxHA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,sBAAsB,mBAAO,CAAC,GAA0B;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrBA,yBAAyB,mBAAO,CAAC,GAAiC;AAClE,sBAAsB,mBAAO,CAAC,GAA8B;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACjDA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;ACjFA,kBAAkB,mBAAO,CAAC,GAA2B;;AAErD;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;;AAEA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC/BA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D,2BAA2B,mBAAO,CAAC,GAA+B;AAClE,0BAA0B,mBAAO,CAAC,GAA8B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,kBAAkB;AAClB;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACrEA;AACA;AACA;AACA,kBAAkB,gCAAgC,wBAAwB,EAAE;AAC5E;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,uCAAuC,wBAAwB,EAAE;AACnF;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,wCAAwC,wBAAwB,EAAE;AACpF;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,oCAAoC,wBAAwB,EAAE;AAChF;AACA;AACA;AACA;;;;;;;;ACPA,kBAAkB,mBAAO,CAAC,GAAsB;AAChD,yBAAyB,mBAAO,CAAC,GAA6B;AAC9D,sBAAsB,mBAAO,CAAC,GAA0B;AACxD,sBAAsB,mBAAO,CAAC,GAA0B;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA,KAAK,uEAAuE;AAC5E,KAAK;AACL,aAAa,SAAS,iCAAiC,EAAE;AACzD,KAAK;AACL,KAAK,iFAAiF,QAAQ,aAAa,EAAE,EAAE;AAC/G,KAAK,iFAAiF,QAAQ,aAAa,EAAE,EAAE;AAC/G,KAAK,uFAAuF,QAAQ,aAAa,EAAE,EAAE;AACrH,KAAK,mFAAmF,QAAQ,aAAa,EAAE,EAAE;AACjH,KAAK;AACL,aAAa,SAAS,iCAAiC,EAAE;AACzD,KAAK;AACL,KAAK;AACL,aAAa,SAAS,iCAAiC,EAAE;AACzD,KAAK;AACL,KAAK;AACL,aAAa,SAAS,iCAAiC,EAAE;AACzD,KAAK;AACL;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,mEAAmE,+BAA+B;AAClG;AACA;AACA,8BAA8B,gCAAgC;AAC9D;;AAEA,gBAAgB,mDAAmD;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,cAAc,0BAA0B;AACxC,OAAO;AACP;AACA;AACA;AACA,cAAc;AACd;;AAEA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA,OAAO;AACP;;AAEA,wBAAwB,iCAAiC;AACzD;AACA;AACA,OAAO,GAAG;AACV;AACA;AACA,OAAO,EAAE;AACT;;AAEA,8BAA8B,uCAAuC;AACrE;AACA;AACA,OAAO,GAAG;AACV;AACA;AACA,OAAO,EAAE;AACT;;AAEA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA,OAAO;AACP;;AAEA,0BAA0B,wBAAwB;AAClD;AACA;AACA,+BAA+B,2BAA2B,GAAG,GAAG;AAChE;AACA,0EAA0E,0BAA0B;AACpG;AACA;AACA;AACA,OAAO,GAAG;AACV;AACA;AACA,OAAO,EAAE;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA,iCAAiC,yCAAyC;AAC1E;AACA;AACA,OAAO,GAAG;AACV;AACA;AACA,OAAO,EAAE;AACT;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;;;;;;;;AC7IA,kBAAkB,mBAAO,CAAC,GAAwB;;AAElD;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA,sC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UCtBA;UACA;UACA;UACA","file":"backend.js","sourcesContent":["const require3 = require('require3');\nconst uuid = require3('uuid');\n\nmodule.exports = app => {\n\n  class Atom extends app.meta.AtomBase {\n\n    async create({ atomClass, item, user }) {\n      // super\n      const key = await super.create({ atomClass, item, user });\n      // add dashboard\n      const res = await this.ctx.model.dashboard.insert({\n        atomId: key.atomId,\n      });\n      const itemId = res.insertId;\n      // add content\n      const content = {\n        root: {\n          id: uuid.v4().replace(/-/g, ''),\n          widgets: [],\n        },\n      };\n      await this.ctx.model.dashboardContent.insert({\n        atomId: key.atomId,\n        itemId,\n        content: JSON.stringify(content),\n      });\n      return { atomId: key.atomId, itemId };\n    }\n\n    async read({ atomClass, options, key, user }) {\n      // super\n      const item = await super.read({ atomClass, options, key, user });\n      if (!item) return null;\n      // meta\n      this._getMeta(item);\n      // ok\n      return item;\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // super\n      await super.select({ atomClass, options, items, user });\n      // meta\n      for (const item of items) {\n        this._getMeta(item);\n      }\n    }\n\n    async write({ atomClass, target, key, item, options, user }) {\n      // super\n      await super.write({ atomClass, target, key, item, options, user });\n      // update dashboard\n      const data = await this.ctx.model.dashboard.prepareData(item);\n      data.id = key.itemId;\n      await this.ctx.model.dashboard.update(data);\n      // update content\n      await this.ctx.model.dashboardContent.update({\n        content: item.content,\n      }, { where: {\n        atomId: key.atomId,\n      } });\n    }\n\n    async delete({ atomClass, key, user }) {\n      // delete dashboard\n      await this.ctx.model.dashboard.delete({\n        id: key.itemId,\n      });\n      // delete content\n      await this.ctx.model.dashboardContent.delete({\n        itemId: key.itemId,\n      });\n      // super\n      await super.delete({ atomClass, key, user });\n    }\n\n    _getMeta(item) {\n    }\n\n  }\n\n  return Atom;\n};\n","module.exports = app => {\n\n  class Version extends app.meta.BeanBase {\n\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aDashboardProfile\n        const sql = `\n          CREATE TABLE aDashboardProfile (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            profileName varchar(255) DEFAULT NULL,\n            profileValue json DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n\n      if (options.version === 2) {\n        // drop table: aDashboardProfile\n        let sql = `\n          DROP TABLE aDashboardProfile\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aDashboard\n        sql = `\n          CREATE TABLE aDashboard (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            description varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n          `;\n        await this.ctx.model.query(sql);\n\n        // create table: aDashboardContent\n        sql = `\n          CREATE TABLE aDashboardContent (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            itemId int(11) DEFAULT '0',\n            content JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aDashboardUser\n        sql = `\n          CREATE TABLE aDashboardUser (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            dashboardDefault int(11) DEFAULT '0',\n            dashboardAtomId int(11) DEFAULT '0',\n            dashboardName varchar(255) DEFAULT NULL,\n            content JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create view: aDashboardViewFull\n        sql = `\n          CREATE VIEW aDashboardViewFull as\n            select a.*,b.content from aDashboard a\n              left join aDashboardContent b on a.id=b.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n      }\n\n    }\n\n    async init(options) {\n      if (options.version === 1) {}\n\n      if (options.version === 2) {\n        // add role rights\n        const roleRights = [\n          { roleName: 'system', action: 'create' },\n          { roleName: 'system', action: 'read', scopeNames: 0 },\n          { roleName: 'system', action: 'read', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'write', scopeNames: 0 },\n          { roleName: 'system', action: 'write', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'delete', scopeNames: 0 },\n          { roleName: 'system', action: 'delete', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'clone', scopeNames: 0 },\n          { roleName: 'system', action: 'clone', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'authorize', scopeNames: 0 },\n          { roleName: 'system', action: 'authorize', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'deleteBulk' },\n          { roleName: 'system', action: 'exportBulk' },\n        ];\n        await this.ctx.bean.role.addRoleRightBatch({ atomClassName: 'dashboard', roleRights });\n      }\n    }\n\n    async test() { }\n\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst atomDashboard = require('./bean/atom.dashboard.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // atom\n    'atom.dashboard': {\n      mode: 'app',\n      bean: atomDashboard,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","module.exports = {\n  DashboardProfile: 'Dashboard Profile',\n};\n","module.exports = {\n  About: '关于',\n  Dashboard: '仪表板',\n  DashboardProfile: '仪表板配置',\n  'Create Dashboard': '新建仪表板',\n  'Dashboard List': '仪表板列表',\n  'Dashboard Widget': '仪表板部件',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    root: {\n      widgets: [\n        {\n          module: 'a-dashboard',\n          name: 'widgetAbout',\n        },\n      ],\n    },\n  };\n  const dashboard = {\n    atomName: 'Default',\n    atomStaticKey: 'dashboardDefault',\n    atomRevision: 0,\n    description: '',\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return dashboard;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    root: {\n      widgets: [\n        {\n          module: 'a-dashboard',\n          name: 'widgetAbout',\n        },\n      ],\n    },\n  };\n  const dashboard = {\n    atomName: 'Home',\n    atomStaticKey: 'dashboardHome',\n    atomRevision: 0,\n    description: '',\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return dashboard;\n};\n","const dashboardDefault = require('./dashboard/dashboardDefault.js');\nconst dashboardHome = require('./dashboard/dashboardHome.js');\n\nmodule.exports = app => {\n  const dashboards = [\n    dashboardDefault(app),\n    dashboardHome(app),\n  ];\n  return dashboards;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const resources = [\n    // menu\n    {\n      atomName: 'Create Dashboard',\n      atomStaticKey: 'createDashboard',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:menu.Create',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'dashboard',\n        atomAction: 'create',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Dashboard List',\n      atomStaticKey: 'listDashboard',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:menu.List',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'dashboard',\n        atomAction: 'read',\n      }),\n      resourceRoles: 'template.system',\n    },\n    // dashboard widget\n    {\n      atomName: 'About',\n      atomStaticKey: 'widgetAbout',\n      atomRevision: 0,\n      atomCategoryId: 'a-dashboard:widget.General',\n      resourceType: 'a-dashboard:widget',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        component: 'widgetAbout',\n      }),\n      resourceRoles: 'root',\n    },\n  ];\n  return resources;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const schemas = {};\n  // dashboard\n  schemas.dashboard = {\n    type: 'object',\n    properties: {\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Name',\n        notEmpty: true,\n      },\n      atomStaticKey: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'KeyForAtom',\n        ebReadOnly: true,\n        notEmpty: true,\n      },\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Description',\n      },\n      content: {\n        type: 'string',\n        ebType: 'component',\n        ebTitle: 'Content',\n        ebRender: {\n          module: moduleInfo.relativeName,\n          name: 'renderDashboardContent',\n        },\n        notEmpty: true,\n      },\n    },\n  };\n  // dashboard search\n  schemas.dashboardSearch = {\n    type: 'object',\n    properties: {\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Description',\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  class DashboardController extends app.Controller {\n\n    async itemByKey() {\n      const res = await this.service.dashboard.itemByKey({\n        atomStaticKey: this.ctx.request.body.atomStaticKey,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async item() {\n      const res = await this.service.dashboard.item({\n        dashboardAtomId: this.ctx.request.body.key.atomId,\n        dashboardUserCheck: this.ctx.request.body.dashboardUserCheck,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async loadItemUser() {\n      const res = await this.service.dashboard.loadItemUser({\n        dashboardUserId: this.ctx.request.body.dashboardUserId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async saveItemUser() {\n      const res = await this.service.dashboard.saveItemUser({\n        dashboardUserId: this.ctx.request.body.dashboardUserId,\n        content: this.ctx.request.body.content,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async changeItemUserName() {\n      const res = await this.service.dashboard.changeItemUserName({\n        dashboardUserId: this.ctx.request.body.dashboardUserId,\n        dashboardName: this.ctx.request.body.dashboardName,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async deleteItemUser() {\n      const res = await this.service.dashboard.deleteItemUser({\n        dashboardUserId: this.ctx.request.body.dashboardUserId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async createItemUser() {\n      const res = await this.service.dashboard.createItemUser({\n        dashboardAtomId: this.ctx.request.body.key.atomId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async itemUsers() {\n      const res = await this.service.dashboard.itemUsers({\n        dashboardAtomId: this.ctx.request.body.key.atomId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async changeItemUserDefault() {\n      const res = await this.service.dashboard.changeItemUserDefault({\n        dashboardAtomId: this.ctx.request.body.key.atomId,\n        dashboardUserId: this.ctx.request.body.dashboardUserId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return DashboardController;\n};\n","const dashboard = require('./controller/dashboard.js');\n\nmodule.exports = app => {\n  const controllers = {\n    dashboard,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\nmodule.exports = app => {\n\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n\n};\n","module.exports = app => {\n  const schemas = require('./config/validation/schemas.js')(app);\n  const staticDashboards = require('./config/static/dashboards.js')(app);\n  const staticResources = require('./config/static/resources.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n        dashboard: {\n          info: {\n            bean: 'dashboard',\n            title: 'Dashboard',\n            tableName: 'aDashboard',\n            tableNameModes: {\n              full: 'aDashboardViewFull',\n            },\n          },\n          actions: {\n            write: {\n              enableOnStatic: true,\n            },\n          },\n          validator: 'dashboard',\n          search: {\n            validator: 'dashboardSearch',\n          },\n        },\n      },\n      resources: {\n        widget: {\n          title: 'Dashboard Widget',\n        },\n      },\n      statics: {\n        'a-dashboard.dashboard': {\n          items: staticDashboards,\n        },\n        'a-base.resource': {\n          items: staticResources,\n        },\n      },\n    },\n    sequence: {\n      providers: {\n        dashboard: {\n          bean: {\n            module: 'a-sequence',\n            name: 'simple',\n          },\n          start: 0,\n        },\n      },\n    },\n    validation: {\n      validators: {\n        dashboard: {\n          schemas: 'dashboard',\n        },\n        dashboardSearch: {\n          schemas: 'dashboardSearch',\n        },\n      },\n      keywords: {},\n      schemas: {\n        dashboard: schemas.dashboard,\n        dashboardSearch: schemas.dashboardSearch,\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  class Dashboard extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aDashboard', options: { disableDeleted: false } });\n    }\n  }\n  return Dashboard;\n};\n","module.exports = app => {\n  class DashboardContent extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aDashboardContent', options: { disableDeleted: false } });\n    }\n  }\n  return DashboardContent;\n};\n","module.exports = app => {\n  class DashboardFull extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aDashboardViewFull', options: { disableDeleted: false } });\n    }\n  }\n  return DashboardFull;\n};\n","module.exports = app => {\n  class DashboardUser extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aDashboardUser', options: { disableDeleted: false } });\n    }\n  }\n  return DashboardUser;\n};\n","const dashboard = require('./model/dashboard.js');\nconst dashboardContent = require('./model/dashboardContent.js');\nconst dashboardUser = require('./model/dashboardUser.js');\nconst dashboardFull = require('./model/dashboardFull.js');\n\nmodule.exports = app => {\n  const models = {\n    dashboard,\n    dashboardContent,\n    dashboardUser,\n    dashboardFull,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // dashboard\n    { method: 'post', path: 'dashboard/itemByKey', controller: 'dashboard' },\n    { method: 'post', path: 'dashboard/item', controller: 'dashboard',\n      meta: { right: { type: 'resource', useKey: true } },\n    },\n    { method: 'post', path: 'dashboard/loadItemUser', controller: 'dashboard', meta: { auth: { user: true } } },\n    { method: 'post', path: 'dashboard/saveItemUser', controller: 'dashboard', meta: { auth: { user: true } } },\n    { method: 'post', path: 'dashboard/changeItemUserName', controller: 'dashboard', meta: { auth: { user: true } } },\n    { method: 'post', path: 'dashboard/deleteItemUser', controller: 'dashboard', meta: { auth: { user: true } } },\n    { method: 'post', path: 'dashboard/createItemUser', controller: 'dashboard',\n      meta: { right: { type: 'resource', useKey: true } },\n    },\n    { method: 'post', path: 'dashboard/itemUsers', controller: 'dashboard',\n      meta: { right: { type: 'resource', useKey: true } },\n    },\n    { method: 'post', path: 'dashboard/changeItemUserDefault', controller: 'dashboard',\n      meta: { right: { type: 'resource', useKey: true } },\n    },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Dashboard extends app.Service {\n\n    get atomClass() {\n      return {\n        module: moduleInfo.relativeName,\n        atomClassName: 'dashboard',\n      };\n    }\n\n    get sequence() {\n      return this.ctx.bean.sequence.module(moduleInfo.relativeName);\n    }\n\n    async itemByKey({ atomStaticKey, user }) {\n      if (!atomStaticKey) return this.ctx.throw.module('a-base', 1002);\n      // get atomId\n      const atomClass = await this.ctx.bean.atomClass.get(this.atomClass);\n      const atom = await this.ctx.bean.atom.modelAtom.get({\n        atomClassId: atomClass.id,\n        atomStaticKey,\n        atomStage: 1,\n      });\n      if (!atom) return this.ctx.throw.module('a-base', 1002);\n      const atomId = atom.id;\n      // check resource right\n      const res = await this.ctx.bean.resource.checkRightResource({ resourceAtomId: atomId, user });\n      if (!res) this.ctx.throw(403);\n      // item\n      return await this.item({ dashboardAtomId: atomId, user });\n    }\n\n    async item({ dashboardAtomId, dashboardUserCheck = true, user }) {\n      // try get default of dashboardUser\n      if (dashboardUserCheck) {\n        const dashboardUser = await this.ctx.model.dashboardUser.get({\n          dashboardAtomId,\n          dashboardDefault: 1,\n          userId: user.id,\n        });\n        if (dashboardUser) {\n          return { dashboardUser };\n        }\n      }\n      // get system\n      const dashboardSystem = await this.ctx.bean.atom.read({\n        key: { atomId: dashboardAtomId }, user,\n      });\n      // locale\n      dashboardSystem.atomNameLocale = this.ctx.text(dashboardSystem.atomName);\n      // ok\n      return { dashboardSystem };\n    }\n\n    async loadItemUser({ dashboardUserId, user }) {\n      return await this.ctx.model.dashboardUser.get({\n        id: dashboardUserId,\n        userId: user.id,\n      });\n    }\n\n    async saveItemUser({ dashboardUserId, content, user }) {\n      await this.ctx.model.dashboardUser.update({\n        content,\n      }, { where: {\n        id: dashboardUserId,\n        userId: user.id,\n      } });\n    }\n\n    async changeItemUserName({ dashboardUserId, dashboardName, user }) {\n      await this.ctx.model.dashboardUser.update({\n        dashboardName,\n      }, { where: {\n        id: dashboardUserId,\n        userId: user.id,\n      } });\n    }\n\n    async deleteItemUser({ dashboardUserId, user }) {\n      await this.ctx.model.dashboardUser.delete({\n        id: dashboardUserId,\n        userId: user.id,\n      });\n    }\n\n    async createItemUser({ dashboardAtomId, user }) {\n      // name\n      const id = await this.sequence.next('dashboard');\n      const dashboardName = `${this.ctx.text('Dashboard')}-${id}`;\n      // content\n      const dashboardContent = await this.ctx.model.dashboardContent.get({ atomId: dashboardAtomId });\n      // update old default\n      await this.ctx.model.dashboardUser.update({\n        dashboardDefault: 0,\n      }, { where: {\n        userId: user.id,\n        dashboardAtomId,\n      } });\n      // insert\n      const res = await this.ctx.model.dashboardUser.insert({\n        userId: user.id,\n        dashboardDefault: 1,\n        dashboardAtomId,\n        dashboardName,\n        content: dashboardContent.content,\n      });\n      // ok\n      return {\n        dashboardUserId: res.insertId,\n      };\n    }\n\n    async itemUsers({ dashboardAtomId, user }) {\n      return await this.ctx.model.dashboardUser.select({\n        columns: [ 'id', 'createdAt', 'updatedAt', 'deleted', 'iid', 'userId', 'dashboardDefault', 'dashboardAtomId', 'dashboardName' ],\n        where: {\n          userId: user.id,\n          dashboardAtomId,\n        },\n        orders: [[ 'dashboardName', 'asc' ]],\n      });\n    }\n\n    async changeItemUserDefault({ dashboardAtomId, dashboardUserId, user }) {\n      await this.ctx.model.dashboardUser.update({\n        dashboardDefault: 0,\n      }, { where: {\n        userId: user.id,\n        dashboardAtomId,\n      } });\n      await this.ctx.model.dashboardUser.update({\n        id: dashboardUserId,\n        dashboardDefault: 1,\n      });\n    }\n\n  }\n\n  return Dashboard;\n};\n","const dashboard = require('./service/dashboard.js');\n\nmodule.exports = app => {\n  const services = {\n    dashboard,\n  };\n  return services;\n};\n","module.exports = require(\"require3\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n"],"sourceRoot":""}