{"version":3,"sources":["webpack://egg-born-module-a-message/./backend/src/bean/bean.message.js","webpack://egg-born-module-a-message/./backend/src/bean/local.ioMessageUniformBase.js","webpack://egg-born-module-a-message/./backend/src/bean/stats.message.js","webpack://egg-born-module-a-message/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-message/./backend/src/beans.js","webpack://egg-born-module-a-message/./backend/src/config/config.js","webpack://egg-born-module-a-message/./backend/src/config/errors.js","webpack://egg-born-module-a-message/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-message/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-message/./backend/src/config/locales.js","webpack://egg-born-module-a-message/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-message/./backend/src/controller/message.js","webpack://egg-born-module-a-message/./backend/src/controllers.js","webpack://egg-born-module-a-message/./backend/src/main.js","webpack://egg-born-module-a-message/./backend/src/meta.js","webpack://egg-born-module-a-message/./backend/src/models.js","webpack://egg-born-module-a-message/./backend/src/routes.js","webpack://egg-born-module-a-message/./backend/src/service/message.js","webpack://egg-born-module-a-message/./backend/src/services.js","webpack://egg-born-module-a-message/webpack/bootstrap","webpack://egg-born-module-a-message/webpack/startup"],"names":[],"mappings":";;;;;;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB,qBAAqB;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC5CA;;AAEA;AACA;AACA;;AAEA,qBAAqB,4CAA4C;AACjE;AACA,oCAAoC,+DAA+D;AACnG;;AAEA,sBAAsB,oDAAoD;AAC1E;AACA;AACA,sBAAsB;AACtB;AACA,sBAAsB,qBAAqB;AAC3C;AACA,qCAAqC,oDAAoD;AACzF;;AAEA,qBAAqB,sCAAsC;AAC3D;AACA;AACA,sBAAsB,qBAAqB;AAC3C;AACA;AACA,oCAAoC,sCAAsC;AAC1E;;AAEA,2BAA2B,+CAA+C;AAC1E;AACA;;AAEA,sBAAsB,8CAA8C;AACpE,6CAA6C,8CAA8C;AAC3F;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,+DAA+D;AAC1F;AACA,gDAAgD,+DAA+D;AAC/G;AACA;AACA,0CAA0C,+DAA+D;AACzG;;AAEA,gCAAgC,wCAAwC;AACxE;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA,6EAA6E,WAAW;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,qBAAqB;AAClC;AACA;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB,GAAG,8BAA8B;AACzE;AACA,OAAO;AACP;;AAEA;AACA;AACA;;;;;;;;AC/GA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,qDAAqD,8BAA8B;AACnF;AACA;AACA;AACA,gBAAgB;AAChB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACxDA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACfA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,oBAAoB,mBAAO,CAAC,GAAwB;AACpD,qBAAqB,mBAAO,CAAC,GAAyB;AACtD,kCAAkC,mBAAO,CAAC,GAAsC;;AAEhF;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC9BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;;ACtBA;AACA;AACA;;;;;;;;ACFA;AACA;AACA,oDAAoD,eAAe,IAAI,eAAe;AACtF;AACA;AACA;AACA,KAAK,eAAe;;AAEpB;;AAEA,QAAQ;AACR,SAAS;AACT,QAAQ;AACR,QAAQ;;AAER;AACA,EAAE,eAAe;AACjB;;AAEA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA,oDAAoD,eAAe,IAAI,eAAe;AACtF;AACA;AACA;AACA,KAAK,eAAe;;AAEpB;;AAEA,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;;AAEN;AACA,EAAE,eAAe;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxBA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;ACHA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;ACjBA,gBAAgB,mBAAO,CAAC,GAAyB;;AAEjD;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;AAC3C,+BAA+B,mBAAO,CAAC,GAAsC;;AAE7E;;AAEA;AACA;;AAEA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACnCA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP,kBAAkB;AAClB;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA,KAAK,+DAA+D;AACpE;AACA;AACA;;;;;;;;ACLA;;AAEA;;AAEA,iBAAiB,gBAAgB;AACjC,gDAAgD,gBAAgB;AAChE;;AAEA;AACA;AACA;;;;;;;;;ACVA,gBAAgB,mBAAO,CAAC,GAAsB;;AAE9C;AACA;AACA;AACA;AACA;AACA;;;;;;;UCPA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UCrBA;UACA;UACA;UACA","file":"backend.js","sourcesContent":["const _cacheMessageClassesUniform = {};\n\nmodule.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Message extends ctx.app.meta.BeanModuleBase {\n\n    constructor(moduleName) {\n      super(ctx, 'message');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    async group({ /* options, user */}) {\n      const items = this.messageClassesUniform();\n      return items;\n    }\n\n    messageClassesUniform() {\n      if (!_cacheMessageClassesUniform[ctx.locale]) {\n        _cacheMessageClassesUniform[ctx.locale] = this._prepareMessageClassesUniform();\n      }\n      return _cacheMessageClassesUniform[ctx.locale];\n    }\n\n    _prepareMessageClassesUniform() {\n      const messageClasses = ctx.bean.io.messageClass.messageClasses();\n      const items = [];\n      for (const relativeName in messageClasses) {\n        const _module = messageClasses[relativeName];\n        for (const messageClassName in _module) {\n          const messageClass = _module[messageClassName];\n          if (messageClass.info.uniform) {\n            items.push({\n              module: relativeName,\n              messageClassName,\n              messageClass,\n            });\n          }\n        }\n      }\n      return items;\n    }\n\n  }\n  return Message;\n};\n","const __PATH_MESSAGE_UNIFORM = '/a/message/uniform';\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class IOMessageUniformBase extends ctx.app.meta.IOMessageBase(ctx) {\n\n    async onPublish({ /* path,*/ message, messageClass, options }) {\n      // onPublish\n      return await super.onPublish({ path: __PATH_MESSAGE_UNIFORM, message, messageClass, options });\n    }\n\n    async onSaveSync({ path, options, message, messageSync, messageClass }) {\n      if (messageSync.userId > 0 && messageSync.messageDirection === 2) {\n        // user\n        const user = { id: messageSync.userId };\n        // stats\n        this._notify({ messageClass, user });\n      }\n      return await super.onSaveSync({ path, options, message, messageSync, messageClass });\n    }\n\n    async onSetRead({ messageClass, messageIds, all, user }) {\n      // stats\n      if (messageClass) {\n        this._notify({ messageClass, user });\n      }\n      // onPublish\n      return await super.onSetRead({ messageClass, messageIds, all, user });\n    }\n\n    async onPushEnable(/* { options, message, messageSyncs, messageClass }*/) {\n      return true;\n    }\n\n    async onChannels({ options, message, messageSync, messageClass }) {\n      let channels = await super.onChannels({ options, message, messageSync, messageClass });\n      if (!channels) {\n        channels = ctx.config.module(moduleInfo.relativeName).socketio.message.push.channels;\n      }\n      return channels;\n    }\n\n    async onChannelRender({ channelFullName, options, message, messageSync, messageClass }) {\n      if (channelFullName === 'a-mail:mail') {\n        return await this._onChannelRenderMail({ channelFullName, options, message, messageSync, messageClass });\n      }\n      // super\n      return await super.onChannelRender({ channelFullName, options, message, messageSync, messageClass });\n    }\n\n    async _onChannelRenderMail({ channelFullName, message, messageSync }) {\n      // user\n      const userId = messageSync.userId;\n      const user = await ctx.bean.user.get({ id: userId });\n      if (!user) {\n        ctx.logger.info('not found user:', userId);\n        return null;\n      }\n      let to = user.email;\n      if (!to && (ctx.app.meta.isTest || ctx.app.meta.isLocal)) {\n        to = `${user.userName}@test.com`;\n      }\n      if (!to) return null;\n      // content\n      const content = JSON.parse(message.content);\n      // link\n      const link = ctx.bean.base.getAbsoluteUrl(`/#!/a/message/autojump?id=${message.id}`);\n      // scope\n      const scope = {\n        user,\n        message,\n        content,\n        info: {\n          link,\n          siteName: ctx.instance.title,\n        },\n      };\n      // config\n      const configTemplate = ctx.config.module(moduleInfo.relativeName).socketio.message.render.templates[channelFullName];\n      // subject\n      let subject = ctx.text.locale(user.locale, configTemplate.subject);\n      subject = ctx.bean.util.replaceTemplate(subject, scope);\n      // body\n      let body = ctx.text.locale(user.locale, configTemplate.body);\n      body = ctx.bean.util.replaceTemplate(body, scope);\n      // message\n      const _message = {\n        to,\n        subject,\n        text: body,\n      };\n      // ok\n      return {\n        scene: null, // use default\n        message: _message,\n      };\n    }\n\n    _notify({ messageClass, user }) {\n      if (user.id <= 0) return;\n      // stats\n      ctx.bean.stats.notify({\n        module: moduleInfo.relativeName,\n        name: 'message',\n        nameSub: `${messageClass.module}_${messageClass.messageClassName}`,\n        user,\n      });\n    }\n\n  }\n  return IOMessageUniformBase;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Stats {\n\n    async execute(context) {\n      const { keys, user } = context;\n      if (keys.length === 2) {\n        // messageClass\n        const [ module, messageClassName ] = keys[1].split('_');\n        const messageClass = { module, messageClassName };\n        const messageClassBase = ctx.bean.io.messageClass.messageClass(messageClass);\n        // options\n        const options = {\n          where: {\n            messageRead: 0,\n          },\n        };\n        // count\n        const res = await ctx.bean.io.message.count({ messageClass, options, user });\n        const count = res.count;\n        // stat\n        const color = messageClassBase.info.uniform.stats.color;\n        return { [color]: count };\n      } else if (keys.length === 1) {\n        // message\n        const modelStats = ctx.model.module('a-stats').stats;\n        const items = await modelStats.select({\n          where: {\n            module: moduleInfo.relativeName,\n            name: {\n              op: 'likeRight',\n              val: 'message.',\n            },\n            userId: user.id,\n          },\n        });\n        // count\n        const stat = {\n          red: 0,\n          gray: 0,\n        };\n        for (const item of items) {\n          // only level 2\n          if (item.name.split('.').length !== 2) continue;\n          const value = JSON.parse(item.value);\n          if (value.red !== undefined) stat.red += value.red;\n          if (value.gray !== undefined) stat.gray += value.gray;\n        }\n        // ok\n        return stat;\n      }\n    }\n\n  }\n\n  return Stats;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n\n    async update(options) {\n    }\n\n    async init(options) {\n    }\n\n    async test() {\n    }\n\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst beanMessage = require('./bean/bean.message.js');\nconst statsMessage = require('./bean/stats.message.js');\nconst localIoMessageUniformBase = require('./bean/local.ioMessageUniformBase.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // global\n    message: {\n      mode: 'ctx',\n      bean: beanMessage,\n      global: true,\n    },\n    // stats\n    'stats.message': {\n      mode: 'ctx',\n      bean: statsMessage,\n    },\n    // local\n    'local.ioMessageUniformBase': {\n      mode: 'ctx',\n      bean: localIoMessageUniformBase,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // socketio\n  config.socketio = {\n    message: {\n      push: {\n        channels: [ 'a-mail:mail' ],\n      },\n      render: {\n        templates: {\n          'a-mail:mail': {\n            subject: 'uniformMessageRenderTemplateMailSubject',\n            body: 'uniformMessageRenderTemplateMailBody',\n          },\n        },\n      },\n    },\n  };\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","// confirmationEmail\n//   subject\nconst uniformMessageRenderTemplateMailSubject = '[{{info.siteName}}] {{content.title}}';\n//   body\nconst uniformMessageRenderTemplateMailBody =\n`\nHi {{user.userName}},\n\nYou have received a new message. Here are the details:\n\nFrom: {{content.issuerName}}\nTitle: {{content.title}}\nBody: {{content.body}}\nLink: {{info.link}}\n\nRegards,\n{{info.siteName}} Team\n`;\n\nmodule.exports = {\n  uniformMessageRenderTemplateMailSubject,\n  uniformMessageRenderTemplateMailBody,\n};\n","// confirmationEmail\n//   subject\nconst uniformMessageRenderTemplateMailSubject = '[{{info.siteName}}] {{content.title}}';\n//   body\nconst uniformMessageRenderTemplateMailBody =\n`\n您好，{{user.userName}}，\n\n您收到一条新消息，详情如下：\n\n来自: {{content.issuerName}}\n标题: {{content.title}}\n正文: {{content.body}}\n链接: {{info.link}}\n\n此致，\n{{info.siteName}} 团队\n`;\n\nmodule.exports = {\n  Messages: '消息',\n  Message: '消息',\n  uniformMessageRenderTemplateMailSubject,\n  uniformMessageRenderTemplateMailBody,\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const schemas = {};\n  return schemas;\n};\n","module.exports = app => {\n\n  class MessageController extends app.Controller {\n\n    // options\n    //   where, orders\n    async group() {\n      const options = this.ctx.request.body.options;\n      const items = await this.ctx.service.message.group({\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(items);\n    }\n\n  }\n  return MessageController;\n};\n","const message = require('./controller/message.js');\n\nmodule.exports = app => {\n  const controllers = {\n    message,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst IOMessageUniformBaseFn = require('./bean/local.ioMessageUniformBase.js');\n\nmodule.exports = app => {\n\n  // base\n  app.meta.IOMessageUniformBase = IOMessageUniformBaseFn;\n\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n\n};\n","module.exports = app => {\n  const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n      },\n      functions: {\n      },\n    },\n    validation: {\n      validators: {\n      },\n      keywords: {},\n      schemas: {\n      },\n    },\n    stats: {\n      providers: {\n        message: {\n          user: true,\n          bean: 'message',\n        },\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  const models = {\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    { method: 'post', path: 'message/group', controller: 'message' },\n  ];\n  return routes;\n};\n","module.exports = app => {\n\n  class Message extends app.Service {\n\n    async group({ options, user }) {\n      return await this.ctx.bean.message.group({ options, user });\n    }\n\n  }\n  return Message;\n};\n\n","const message = require('./service/message.js');\n\nmodule.exports = app => {\n  const services = {\n    message,\n  };\n  return services;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n"],"sourceRoot":""}