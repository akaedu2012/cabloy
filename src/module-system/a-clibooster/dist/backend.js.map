{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B,cAAc,OAAO;AACrB;AACA,4BAA4B,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,WAAW;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC9BA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B,cAAc,OAAO;AACrB;AACA,4BAA4B,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,WAAW;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC9BA,WAAW,mBAAO,CAAC,GAAI;AACvB,aAAa,mBAAO,CAAC,EAAM;;AAE3B;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B,cAAc,OAAO;AACrB;AACA,4BAA4B,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,WAAW;AACrD;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,0CAA0C,WAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC,OAAO;AACP;AACA,sCAAsC,wBAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACxDA,WAAW,mBAAO,CAAC,GAAI;AACvB,aAAa,mBAAO,CAAC,EAAM;;AAE3B;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B,cAAc,OAAO;AACrB;AACA,4BAA4B,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,sCAAsC,wBAAwB;AAC9D;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACrCA;AACA;AACA,iBAAiB,MAAM;AACvB,sCAAsC,MAAM;AAC5C;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA,4BAA4B,MAAM;AAClC;AACA;AACA,+BAA+B,MAAM;AACrC;AACA,iCAAiC,oBAAoB;AACrD,+BAA+B,MAAM;AACrC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,+BAA+B,oBAAoB;AACnD,+BAA+B,wBAAwB;AACvD;AACA,6BAA6B,eAAe;AAC5C;;AAEA,sBAAsB,YAAY;AAClC;AACA;AACA,sBAAsB,WAAW;AACjC,wBAAwB,sBAAsB,IAAI,MAAM;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+BAA+B,4BAA4B;AAC3D;AACA;;AAEA,sBAAsB,YAAY;AAClC;AACA;AACA,sBAAsB,WAAW;AACjC,wBAAwB,sBAAsB,IAAI,MAAM;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iCAAiC,4BAA4B;AAC7D;AACA;;AAEA,wBAAwB,YAAY;AACpC;AACA;AACA,sBAAsB,WAAW;AACjC,wBAAwB,wBAAwB,IAAI,MAAM;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AClFA;AACA;AACA,oBAAoB,MAAM;AAC1B,cAAc,OAAO;AACrB;AACA,4BAA4B,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,WAAW;AAC1F;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iCAAiC,oCAAoC;AACrE;AACA,kCAAkC,mCAAmC;AACrE;;AAEA,wBAAwB,oCAAoC;AAC5D;AACA;AACA;AACA;AACA;AACA,gFAAgF,WAAW,GAAG,UAAU;AACxG;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA;AACA,yDAAyD,oCAAoC;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB;AACvD;;AAEA,0BAA0B,oCAAoC;AAC9D;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC3FA,aAAa,mBAAO,CAAC,EAAM;AAC3B,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAO,CAAC,GAA2B;;AAExD;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,0BAA0B;AAClE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,kCAAkC,6EAA6E;AAC/G;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iDAAiD;AACpF;AACA;AACA,iBAAiB;AACjB;AACA;AACA,wCAAwC,mDAAmD;AAC3F;AACA,kCAAkC,sCAAsC;AACxE;AACA,eAAe;AACf;;AAEA,0BAA0B,4EAA4E;AACtG;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,+DAA+D,UAAU;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iDAAiD;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mCAAmC;AAChE;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oDAAoD,iDAAiD;AACrG;AACA,mCAAmC,+DAA+D;AAClG;AACA,kCAAkC,qCAAqC;AACvE;AACA,eAAe;AACf;;AAEA,iCAAiC,qCAAqC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,sCAAsC;AAC/E;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,4BAA4B,iDAAiD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,yBAAyB,iDAAiD;AAC1E;AACA;AACA,wDAAwD,wBAAwB;AAChF;AACA;AACA,gEAAgE,0CAA0C;AAC1G;AACA;AACA;AACA,6DAA6D,uCAAuC;AACpG;AACA;AACA;;AAEA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,8BAA8B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA,sBAAsB,mCAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,mCAAmC;AAC/D;AACA,6CAA6C,gBAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,wBAAwB,8BAA8B;AACtD;AACA,qEAAqE,eAAe;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;;AAEA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA,iDAAiD,0BAA0B;AAC3E,UAAU;AACV,gDAAgD,0BAA0B;AAC1E,UAAU;AACV,8CAA8C,kCAAkC;AAChF;AACA;AACA;;AAEA,sCAAsC,YAAY;AAClD,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,2BAA2B;AAC1F;AACA;AACA;AACA;;AAEA,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,kDAAkD,2BAA2B;AAC7E;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;;;;;;;;ACnYA,WAAW,mBAAO,CAAC,GAAI;AACvB,aAAa,mBAAO,CAAC,EAAM;AAC3B,WAAW,mBAAO,CAAC,EAAI;AACvB,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAO,CAAC,GAA2B;;AAExD;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,YAAY;AACpD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,uCAAuC;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU,EAAE,SAAS;AACzC;AACA;;AAEA,gDAAgD,uCAAuC;AACvF;AACA;AACA;AACA,+CAA+C,0BAA0B;AACzE;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,2CAA2C,oBAAoB;AAC/D;AACA;AACA;AACA;AACA,kCAAkC,6CAA6C;AAC/E,QAAQ;AACR,0CAA0C,8CAA8C;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA,yBAAyB,sBAAsB;AAC/C;AACA;AACA;AACA;AACA,8EAA8E,eAAe;AAC7F;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,sBAAsB;AACvD,kDAAkD,iBAAiB;AACnE;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,cAAc;AACnC;AACA;;AAEA,qBAAqB,0BAA0B;AAC/C,cAAc,OAAO;AACrB;AACA,+CAA+C,cAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC/IA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,MAAM;AAC1B,cAAc,OAAO;AACrB;AACA,4BAA4B,MAAM;AAClC;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,4DAA4D,SAAS;AACrE,+BAA+B,MAAM;AACrC;AACA;;AAEA;AACA;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,MAAM;AAC1B,cAAc,OAAO;AACrB;AACA,4BAA4B,MAAM;AAClC;AACA,cAAc,WAAW;AACzB;AACA;AACA,OAAO;AACP;AACA,4DAA4D,SAAS;AACrE,+BAA+B,MAAM;AACrC;AACA;;AAEA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,MAAM;AAC1B;AACA,4BAA4B,MAAM;AAClC;AACA,cAAc,mBAAmB;AACjC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB;AACvD;AACA,4DAA4D,SAAS;AACrE,+BAA+B,MAAM;AACrC;AACA;;AAEA;AACA;;;;;;;;AC/BA,aAAa,mBAAO,CAAC,EAAM;AAC3B,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,MAAM;AAC1B,cAAc,YAAY;AAC1B;AACA,4BAA4B,MAAM;AAClC;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,2CAA2C,kBAAkB,IAAI,qBAAqB;AACtF;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACnDA,aAAa,mBAAO,CAAC,EAAM;AAC3B,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,MAAM;AAC1B,cAAc,OAAO;AACrB;AACA,4BAA4B,MAAM;AAClC;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,oCAAoC,YAAY;AAChD;AACA;;AAEA,2BAA2B,YAAY;AACvC;AACA,wDAAwD,WAAW;AACnE;AACA;AACA;AACA,iDAAiD,UAAU;AAC3D;AACA,2DAA2D,6BAA6B;AACxF;AACA;AACA;AACA;AACA;AACA,0CAA0C,YAAY,+BAA+B,WAAW,MAAM;AACtG,kCAAkC,WAAW,KAAK,WAAW;AAC7D;AACA,yBAAyB,6BAA6B,oBAAoB,MAAM,+BAA+B,IAAI;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,WAAW,KAAK,0BAA0B;AACxE;AACA,2CAA2C,MAAM,2BAA2B,IAAI;AAChF;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,6BAA6B;AAC7D;AACA,4DAA4D,SAAS,GAAG,WAAW;AACnF;AACA;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA;AACA,mDAAmD,gBAAgB;AACnE;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,8CAA8C,WAAW;AACzD;AACA;AACA;AACA;;AAEA,2BAA2B,gBAAgB;AAC3C;AACA;AACA,wCAAwC,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,6BAA6B,8BAA8B;AAC3D;;AAEA,2BAA2B,UAAU;AACrC,iEAAiE,SAAS,OAAO,uBAAuB;AACxG;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,qBAAqB,+DAA+D;AACpF,yCAAyC,mCAAmC;AAC5E;AACA;AACA,OAAO;AACP;;AAEA,eAAe,sDAAsD;AACrE,kCAAkC,2BAA2B;AAC7D;AACA;;AAEA;AACA;;;;;;;;AC9HA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACVA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,uBAAuB,mBAAO,CAAC,GAA4B;AAC3D,uBAAuB,mBAAO,CAAC,EAA4B;AAC3D,oBAAoB,mBAAO,CAAC,GAAyB;AACrD,uBAAuB,mBAAO,CAAC,EAA4B;AAC3D,qBAAqB,mBAAO,CAAC,GAA0B;AACvD,sBAAsB,mBAAO,CAAC,GAA2B;AACzD,sBAAsB,mBAAO,CAAC,GAA2B;AACzD,uBAAuB,mBAAO,CAAC,EAA4B;AAC3D,wBAAwB,mBAAO,CAAC,GAA6B;AAC7D,sBAAsB,mBAAO,CAAC,GAA2B;AACzD,4BAA4B,mBAAO,CAAC,GAAiC;AACrE,qBAAqB,mBAAO,CAAC,GAA0B;AACvD,wBAAwB,mBAAO,CAAC,GAA6B;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC7EA,aAAa,mBAAO,CAAC,EAAM;AAC3B,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,MAAM;AACvB;AACA,sCAAsC,MAAM;AAC5C;AACA,+CAA+C,sBAAsB;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,MAAM;AAC1B;AACA,4BAA4B,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,yBAAyB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,eAAe;AACf;AACA,4BAA4B;AAC5B,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,sBAAsB;AACtE;AACA,8DAA8D,OAAO;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+DAA+D,YAAY;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA;AACA,+BAA+B,SAAS;AACxC;;AAEA,uCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB,YAAY,WAAW;AACpE;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB,YAAY,WAAW;AACtE;AACA;AACA;AACA;AACA;AACA,wDAAwD,0BAA0B;AAClF,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB;AACvD;;AAEA;AACA;AACA,yCAAyC,mCAAmC,WAAW,WAAW;AAClG;AACA;AACA;AACA;;;;;;;;AC5MA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAmD;AACnE,gBAAgB,qEAAqE;AACrF,gBAAgB,0FAA0F;AAC1G,gBAAgB,6DAA6D;AAC7E;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;ACzGA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;;ACdA,oBAAoB,mBAAO,CAAC,GAA2B;AACvD,oBAAoB,mBAAO,CAAC,GAA2B;AACvD,iBAAiB,mBAAO,CAAC,GAAwB;AACjD,oBAAoB,mBAAO,CAAC,GAA2B;AACvD,kBAAkB,mBAAO,CAAC,GAAyB;AACnD,mBAAmB,mBAAO,CAAC,GAA0B;AACrD,mBAAmB,mBAAO,CAAC,GAA0B;AACrD,oBAAoB,mBAAO,CAAC,GAA2B;AACvD,qBAAqB,mBAAO,CAAC,GAA4B;AACzD,mBAAmB,mBAAO,CAAC,GAA0B;AACrD,yBAAyB,mBAAO,CAAC,GAAgC;AACjE,kBAAkB,mBAAO,CAAC,GAAyB;AACnD,qBAAqB,mBAAO,CAAC,GAA4B;;AAEzD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACzCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpBA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;;AC7DA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;ACHA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA,eAAe,mBAAO,CAAC,GAAW;AAClC;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChCA;AACA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA,0BAA0B,mBAAO,CAAC,GAA8B;AAChE;AACA,sBAAsB,mBAAO,CAAC,GAA0B;AACxD;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,oBAAoB;AACpB,kBAAkB;AAClB;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC3BA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;;ACHA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-clibooster/./backend/src/aops.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/cli.create.atom.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/cli.create.controller.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/cli.create.module.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/cli.create.suite.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/cli.default.demo.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/cli.default.list.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/cli.store.publish.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/cli.store.sync.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/cli.token.add.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/cli.token.delete.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/cli.token.list.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/cli.tools.babel.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/cli.tools.icons.js","webpack://egg-born-module-a-clibooster/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-clibooster/./backend/src/beans.js","webpack://egg-born-module-a-clibooster/./backend/src/common/cliStoreBase.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/command/create.atom.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/command/create.controller.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/command/create.module.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/command/create.suite.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/command/default.demo.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/command/default.list.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/command/store.publish.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/command/store.sync.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/command/token.add.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/command/token.delete.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/command/token.list.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/command/tools.babel.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/command/tools.icons.js","webpack://egg-born-module-a-clibooster/./backend/src/config/cli/commands.js","webpack://egg-born-module-a-clibooster/./backend/src/config/config.js","webpack://egg-born-module-a-clibooster/./backend/src/config/errors.js","webpack://egg-born-module-a-clibooster/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-clibooster/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-clibooster/./backend/src/config/locales.js","webpack://egg-born-module-a-clibooster/./backend/src/config/static/resources.js","webpack://egg-born-module-a-clibooster/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-clibooster/./backend/src/controllers.js","webpack://egg-born-module-a-clibooster/./backend/src/main.js","webpack://egg-born-module-a-clibooster/./backend/src/meta.js","webpack://egg-born-module-a-clibooster/./backend/src/models.js","webpack://egg-born-module-a-clibooster/./backend/src/routes.js","webpack://egg-born-module-a-clibooster/./backend/src/services.js","webpack://egg-born-module-a-clibooster/external commonjs2 \"require3\"","webpack://egg-born-module-a-clibooster/external node-commonjs \"fs\"","webpack://egg-born-module-a-clibooster/external node-commonjs \"os\"","webpack://egg-born-module-a-clibooster/external node-commonjs \"path\"","webpack://egg-born-module-a-clibooster/webpack/bootstrap","webpack://egg-born-module-a-clibooster/webpack/before-startup","webpack://egg-born-module-a-clibooster/webpack/startup","webpack://egg-born-module-a-clibooster/webpack/after-startup"],"sourcesContent":["module.exports = app => {\n  const aops = {};\n  return aops;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Cli extends ctx.app.meta.CliBase(ctx) {\n    async execute({ user }) {\n      const { argv } = this.context;\n      // super\n      await super.execute({ user });\n      // module name/info\n      const moduleName = argv.module;\n      argv.moduleInfo = this.helper.parseModuleInfo(moduleName);\n      // check if exists\n      const _module = this.helper.findModule(moduleName);\n      if (!_module) {\n        throw new Error(`module does not exist: ${moduleName}`);\n      }\n      // target dir\n      const targetDir = await this.helper.ensureDir(_module.root);\n      // render\n      await this.template.renderBoilerplateAndSnippets({\n        targetDir,\n        moduleName: moduleInfo.relativeName,\n        snippetsPath: 'create/atom/snippets',\n        boilerplatePath: 'create/atom/boilerplate',\n      });\n      // reload\n      ctx.app.meta.reload.now();\n    }\n  }\n\n  return Cli;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Cli extends ctx.app.meta.CliBase(ctx) {\n    async execute({ user }) {\n      const { argv } = this.context;\n      // super\n      await super.execute({ user });\n      // module name/info\n      const moduleName = argv.module;\n      argv.moduleInfo = this.helper.parseModuleInfo(moduleName);\n      // check if exists\n      const _module = this.helper.findModule(moduleName);\n      if (!_module) {\n        throw new Error(`module does not exist: ${moduleName}`);\n      }\n      // target dir\n      const targetDir = await this.helper.ensureDir(_module.root);\n      // render\n      await this.template.renderBoilerplateAndSnippets({\n        targetDir,\n        moduleName: moduleInfo.relativeName,\n        snippetsPath: 'create/controller/snippets',\n        boilerplatePath: 'create/controller/boilerplate',\n      });\n      // reload\n      ctx.app.meta.reload.now();\n    }\n  }\n\n  return Cli;\n};\n","const fs = require('fs');\nconst path = require('path');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Cli extends ctx.app.meta.CliBase(ctx) {\n    async execute({ user }) {\n      const { argv } = this.context;\n      // super\n      await super.execute({ user });\n      // suite name/info\n      const suiteName = argv.suite;\n      if (suiteName) {\n        argv.suiteInfo = this.helper.parseSuiteInfo(suiteName);\n        // check if exists\n        argv._suite = this.helper.findSuite(suiteName);\n        if (!argv._suite) {\n          throw new Error(`suite does not exist: ${suiteName}`);\n        }\n      }\n      // module name/info\n      const moduleName = argv.name;\n      argv.moduleInfo = this.helper.parseModuleInfo(moduleName);\n      // check if exists\n      const _module = this.helper.findModule(moduleName);\n      if (!argv.force && _module) {\n        throw new Error(`module exists: ${moduleName}`);\n      }\n      // target dir\n      let targetDir;\n      if (suiteName) {\n        targetDir = path.join(argv._suite.root, 'modules', moduleName);\n      } else {\n        targetDir = path.join(argv.projectPath, 'src/module', moduleName);\n      }\n      if (!argv.force && fs.existsSync(targetDir)) {\n        throw new Error(`module exists: ${moduleName}`);\n      }\n      targetDir = await this.helper.ensureDir(targetDir);\n      // template\n      const template = argv.template;\n      // templateDir\n      const templateDir = this.template.resolvePath({\n        moduleName: moduleInfo.relativeName,\n        path: `create/${template}`,\n      });\n      // render\n      await this.template.renderDir({ targetDir, templateDir });\n      // lerna bootstrap\n      await this.helper.lernaBootstrap();\n      // reload\n      ctx.app.meta.reload.now();\n    }\n  }\n\n  return Cli;\n};\n","const fs = require('fs');\nconst path = require('path');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Cli extends ctx.app.meta.CliBase(ctx) {\n    async execute({ user }) {\n      const { argv } = this.context;\n      // super\n      await super.execute({ user });\n      // suite name/info\n      const suiteName = argv.name;\n      argv.suiteInfo = this.helper.parseSuiteInfo(suiteName);\n      // check if exists\n      const _suite = this.helper.findSuite(suiteName);\n      if (_suite) {\n        throw new Error(`suite exists: ${suiteName}`);\n      }\n      // target dir\n      let targetDir = path.join(argv.projectPath, 'src/suite', suiteName);\n      if (fs.existsSync(targetDir)) {\n        throw new Error(`suite exists: ${suiteName}`);\n      }\n      targetDir = await this.helper.ensureDir(targetDir);\n      // templateDir\n      const templateDir = this.template.resolvePath({\n        moduleName: moduleInfo.relativeName,\n        path: 'create/suite',\n      });\n      // render\n      await this.template.renderDir({ targetDir, templateDir });\n      // reload\n      ctx.app.meta.reload.now();\n    }\n  }\n\n  return Cli;\n};\n","module.exports = ctx => {\n  class Cli extends ctx.app.meta.CliBase(ctx) {\n    async meta({ user }) {\n      const meta = await super.meta({ user });\n      return meta;\n    }\n    async execute({ user }) {\n      // super\n      await super.execute({ user });\n      // chalk\n      let text = this.helper.chalk.keyword('orange')('chalk test');\n      await this.console.log({ text });\n      // boxen\n      text = this.helper.boxen({ text: 'boxen test' });\n      await this.console.log({ text });\n      // table\n      const table = this.helper.newTable({\n        head: ['Name', 'Sex'],\n        colWidths: [20, 20],\n      });\n      table.push(['Tom', 'M']);\n      table.push(['Jane', 'F']);\n      await this.console.log({ text: 'table test' });\n      await this.console.log({ text: table.toString() });\n      //  level one\n      await this._levelOne({ progressNo: 0 });\n    }\n\n    async _levelOne({ progressNo }) {\n      const total = 2;\n      let current = 0;\n      for (let i = 0; i < total; i++) {\n        const text = `${ctx.text('Level One')}: ${i + 1}`;\n        await this.console.log({\n          progressNo,\n          total,\n          progress: current++,\n          text,\n        });\n        // sleep\n        await ctx.bean.util.sleep(200);\n        // level two\n        await this._levelTwo({ progressNo: progressNo + 1 });\n      }\n    }\n\n    async _levelTwo({ progressNo }) {\n      const total = 2;\n      let current = 0;\n      for (let i = 0; i < total; i++) {\n        const text = `${ctx.text('Level Two')}: ${i + 1}`;\n        await this.console.log({\n          progressNo,\n          total,\n          progress: current++,\n          text,\n        });\n        // sleep\n        await ctx.bean.util.sleep(200);\n        // level two\n        await this._levelThree({ progressNo: progressNo + 1 });\n      }\n    }\n\n    async _levelThree({ progressNo }) {\n      const total = 3;\n      let current = 0;\n      for (let i = 0; i < total; i++) {\n        const text = `${ctx.text('Level Three')}: ${i + 1}`;\n        await this.console.log({\n          progressNo,\n          total,\n          progress: current++,\n          text,\n        });\n        // sleep\n        await ctx.bean.util.sleep(200);\n      }\n    }\n  }\n\n  return Cli;\n};\n","module.exports = ctx => {\n  class Cli extends ctx.app.meta.CliBase(ctx) {\n    async execute({ user }) {\n      const { argv } = this.context;\n      // super\n      await super.execute({ user });\n      // module/group\n      const moduleWant = argv.module;\n      let groupWant = argv.group;\n      if (!moduleWant) groupWant = null;\n      // commandsAll\n      const commandsAll = ctx.bean.cli._commandsAll();\n      // modulesShow\n      let modulesShow;\n      if (moduleWant) {\n        if (!commandsAll[moduleWant]) throw new Error(`cli module not found: ${moduleWant}`);\n        modulesShow = [moduleWant];\n      } else {\n        modulesShow = Object.keys(commandsAll);\n      }\n      // loop\n      const total = modulesShow.length;\n      for (let index = 0; index < total; index++) {\n        const moduleShow = modulesShow[index];\n        // log\n        await this.console.log({\n          progressNo: 0,\n          total,\n          progress: index,\n          text: moduleShow,\n        });\n        // show\n        await this._moduleShow({ moduleShow, groupWant, commandsAll });\n      }\n      // await this.console.log({ text: JSON.stringify(modulesWant) });\n    }\n\n    async _moduleShow({ moduleShow, groupWant, commandsAll }) {\n      // _module\n      const _module = commandsAll[moduleShow];\n      // groupsShow\n      let groupsShow;\n      if (groupWant) {\n        if (!_module[groupWant]) throw new Error(`cli module group not found: ${moduleShow}:${groupWant}`);\n        groupsShow = [groupWant];\n      } else {\n        groupsShow = Object.keys(_module);\n      }\n      // table\n      const table = this.helper.newTable({\n        head: ['Command', 'Version', 'Description'],\n        colWidths: [30, 10, 40],\n      });\n      // group\n      const groupCount = groupsShow.length;\n      for (let index = 0; index < groupCount; index++) {\n        const groupShow = groupsShow[index];\n        const _group = _module[groupShow];\n        for (const commandName in _group) {\n          const _command = _group[commandName];\n          const cliFullName = this._combineCliFullName({ moduleShow, groupShow, commandName });\n          const version = _command.info.version;\n          const description = ctx.text(_command.info.description || _command.info.title);\n          table.push([cliFullName, version, description]);\n        }\n        if (index < groupCount - 1) {\n          table.push([]);\n        }\n      }\n      // log\n      await this.console.log({ text: table.toString() });\n    }\n\n    _combineCliFullName({ moduleShow, groupShow, commandName }) {\n      const parts = [];\n      if (moduleShow === 'a-clibooster') {\n        parts.push('');\n      } else {\n        parts.push(moduleShow);\n      }\n      if (groupShow === 'default') {\n        parts.push('');\n      } else {\n        parts.push(groupShow);\n      }\n      parts.push(commandName);\n      return parts.join(':');\n    }\n  }\n\n  return Cli;\n};\n","const path = require('path');\nconst require3 = require('require3');\nconst AdmZip = require3('adm-zip');\nconst shajs = require3('sha.js');\nconst semver = require3('semver');\nconst fse = require3('fs-extra');\nconst utility = require3('utility');\nconst eggBornUtils = require3('egg-born-utils');\nconst CliStoreBase = require('../common/cliStoreBase.js');\n\nmodule.exports = ctx => {\n  class Cli extends CliStoreBase(ctx) {\n    constructor(options) {\n      super(options, 'publish');\n    }\n\n    async onExecuteStoreCommandEntity({ entityName, entityConfig }) {\n      // fetch entity status\n      const entityStatus = await this.openAuthClient.post({\n        path: '/cabloy/store/store/publish/entityStatus',\n        body: {\n          entityName,\n        },\n      });\n      if (!entityStatus) {\n        // not found\n        return { code: 1001 };\n      }\n      // entityHash\n      const entityHash = entityStatus.entity.entityHash ? JSON.parse(entityStatus.entity.entityHash) : {};\n      // need official/trial\n      const needOfficial = entityStatus.entity.moduleLicenseFull !== 0;\n      const needTrial = entityStatus.entity.moduleLicenseTrial !== 0;\n      // publish: suite/module\n      let res;\n      if (entityStatus.entity.entityTypeCode === 1) {\n        // suite\n        res = await this._publishSuite({\n          suiteName: entityName,\n          entityConfig,\n          entityStatus,\n          entityHash,\n          needOfficial,\n          needTrial,\n        });\n      } else {\n        // module\n        res = await this._publishModuleIsolate({\n          moduleName: entityName,\n          entityConfig,\n          entityStatus,\n          entityHash,\n          needOfficial,\n          needTrial,\n        });\n      }\n      return res;\n    }\n\n    async _publishModuleIsolate({ moduleName, entityConfig, entityHash, entityStatus, needOfficial, needTrial }) {\n      // check if exists\n      const module = this.helper.findModule(moduleName);\n      if (!module) {\n        // not found\n        return { code: 1001 };\n      }\n      // zip module\n      const moduleMeta = {\n        name: moduleName,\n        root: module.root,\n        pkg: module.pkg,\n        package: require3(module.pkg), // module.package,\n      };\n      const moduleHash = entityHash.default || {};\n      await this._zipSuiteModule({ moduleMeta, moduleHash, needOfficial, needTrial });\n      if (!moduleMeta.changed) {\n        // No Changes Found\n        return { code: 2001 };\n      }\n      // upload module isolate\n      await this._uploadModuleIsolate({ moduleMeta, entityStatus, needOfficial, needTrial });\n      // handleScripts\n      await this._handleScripts({ entityMeta: moduleMeta, entityConfig });\n      // submitted\n      return { code: 2000, args: [moduleMeta.package.version] };\n    }\n\n    async _publishSuite({ suiteName, entityConfig, entityHash, entityStatus, needOfficial, needTrial }) {\n      // check if exists\n      const suite = this.helper.findSuite(suiteName);\n      if (!suite) {\n        // not found\n        return { code: 1001 };\n      }\n      // zip modules\n      const pathSuite = suite.root;\n      const filePkgs = await eggBornUtils.tools.globbyAsync(`${pathSuite}/modules/*/package.json`);\n      const modulesMeta = [];\n      for (const filePkg of filePkgs) {\n        // name\n        const name = filePkg.split('/').slice(-2)[0];\n        // meta\n        const _package = require3(filePkg);\n        const root = path.dirname(filePkg);\n        const moduleMeta = {\n          name,\n          root,\n          pkg: filePkg,\n          package: _package,\n        };\n        modulesMeta.push(moduleMeta);\n        const moduleHash = entityHash[moduleMeta.name] || {};\n        await this._zipSuiteModule({ moduleMeta, moduleHash, needOfficial, needTrial });\n      }\n      // zip suite\n      const filePkg = path.join(pathSuite, 'package.json');\n      const _package = require3(filePkg);\n      const suiteMeta = {\n        name: suiteName,\n        root: pathSuite,\n        pkg: filePkg,\n        package: _package,\n      };\n      const suiteHash = entityHash.default || {};\n      await this._zipSuite({ modulesMeta, suiteMeta, suiteHash });\n      if (!suiteMeta.changed) {\n        // No Changes Found\n        return { code: 2001 };\n      }\n      // zip all\n      const zipSuiteAll = await this._zipSuiteAll({ suiteMeta, modulesMeta, needOfficial, needTrial });\n      // upload all\n      await this._uploadSuiteAll({ suiteMeta, zipSuiteAll, entityStatus, needOfficial, needTrial });\n      // handleScripts\n      await this._handleScripts({ entityMeta: suiteMeta, entityConfig });\n      // submitted\n      return { code: 2000, args: [suiteMeta.package.version] };\n    }\n\n    async _uploadModuleIsolate({ moduleMeta, needOfficial, needTrial }) {\n      await this.openAuthClient.post({\n        path: '/cabloy/store/store/publish/entityPublish',\n        body: {\n          data: {\n            entityName: moduleMeta.name,\n            entityVersion: moduleMeta.package.version,\n            entityHash: JSON.stringify({ default: moduleMeta.zipOfficial.hash }, null, 2),\n            zipOfficial: needOfficial ? utility.base64encode(moduleMeta.zipOfficial.buffer, false) : undefined,\n            zipTrial: needTrial ? utility.base64encode(moduleMeta.zipTrial.buffer, false) : undefined,\n          },\n        },\n      });\n    }\n\n    async _uploadSuiteAll({ suiteMeta, zipSuiteAll, needOfficial, needTrial }) {\n      await this.openAuthClient.post({\n        path: '/cabloy/store/store/publish/entityPublish',\n        body: {\n          data: {\n            entityName: suiteMeta.name,\n            entityVersion: suiteMeta.package.version,\n            entityHash: JSON.stringify(zipSuiteAll.entityHash, null, 2),\n            zipOfficial: needOfficial ? utility.base64encode(zipSuiteAll.zipOfficial.buffer, false) : undefined,\n            zipTrial: needTrial ? utility.base64encode(zipSuiteAll.zipTrial.buffer, false) : undefined,\n          },\n        },\n      });\n    }\n\n    async _zipSuiteAll({ suiteMeta, modulesMeta, needOfficial, needTrial }) {\n      const zipSuiteAll = {};\n      // hash\n      zipSuiteAll.entityHash = this._zipSuiteAll_hash({ suiteMeta, modulesMeta });\n      // zip official\n      if (needOfficial) {\n        zipSuiteAll.zipOfficial = await this._zipSuiteAll_zip({ suiteMeta, modulesMeta, type: 'official' });\n      }\n      // zip trial\n      if (needTrial) {\n        zipSuiteAll.zipTrial = await this._zipSuiteAll_zip({ suiteMeta, modulesMeta, type: 'trial' });\n      }\n      return zipSuiteAll;\n    }\n\n    _zipSuiteAll_hash({ suiteMeta, modulesMeta }) {\n      const entityHash = {};\n      entityHash.default = suiteMeta.zipSuite.hash;\n      for (const moduleMeta of modulesMeta) {\n        entityHash[moduleMeta.name] = moduleMeta.zipOfficial.hash;\n      }\n      return entityHash;\n    }\n\n    async _zipSuiteAll_zip({ suiteMeta, modulesMeta, type }) {\n      const zip = new AdmZip();\n      zip.addFile('default', suiteMeta.zipSuite.buffer);\n      for (const moduleMeta of modulesMeta) {\n        const buffer = type === 'official' ? moduleMeta.zipOfficial.buffer : moduleMeta.zipTrial.buffer;\n        zip.addFile(moduleMeta.name, buffer);\n      }\n      const buffer = await zip.toBufferPromise();\n      return { buffer };\n    }\n\n    async _zipSuite({ modulesMeta, suiteMeta, suiteHash }) {\n      let zipSuite;\n      // check modulesMeta\n      let changed = modulesMeta.some(moduleMeta => moduleMeta.changed);\n      if (!changed) {\n        // check suite\n        zipSuite = await this._zipAndHash({\n          patterns: this.configModule.store.publish.patterns.suite,\n          pathRoot: suiteMeta.root,\n          needHash: true,\n        });\n        changed = zipSuite.hash.hash !== suiteHash.hash;\n      }\n      if (changed) {\n        suiteMeta.changed = true;\n        // bump\n        if (suiteHash.version && !semver.gt(suiteMeta.package.version, suiteHash.version)) {\n          suiteMeta.package.version = semver.inc(suiteHash.version, 'patch');\n          await fse.outputFile(suiteMeta.pkg, JSON.stringify(suiteMeta.package, null, 2) + '\\n');\n          zipSuite = null;\n        }\n      }\n      // force zip\n      if (!zipSuite) {\n        // zip suite\n        zipSuite = await this._zipAndHash({\n          patterns: this.configModule.store.publish.patterns.suite,\n          pathRoot: suiteMeta.root,\n          needHash: true,\n        });\n      }\n      // ok\n      zipSuite.hash.version = suiteMeta.package.version;\n      suiteMeta.zipSuite = zipSuite;\n    }\n\n    async _zipSuiteModule({ moduleMeta, moduleHash, needTrial }) {\n      // log\n      await this.console.log(`===> module: ${moduleMeta.name}`);\n      // zip officialTemp\n      const patternsTemp = this.configModule.store.publish.patterns.official.concat(['!dist']);\n      let zipOfficialTemp = await this._zipAndHash({\n        patterns: patternsTemp,\n        pathRoot: moduleMeta.root,\n        needHash: true,\n      });\n      // check hash\n      if (zipOfficialTemp.hash.hash !== moduleHash.hash) {\n        moduleMeta.changed = true;\n        // build:all\n        await this.helper.spawnCmd({\n          cmd: 'npm',\n          args: ['run', 'build:all'],\n          options: {\n            cwd: moduleMeta.root,\n          },\n        });\n        // bump\n        if (moduleHash.version && !semver.gt(moduleMeta.package.version, moduleHash.version)) {\n          moduleMeta.package.version = semver.inc(moduleHash.version, 'patch');\n          await fse.outputFile(moduleMeta.pkg, JSON.stringify(moduleMeta.package, null, 2) + '\\n');\n          zipOfficialTemp = await this._zipAndHash({\n            patterns: patternsTemp,\n            pathRoot: moduleMeta.root,\n            needHash: true,\n          });\n        }\n      }\n      // zip official\n      const zipOfficial = await this._zipAndHash({\n        patterns: this.configModule.store.publish.patterns.official,\n        pathRoot: moduleMeta.root,\n        needHash: false,\n      });\n      zipOfficial.hash = {\n        hash: zipOfficialTemp.hash.hash,\n        version: moduleMeta.package.version,\n      };\n      moduleMeta.zipOfficial = zipOfficial;\n      // zip trial\n      if (needTrial) {\n        moduleMeta.zipTrial = await this._zipAndHash({\n          patterns: this.configModule.store.publish.patterns.trial,\n          pathRoot: moduleMeta.root,\n          needHash: false,\n        });\n      }\n    }\n\n    async _zipAndHash({ patterns, pathRoot, needHash }) {\n      // globby\n      const files = await eggBornUtils.tools.globbyAsync(patterns, { cwd: pathRoot });\n      files.sort();\n      // zip\n      const zip = new AdmZip();\n      for (const file of files) {\n        const dirName = path.dirname(file);\n        const fileName = path.basename(file);\n        zip.addLocalFile(path.join(pathRoot, file), dirName, fileName);\n      }\n      const buffer = await zip.toBufferPromise();\n      // hash\n      const hash = needHash ? shajs('sha256').update(buffer).digest('hex') : undefined;\n      // ok\n      return { buffer, hash: { hash } };\n    }\n\n    async _handleScripts({ entityMeta, entityConfig }) {\n      if (!entityConfig.scripts) return;\n      for (const script of entityConfig.scripts) {\n        if (script === 'npmPublish') {\n          await this._handleScripts_npmPublish({ entityMeta, entityConfig });\n        } else if (script === 'gitCommit') {\n          await this._handleScripts_gitCommit({ entityMeta, entityConfig });\n        } else {\n          await this._handleScripts_general({ entityMeta, entityConfig, script });\n        }\n      }\n    }\n\n    async _handleScripts_npmPublish({ entityMeta }) {\n      const { argv } = this.context;\n      // npm publish\n      await this.helper.spawnCmd({\n        cmd: 'npm',\n        args: ['publish'],\n        options: {\n          cwd: entityMeta.root,\n        },\n      });\n      // cabloy path\n      const cabloyPath = eggBornUtils.tools._getCabloyPath(argv.projectPath);\n      if (cabloyPath) {\n        const pkg = path.join(cabloyPath, 'package.json');\n        const _package = require3(pkg);\n        if (_package.dependencies[entityMeta.package.name]) {\n          _package.dependencies[entityMeta.package.name] = `^${entityMeta.package.version}`;\n          await fse.outputFile(pkg, JSON.stringify(_package, null, 2) + '\\n');\n        }\n      }\n    }\n\n    async _handleScripts_gitCommit({ entityMeta }) {\n      // git add .\n      await this.helper.spawnCmd({\n        cmd: 'git',\n        args: ['add', '.'],\n        options: {\n          cwd: entityMeta.root,\n        },\n      });\n      // git commit\n      await this.helper.spawnCmd({\n        cmd: 'git',\n        args: ['commit', '-m', `'chore: version ${entityMeta.package.version}'`],\n        options: {\n          cwd: entityMeta.root,\n        },\n      });\n      // git push\n      await this.helper.spawnCmd({\n        cmd: 'git',\n        args: ['push'],\n        options: {\n          cwd: entityMeta.root,\n        },\n      });\n    }\n\n    async _handleScripts_general({ entityMeta, script }) {\n      const args = script.split(' ');\n      const cmd = args.shift();\n      await this.helper.spawn({\n        cmd,\n        args,\n        options: {\n          cwd: entityMeta.root,\n        },\n      });\n    }\n  }\n\n  return Cli;\n};\n","const fs = require('fs');\nconst path = require('path');\nconst os = require('os');\nconst require3 = require('require3');\nconst eggBornUtils = require3('egg-born-utils');\nconst AdmZip = require3('adm-zip');\nconst semver = require3('semver');\nconst fse = require3('fs-extra');\nconst rimraf = require3('mz-modules/rimraf');\nconst CliStoreBase = require('../common/cliStoreBase.js');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Cli extends CliStoreBase(ctx) {\n    constructor(options) {\n      super(options, 'sync');\n    }\n\n    async onExecuteStoreCommandEntity({ entityName }) {\n      // fetch entity status\n      const entityStatus = await this.openAuthClient.post({\n        path: '/cabloy/store/store/sync/entityStatus',\n        body: {\n          entityName,\n        },\n      });\n      if (!entityStatus) {\n        // not found\n        return { code: 1001 };\n      }\n      // prepare licenseMeta\n      let licenseMeta;\n      if (entityStatus.licenseFull.download) {\n        licenseMeta = entityStatus.licenseFull;\n      }\n      if (!licenseMeta && entityStatus.licenseTrial.download) {\n        licenseMeta = entityStatus.licenseTrial;\n      }\n      if (!licenseMeta) {\n        licenseMeta = entityStatus.licenseFull;\n      }\n      // handle\n      const res = await this._onExecuteStoreCommandEntity_handle({ entityName, entityStatus, licenseMeta });\n      if (!res) return licenseMeta;\n      // combine message\n      const args = res.args || [];\n      const message1 = ctx.parseSuccess.module(moduleInfo.relativeName, res.code, ...args).message;\n      let message2 = '';\n      if (licenseMeta.code) {\n        const args = licenseMeta.args || [];\n        message2 = ctx.parseSuccess.module(moduleInfo.relativeName, licenseMeta.code, ...args).message;\n      }\n      // ok\n      return {\n        code: res.code,\n        message: `${message1} ${message2}`,\n      };\n    }\n\n    async _onExecuteStoreCommandEntity_handle({ entityName, entityStatus, licenseMeta }) {\n      // entityVersion\n      const entityVersion = entityStatus.entity.moduleVersion;\n      // entityMeta\n      const entityMeta = this._getEntityMeta({ entityName, entityStatus });\n      // check version\n      if (entityMeta.version && !semver.lt(entityMeta.version, entityVersion)) {\n        // No Changes Found\n        return { code: 2001 };\n      }\n      // check if has download\n      if (!licenseMeta.download) {\n        return null;\n      }\n      // download\n      const buffer = await this.openAuthClient.getRaw({\n        path: licenseMeta.download.replace(/\\/a\\/file\\/file\\/download\\//, '/cabloy/store/store/sync/download/'),\n      });\n      // unzip\n      const tempPath = await this._unzip({ entityName, buffer });\n      // remove old path/files\n      await rimraf(entityMeta.root);\n      // copy to: suite/module\n      if (entityStatus.entity.entityTypeCode === 1) {\n        await this._copyToSuite({ tempPath, suiteName: entityName, entityMeta });\n      } else {\n        await this._copyToModuleIsolate({ tempPath, moduleName: entityName, entityMeta });\n      }\n      // remove temp path\n      await rimraf(tempPath);\n      // lerna bootstrap\n      this._needLernaBootstrap = true;\n      // synced\n      return { code: 3000, args: [entityVersion] };\n    }\n\n    async _copyToSuite({ tempPath, entityMeta }) {\n      // default\n      const zip = new AdmZip(path.join(tempPath, 'default'));\n      zip.extractAllTo(entityMeta.root, true);\n      // others\n      const files = await eggBornUtils.tools.globbyAsync(['*', '!default'], { cwd: tempPath });\n      for (const file of files) {\n        const zip = new AdmZip(path.join(tempPath, file));\n        zip.extractAllTo(path.join(entityMeta.root, 'modules', file), true);\n      }\n    }\n\n    async _copyToModuleIsolate({ tempPath, entityMeta }) {\n      await fse.move(tempPath, entityMeta.root, { overwrite: true });\n    }\n\n    async _unzip({ entityName, buffer }) {\n      const tempPath = path.join(os.tmpdir(), entityName);\n      await rimraf(tempPath);\n      const zip = new AdmZip(buffer);\n      zip.extractAllTo(tempPath, true);\n      return tempPath;\n    }\n\n    _getEntityType({ entityStatus }) {\n      return entityStatus.entity.entityTypeCode;\n    }\n\n    _getEntityMeta({ entityName, entityStatus }) {\n      const { argv } = this.context;\n      // entityMeta\n      const entityType = this._getEntityType({ entityStatus });\n      const entityMeta = {\n        root: path.join(argv.projectPath, entityType === 1 ? 'src/suite-vendor' : 'src/module-vendor', entityName),\n      };\n      // version\n      entityMeta.version = this._getEntityVersion(entityMeta.root);\n      return entityMeta;\n    }\n    _getEntityVersion(entityPath) {\n      const filePkg = path.join(entityPath, 'package.json');\n      if (!fs.existsSync(filePkg)) return null;\n      const _package = require3(filePkg);\n      return _package.version;\n    }\n  }\n\n  return Cli;\n};\n","module.exports = ctx => {\n  class Cli extends ctx.app.meta.CliBase(ctx) {\n    get localToken() {\n      return ctx.bean.local.module('a-authopen').token;\n    }\n\n    async execute({ user }) {\n      const { argv } = this.context;\n      // super\n      await super.execute({ user });\n      // add\n      const { fileName } = await this.localToken.add({\n        name: argv.name,\n        host: argv.host,\n        clientID: argv.clientID,\n        clientSecret: argv.clientSecret,\n        log: false,\n      });\n      // chalk\n      const text = this.helper.chalk.keyword('cyan')(`\\n  ${fileName}\\n`);\n      await this.console.log({ text });\n    }\n  }\n\n  return Cli;\n};\n","module.exports = ctx => {\n  class Cli extends ctx.app.meta.CliBase(ctx) {\n    get localToken() {\n      return ctx.bean.local.module('a-authopen').token;\n    }\n\n    async execute({ user }) {\n      const { argv } = this.context;\n      // super\n      await super.execute({ user });\n      // add\n      const { fileName } = await this.localToken.delete({\n        name: argv.name,\n        log: false,\n      });\n      // chalk\n      const text = this.helper.chalk.keyword('cyan')(`\\n  ${fileName}\\n`);\n      await this.console.log({ text });\n    }\n  }\n\n  return Cli;\n};\n","module.exports = ctx => {\n  class Cli extends ctx.app.meta.CliBase(ctx) {\n    get localToken() {\n      return ctx.bean.local.module('a-authopen').token;\n    }\n\n    async execute({ user }) {\n      // super\n      await super.execute({ user });\n      // add\n      const { fileName, config } = await this.localToken.list({\n        log: false,\n      });\n      // tokens\n      if (!config.tokens) config.tokens = {};\n      const table = this.helper.newTable({\n        head: ['Token Name', 'Host'],\n        colWidths: [30, 50],\n      });\n      for (const tokenName in config.tokens) {\n        const token = config.tokens[tokenName];\n        table.push([tokenName, token.host]);\n      }\n      await this.console.log({ text: table.toString() });\n      // fileName\n      const text = this.helper.chalk.keyword('cyan')(`\\n  ${fileName}\\n`);\n      await this.console.log({ text });\n    }\n  }\n\n  return Cli;\n};\n","const path = require('path');\nconst require3 = require('require3');\nconst babel = require3('@babel/core');\nconst UglifyJS = require3('uglify-js');\nconst fse = require3('fs-extra');\n\nmodule.exports = ctx => {\n  class Cli extends ctx.app.meta.CliBase(ctx) {\n    async execute({ user }) {\n      const { cwd, argv } = this.context;\n      // super\n      await super.execute({ user });\n      const files = argv._;\n      const total = files.length;\n      for (let index = 0; index < total; index++) {\n        const file = files[index];\n        // log\n        await this.console.log({\n          progressNo: 0,\n          total,\n          progress: index,\n          text: file,\n        });\n        // transform\n        const fileSrc = path.join(cwd, file);\n        const pos = fileSrc.lastIndexOf('.js');\n        if (pos === -1) continue;\n        const fileDest = fileSrc.substr(0, pos) + '.min.js';\n        this._transform(fileSrc, fileDest);\n      }\n    }\n\n    _transform(fileSrc, fileDest) {\n      let content = fse.readFileSync(fileSrc);\n      // transform\n      content = babel.transform(content, {\n        ast: false,\n        babelrc: false,\n        presets: ['@babel/preset-env'],\n        plugins: [],\n      }).code;\n      // uglify\n      const output = UglifyJS.minify(content);\n      if (output.error) throw new Error(`${output.error.name}: ${output.error.message}`);\n      content = output.code;\n      // output\n      fse.outputFileSync(fileDest, content);\n    }\n  }\n\n  return Cli;\n};\n","const path = require('path');\nconst require3 = require('require3');\nconst fse = require3('fs-extra');\nconst eggBornUtils = require3('egg-born-utils');\nconst bb = require3('bluebird');\nconst xml2js = require3('xml2js');\n\nmodule.exports = ctx => {\n  class Cli extends ctx.app.meta.CliBase(ctx) {\n    async execute({ user }) {\n      const { argv } = this.context;\n      // super\n      await super.execute({ user });\n      const moduleNames = argv._;\n      const total = moduleNames.length;\n      for (let index = 0; index < total; index++) {\n        const moduleName = moduleNames[index];\n        // log\n        await this.console.log({\n          progressNo: 0,\n          total,\n          progress: index,\n          text: moduleName,\n        });\n        // generate\n        await this._generateIcons({ moduleName });\n      }\n    }\n\n    async _generateIcons({ moduleName }) {\n      const module = this.helper.findModule(moduleName);\n      if (!module) throw new Error(`module not found: ${moduleName}`);\n      const modulePath = module.root;\n      const iconsSrc = path.join(modulePath, 'icons/src');\n      // groups\n      const groups = await this._resolveGroups({ iconsSrc });\n      for (const group of groups) {\n        group.iconNames = await this._generateIconsGroup({ modulePath, iconsSrc, group });\n      }\n      // write to front\n      const groupsFrontImport = [];\n      const groupsFrontExport = [];\n      for (const group of groups) {\n        groupsFrontImport.push(`import _${group.name} from '../assets/icons/groups/${group.name}.svg';`);\n        groupsFrontExport.push(`${group.name}: _${group.name},`);\n      }\n      const jsFront = `${groupsFrontImport.join('\\n')}\\n\\nexport default {\\n  ${groupsFrontExport.join('\\n  ')}\\n};\\n`;\n      const pathFront = path.join(modulePath, 'front/src/config');\n      const fileFront = path.join(modulePath, 'front/src/config/icons.js');\n      await fse.ensureDir(pathFront);\n      await fse.writeFile(fileFront, jsFront);\n      // write to backend\n      const groupsBackend = [];\n      for (const group of groups) {\n        groupsBackend.push(`${group.name}: '${group.iconNames.join(',')}',`);\n      }\n      const jsBackend = `module.exports = {\\n  ${groupsBackend.join('\\n  ')}\\n};\\n`;\n      const pathBackend = path.join(modulePath, 'backend/src/config/icons');\n      const fileBackend = path.join(modulePath, 'backend/src/config/icons/groups.js');\n      await fse.ensureDir(pathBackend);\n      await fse.writeFile(fileBackend, jsBackend);\n    }\n\n    async _generateIconsGroup({ modulePath, iconsSrc, group }) {\n      // icons\n      const files = await eggBornUtils.tools.globbyAsync(`${iconsSrc}/${group.name}/*.svg`);\n      const iconNames = files.map(item => path.basename(item, '.svg'));\n      // symbols\n      const symbols = [];\n      for (let index = 0; index < files.length; index++) {\n        const file = files[index];\n        const iconName = iconNames[index];\n        const symbol = await this._combineSymbol({ file, iconName });\n        symbols.push(symbol);\n      }\n      // xml\n      const xml = `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n${symbols.join('\\n')}\n</svg>`;\n      // write\n      const pathDest = path.join(modulePath, 'front/src/assets/icons', 'groups');\n      await fse.ensureDir(pathDest);\n      const fileDest = path.join(pathDest, `${group.name}.svg`);\n      await fse.writeFile(fileDest, xml);\n      // ok\n      return iconNames;\n    }\n\n    async _combineSymbol({ file, iconName }) {\n      // svg\n      const xml = await fse.readFile(file);\n      const svg = await this.parseXML({ xml });\n      // patch\n      delete svg.defs;\n      delete svg.metadata;\n      // root\n      const domRoot = svg.$;\n      const attrs = { id: iconName };\n      if (domRoot.preserveAspectRatio) attrs.preserveAspectRatio = domRoot.preserveAspectRatio;\n      if (domRoot.viewBox) attrs.viewBox = domRoot.viewBox;\n      svg.$ = attrs;\n      return this.buildXML({ xml: svg, rootName: 'symbol' });\n    }\n\n    async _resolveGroups({ iconsSrc }) {\n      const groupPaths = await eggBornUtils.tools.globbyAsync(`${iconsSrc}/*`, { onlyDirectories: true });\n      return groupPaths.map(item => {\n        return {\n          name: path.basename(item),\n        };\n      });\n    }\n\n    async parseXML({ xml, trim = true, explicitArray = false, explicitRoot = false }) {\n      const parser = new xml2js.Parser({ trim, explicitArray, explicitRoot });\n      return await bb.fromCallback(cb => {\n        parser.parseString(xml, cb);\n      });\n    }\n\n    buildXML({ xml, cdata = true, headless = true, rootName = 'xml' }) {\n      return new xml2js.Builder({ cdata, headless, rootName }).buildObject(xml);\n    }\n  }\n\n  return Cli;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {}\n\n    async init(options) {}\n\n    async test() {}\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst cliDefaultDemo = require('./bean/cli.default.demo.js');\nconst cliDefaultList = require('./bean/cli.default.list.js');\nconst cliTokenAdd = require('./bean/cli.token.add.js');\nconst cliTokenDelete = require('./bean/cli.token.delete.js');\nconst cliTokenList = require('./bean/cli.token.list.js');\nconst cliToolsBabel = require('./bean/cli.tools.babel.js');\nconst cliToolsIcons = require('./bean/cli.tools.icons.js');\nconst cliCreateSuite = require('./bean/cli.create.suite.js');\nconst cliCreateModule = require('./bean/cli.create.module.js');\nconst cliCreateAtom = require('./bean/cli.create.atom.js');\nconst cliCreateController = require('./bean/cli.create.controller.js');\nconst cliStoreSync = require('./bean/cli.store.sync.js');\nconst cliStorePublish = require('./bean/cli.store.publish.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // cli\n    'cli.default.demo': {\n      mode: 'ctx',\n      bean: cliDefaultDemo,\n    },\n    'cli.default.list': {\n      mode: 'ctx',\n      bean: cliDefaultList,\n    },\n    'cli.token.add': {\n      mode: 'ctx',\n      bean: cliTokenAdd,\n    },\n    'cli.token.delete': {\n      mode: 'ctx',\n      bean: cliTokenDelete,\n    },\n    'cli.token.list': {\n      mode: 'ctx',\n      bean: cliTokenList,\n    },\n    'cli.tools.babel': {\n      mode: 'ctx',\n      bean: cliToolsBabel,\n    },\n    'cli.tools.icons': {\n      mode: 'ctx',\n      bean: cliToolsIcons,\n    },\n    'cli.create.suite': {\n      mode: 'ctx',\n      bean: cliCreateSuite,\n    },\n    'cli.create.module': {\n      mode: 'ctx',\n      bean: cliCreateModule,\n    },\n    'cli.create.atom': {\n      mode: 'ctx',\n      bean: cliCreateAtom,\n    },\n    'cli.create.controller': {\n      mode: 'ctx',\n      bean: cliCreateController,\n    },\n    'cli.store.sync': {\n      mode: 'ctx',\n      bean: cliStoreSync,\n    },\n    'cli.store.publish': {\n      mode: 'ctx',\n      bean: cliStorePublish,\n    },\n  };\n  return beans;\n};\n","const path = require('path');\nconst require3 = require('require3');\nconst fse = require3('fs-extra');\nconst eggBornUtils = require3('egg-born-utils');\n\n// const __storeTokenHost = 'https://admin.cabloy.com';\n// const __storeTokenHost = 'http://localhost:9192';\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class CliStoreBase extends ctx.app.meta.CliBase(ctx) {\n    constructor(options, commandName) {\n      super(options);\n      this.commandName = commandName;\n      this.tokenName = `store.${commandName}`;\n      this.cabloyConfig = null;\n      this.openAuthClient = null;\n    }\n\n    get localToken() {\n      return ctx.bean.local.module('a-authopen').token;\n    }\n\n    get configModule() {\n      return ctx.config.module(moduleInfo.relativeName);\n    }\n\n    async meta({ user }) {\n      // meta\n      const meta = await super.meta({ user });\n      // check if token exists\n      const item = await this.localToken.get({ name: this.tokenName });\n      if (item) {\n        delete meta.groups;\n      }\n      // ok\n      return meta;\n    }\n\n    async execute({ user }) {\n      // super\n      await super.execute({ user });\n      // token\n      await this.addToken();\n      // cabloy config\n      await this.loadCabloyConfig();\n      // executeStoreCommand\n      await this.executeStoreCommand();\n    }\n    async addToken() {\n      const { argv } = this.context;\n      const { clientID, clientSecret } = argv;\n      if (clientID && clientSecret) {\n        await this.localToken.add({\n          name: this.tokenName,\n          host: this.configModule.store.token.host,\n          clientID,\n          clientSecret,\n        });\n      }\n    }\n    async saveCabloyConfig() {\n      const { argv } = this.context;\n      const fileName = path.join(argv.projectPath, 'cabloy.json');\n      await fse.outputFile(fileName, JSON.stringify(this.cabloyConfig, null, 2));\n    }\n    async loadCabloyConfig() {\n      const { argv } = this.context;\n      const fileName = path.join(argv.projectPath, 'cabloy.json');\n      const exists = await fse.pathExists(fileName);\n      let config;\n      if (exists) {\n        const content = await fse.readFile(fileName);\n        config = JSON.parse(content);\n      } else {\n        config = {\n          store: {\n            commands: {\n              sync: {\n                entities: {},\n              },\n              publish: {\n                entities: {},\n              },\n            },\n          },\n        };\n        await fse.outputFile(fileName, JSON.stringify(config, null, 2));\n      }\n      this.cabloyConfig = config;\n    }\n\n    async executeStoreCommand() {\n      // token\n      const token = await this.localToken.get({ name: this.tokenName });\n      // OpenAuthClient\n      this.openAuthClient = new eggBornUtils.OpenAuthClient({ token });\n      // signin\n      await this.openAuthClient.signin();\n      // execute command\n      try {\n        this._needLernaBootstrap = false;\n        await this._executeStoreCommand();\n        if (this._needLernaBootstrap) {\n          await this.helper.lernaBootstrap();\n          // reload\n          ctx.app.meta.reload.now();\n        }\n      } catch (err) {\n        //  logout\n        await this.openAuthClient.logout();\n        this.openAuthClient = null;\n        throw err;\n      }\n    }\n\n    async _executeStoreCommand() {\n      const { argv } = this.context;\n      // entityNames\n      let entityNames = argv._;\n      if (entityNames.length === 0) {\n        // load all entities\n        const entitiesConfig = ctx.bean.util.getProperty(\n          this.cabloyConfig,\n          `store.commands.${this.commandName}.entities`\n        );\n        entityNames = Object.keys(entitiesConfig);\n      }\n      // loop\n      const total = entityNames.length;\n      const results = [];\n      for (let index = 0; index < total; index++) {\n        const entityName = entityNames[index];\n        // log\n        await this.console.log({\n          progressNo: 0,\n          total,\n          progress: index,\n          text: entityName,\n        });\n        // command entity\n        const result = await this._executeStoreCommandEntity({ entityName });\n        result.entityName = entityName;\n        // result\n        if (result.code && !result.message) {\n          const args = result.args || [];\n          result.message = ctx.parseSuccess.module(moduleInfo.relativeName, result.code, ...args).message;\n        }\n        if (result.message) {\n          await this.console.log({ text: result.message });\n        }\n        results.push(result);\n      }\n      // log results\n      await this._logResults({ results });\n    }\n\n    async _executeStoreCommandEntity({ entityName }) {\n      try {\n        // save to config\n        let entityConfig = ctx.bean.util.getProperty(\n          this.cabloyConfig,\n          `store.commands.${this.commandName}.entities.${entityName}`\n        );\n        if (!entityConfig) {\n          entityConfig = {};\n          ctx.bean.util.setProperty(\n            this.cabloyConfig,\n            `store.commands.${this.commandName}.entities.${entityName}`,\n            entityConfig\n          );\n          await this.saveCabloyConfig();\n        }\n        // onExecuteStoreCommandEntity\n        return await this.onExecuteStoreCommandEntity({ entityName, entityConfig });\n      } catch (err) {\n        return {\n          code: err.code,\n          message: err.message,\n        };\n      }\n    }\n\n    async _logResults({ results }) {\n      // sort\n      results.sort((a, b) => a.code - b.code);\n      // table\n      const table = this.helper.newTable({\n        head: ['Entity Name', 'Message'],\n        colWidths: [30, 80],\n      });\n      for (const result of results) {\n        table.push([result.entityName, result.message]);\n        table.push(['', this._getEntityURL(result.entityName)]);\n      }\n      await this.console.log({ text: table.toString() });\n    }\n\n    _getEntityURL(entityName) {\n      const locale = this.openAuthClient.locale;\n      return `https://store.cabloy.com/${locale === 'zh-cn' ? 'zh-cn/' : ''}articles/${entityName}.html`;\n    }\n  }\n  return CliStoreBase;\n};\n","module.exports = app => {\n  return {\n    bean: 'create.atom',\n    resource: {\n      atomStaticKey: 'cliCreate',\n    },\n    info: {\n      version: '4.0.0',\n      title: 'Cli: Create Atom',\n      usage: 'npm run cli :create:atom atomClassName -- [--module=]',\n    },\n    options: {\n      module: {\n        description: 'module name',\n        type: 'string',\n      },\n    },\n    groups: {\n      default: {\n        questions: {\n          atomClassName: {\n            type: 'input',\n            message: 'atomClassName',\n            initial: {\n              expression: 'context.argv._[0]',\n            },\n            required: true,\n          },\n          module: {\n            type: 'input',\n            message: 'module name',\n            required: true,\n          },\n        },\n      },\n      atomClassInfoAuto: {\n        questions: {\n          providerId: {\n            type: 'input',\n            message: 'providerId',\n            initial: {\n              expression: 'context.argv.module.split(\"-\")[0]',\n            },\n            silent: true,\n          },\n          atomClassNameCapitalize: {\n            type: 'input',\n            message: 'atomClassNameCapitalize',\n            initial: {\n              expression:\n                'context.argv.atomClassName.replace(context.argv.atomClassName[0], context.argv.atomClassName[0].toUpperCase())',\n            },\n            silent: true,\n          },\n        },\n      },\n    },\n  };\n};\n","module.exports = app => {\n  return {\n    bean: 'create.controller',\n    resource: {\n      atomStaticKey: 'cliCreate',\n    },\n    info: {\n      version: '4.0.0',\n      title: 'Cli: Create Controller',\n      usage: 'npm run cli :create:controller controllerName -- [--module=]',\n    },\n    options: {\n      module: {\n        description: 'module name',\n        type: 'string',\n      },\n    },\n    groups: {\n      default: {\n        questions: {\n          controllerName: {\n            type: 'input',\n            message: 'controllerName',\n            initial: {\n              expression: 'context.argv._[0]',\n            },\n            required: true,\n          },\n          module: {\n            type: 'input',\n            message: 'module name',\n            required: true,\n          },\n        },\n      },\n      controllerInfoAuto: {\n        questions: {\n          providerId: {\n            type: 'input',\n            message: 'providerId',\n            initial: {\n              expression: 'context.argv.module.split(\"-\")[0]',\n            },\n            silent: true,\n          },\n          controllerNameCapitalize: {\n            type: 'input',\n            message: 'controllerNameCapitalize',\n            initial: {\n              expression:\n                'context.argv.controllerName.replace(context.argv.controllerName[0], context.argv.controllerName[0].toUpperCase())',\n            },\n            silent: true,\n          },\n        },\n      },\n    },\n  };\n};\n","module.exports = app => {\n  return {\n    bean: 'create.module',\n    resource: {\n      atomStaticKey: 'cliCreate',\n    },\n    info: {\n      version: '4.0.0',\n      title: 'Cli: Create Module',\n      usage: 'npm run cli :create:module moduleName -- [--template=] [--suite=] [--force]',\n    },\n    options: {\n      template: {\n        description: 'template',\n        type: 'string',\n      },\n      suite: {\n        description: 'suite name',\n        type: 'string',\n      },\n      force: {\n        description: 'force',\n        type: 'boolean',\n      },\n    },\n    groups: {\n      default: {\n        questions: {\n          template: {\n            type: 'select',\n            message: 'Specify the module template',\n            choices: [\n              { name: 'module', message: 'cabloy module template' },\n              { name: 'module-business', message: 'cabloy business module template' },\n              { name: 'module-business-details', message: 'cabloy business module template with details' },\n              { name: 'module-icon', message: 'cabloy icon module template' },\n            ],\n          },\n          suite: {\n            type: 'input',\n            message: 'suite name',\n          },\n        },\n      },\n      moduleInfo: {\n        questions: {\n          name: {\n            type: 'input',\n            message: 'module name',\n            initial: {\n              expression: 'context.argv._[0]',\n            },\n            required: true,\n          },\n          description: {\n            type: 'input',\n            message: 'module description',\n          },\n          author: {\n            type: 'input',\n            message: 'module author',\n          },\n        },\n      },\n      atomClassInfo: {\n        condition: {\n          expression: 'context.argv.template===\"module-business\" || context.argv.template===\"module-business-details\"',\n        },\n        questions: {\n          providerId: {\n            type: 'input',\n            message: 'providerId',\n            initial: {\n              expression: 'context.argv.name.split(\"-\")[0]',\n            },\n            required: true,\n          },\n          atomClassName: {\n            type: 'input',\n            message: 'atomClassName',\n            initial: {\n              expression: 'context.argv.name.split(\"-\")[1]',\n            },\n            required: true,\n          },\n        },\n      },\n      atomClassInfoAuto: {\n        condition: {\n          expression: 'context.argv.template===\"module-business\" || context.argv.template===\"module-business-details\"',\n        },\n        questions: {\n          atomClassNameCapitalize: {\n            type: 'input',\n            message: 'atomClassNameCapitalize',\n            initial: {\n              expression:\n                'context.argv.atomClassName.replace(context.argv.atomClassName[0], context.argv.atomClassName[0].toUpperCase())',\n            },\n            silent: true,\n          },\n        },\n      },\n    },\n  };\n};\n","module.exports = app => {\n  return {\n    bean: 'create.suite',\n    resource: {\n      atomStaticKey: 'cliCreate',\n    },\n    info: {\n      version: '4.0.0',\n      title: 'Cli: Create Suite',\n      usage: 'npm run cli :create:suite suiteName',\n    },\n    options: {},\n    groups: {\n      suiteInfo: {\n        questions: {\n          name: {\n            type: 'input',\n            message: 'suite name',\n            initial: {\n              expression: 'context.argv._[0]',\n            },\n            required: true,\n          },\n          description: {\n            type: 'input',\n            message: 'suite description',\n          },\n          author: {\n            type: 'input',\n            message: 'suite author',\n          },\n        },\n      },\n    },\n  };\n};\n","module.exports = app => {\n  return {\n    bean: 'default.demo',\n    resource: {\n      atomStaticKey: 'cliDefaultDemo',\n    },\n    info: {\n      version: '4.0.0',\n      title: 'Cli Demo',\n    },\n    options: {\n      username: {\n        description: 'Your username',\n        alias: 'u',\n        type: 'string',\n      },\n      role: {\n        description: 'Your role',\n        alias: 'r',\n        type: 'string',\n      },\n      course: {\n        description: 'Your course',\n        alias: 'c',\n        type: 'string',\n      },\n      grade: {\n        description: 'Your grade',\n        alias: 'g',\n        type: 'string',\n      },\n    },\n    groups: {\n      default: {\n        description: 'Your basic info',\n        condition: {\n          expression: null,\n        },\n        questions: {\n          username: {\n            type: 'input',\n            message: 'Your username',\n          },\n          role: {\n            type: 'select',\n            message: 'Your role',\n            choices: ['teacher', 'student'],\n          },\n        },\n      },\n      teacher: {\n        description: 'The teacher info',\n        condition: {\n          expression: 'context.argv.role===\"teacher\"',\n        },\n        questions: {\n          course: {\n            type: 'input',\n            message: 'Your course',\n          },\n        },\n      },\n      student: {\n        description: 'The student info',\n        condition: {\n          expression: 'context.argv.role===\"student\"',\n        },\n        questions: {\n          grade: {\n            type: 'input',\n            message: 'Your grade',\n          },\n        },\n      },\n    },\n  };\n};\n","module.exports = app => {\n  return {\n    bean: 'default.list',\n    resource: {\n      atomStaticKey: 'cliDefaultList',\n    },\n    info: {\n      version: '4.0.0',\n      title: 'Cli: Command List',\n    },\n    options: {\n      module: {\n        description: 'module',\n        type: 'string',\n      },\n      group: {\n        description: 'group',\n        type: 'string',\n      },\n    },\n    groups: null,\n  };\n};\n","module.exports = app => {\n  return {\n    bean: 'store.publish',\n    resource: {\n      atomStaticKey: 'cliStore',\n    },\n    info: {\n      version: '4.0.0',\n      title: 'Cli: Store: Publish',\n      usage: 'npm run cli :store:publish [entity1] [entity2]',\n    },\n    // options: null,\n    groups: {\n      default: {\n        description: 'CliAuthOpenTokenInfoStorePublish',\n        questions: {\n          clientID: {\n            type: 'input',\n            message: 'Client ID',\n            required: true,\n          },\n          clientSecret: {\n            type: 'input',\n            message: 'Client Secret',\n            required: true,\n          },\n        },\n      },\n    },\n  };\n};\n","module.exports = app => {\n  return {\n    bean: 'store.sync',\n    resource: {\n      atomStaticKey: 'cliStore',\n    },\n    info: {\n      version: '4.0.0',\n      title: 'Cli: Store: Sync',\n      usage: 'npm run cli :store:sync [entity1] [entity2]',\n    },\n    // options: null,\n    groups: {\n      default: {\n        description: 'CliAuthOpenTokenInfoStoreSync',\n        questions: {\n          clientID: {\n            type: 'input',\n            message: 'Client ID',\n            required: true,\n          },\n          clientSecret: {\n            type: 'input',\n            message: 'Client Secret',\n            required: true,\n          },\n        },\n      },\n    },\n  };\n};\n","module.exports = app => {\n  return {\n    bean: 'token.add',\n    resource: {\n      atomStaticKey: 'cliToken',\n    },\n    info: {\n      version: '4.0.0',\n      title: 'Cli: Add Open Auth Token',\n    },\n    options: {\n      name: {\n        description: 'name',\n        type: 'string',\n      },\n      host: {\n        description: 'host',\n        type: 'string',\n      },\n      clientID: {\n        description: 'clientID',\n        type: 'string',\n      },\n      clientSecret: {\n        description: 'clientSecret',\n        type: 'string',\n      },\n    },\n    groups: {\n      default: {\n        description: 'Toke Info',\n        questions: {\n          name: {\n            type: 'input',\n            message: 'name',\n          },\n          host: {\n            type: 'input',\n            message: 'host',\n          },\n          clientID: {\n            type: 'input',\n            message: 'clientID',\n          },\n          clientSecret: {\n            type: 'input',\n            message: 'clientSecret',\n          },\n        },\n      },\n    },\n  };\n};\n","module.exports = app => {\n  return {\n    bean: 'token.delete',\n    resource: {\n      atomStaticKey: 'cliToken',\n    },\n    info: {\n      version: '4.0.0',\n      title: 'Cli: Delete Open Auth Token',\n    },\n    options: {\n      name: {\n        description: 'name',\n        type: 'string',\n      },\n    },\n    groups: {\n      default: {\n        description: 'Toke Info',\n        questions: {\n          name: {\n            type: 'input',\n            message: 'name',\n          },\n        },\n      },\n    },\n  };\n};\n","module.exports = app => {\n  return {\n    bean: 'token.list',\n    resource: {\n      atomStaticKey: 'cliToken',\n    },\n    info: {\n      version: '4.0.0',\n      title: 'Cli: Open Auth Tokens',\n    },\n    // options: null,\n    // groups: null,\n  };\n};\n","module.exports = app => {\n  return {\n    bean: 'tools.babel',\n    resource: {\n      atomStaticKey: 'cliTools',\n    },\n    info: {\n      version: '4.0.0',\n      title: 'Cli: Tools: Babel',\n      usage: 'npm run cli :tools:babel file1 [file2]',\n    },\n    // options: null,\n    // groups: null,\n  };\n};\n","module.exports = app => {\n  return {\n    bean: 'tools.icons',\n    resource: {\n      atomStaticKey: 'cliTools',\n    },\n    info: {\n      version: '4.0.0',\n      title: 'Cli: Tools: Icons',\n      usage: 'npm run cli :tools:icons module1 [module2]',\n    },\n    // options: null,\n    // groups: null,\n  };\n};\n","const defaultDemo = require('./command/default.demo.js');\nconst defaultList = require('./command/default.list.js');\nconst tokenAdd = require('./command/token.add.js');\nconst tokenDelete = require('./command/token.delete.js');\nconst tokenList = require('./command/token.list.js');\nconst toolsBabel = require('./command/tools.babel.js');\nconst toolsIcons = require('./command/tools.icons.js');\nconst createSuite = require('./command/create.suite.js');\nconst createModule = require('./command/create.module.js');\nconst createAtom = require('./command/create.atom.js');\nconst createController = require('./command/create.controller.js');\nconst storeSync = require('./command/store.sync.js');\nconst storePublish = require('./command/store.publish.js');\n\nmodule.exports = app => {\n  const commands = {\n    default: {\n      demo: defaultDemo(app),\n      list: defaultList(app),\n    },\n    token: {\n      add: tokenAdd(app),\n      delete: tokenDelete(app),\n      list: tokenList(app),\n    },\n    tools: {\n      babel: toolsBabel(app),\n      icons: toolsIcons(app),\n    },\n    create: {\n      suite: createSuite(app),\n      module: createModule(app),\n      atom: createAtom(app),\n      controller: createController(app),\n    },\n    store: {\n      sync: storeSync(app),\n      publish: storePublish(app),\n    },\n  };\n  return commands;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // store\n  config.store = {\n    token: {\n      host: 'https://admin.cabloy.com',\n    },\n    publish: {\n      patterns: {\n        trial: [\n          '**',\n          '!node_modules',\n          '!miniprogram_npm',\n          '!.git',\n          '!.DS_Store',\n          '!backend/src',\n          '!backend/static',\n          '!backend/test',\n          '!front/src',\n          '!icons',\n        ],\n        official: ['**', '!node_modules', '!miniprogram_npm', '!.git', '!.DS_Store'],\n        suite: ['**', '!node_modules', '!miniprogram_npm', '!.git', '!.DS_Store', '!modules'],\n      },\n    },\n  };\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Not Found',\n  // 2000: publish\n  2000: 'Submitted, Version: %s',\n  2001: 'No Changes Found',\n  // 3000: sync\n  3000: 'Synced, Version: %s',\n  3001: 'Not Purchased',\n  3002: 'Expired, Expired Time: %s',\n  3003: 'Expired Time: %s',\n};\n","module.exports = {\n  CliAuthOpenTokenInfoStoreSync: 'Open Auth Token for Cabloy Store Sync',\n  CliAuthOpenTokenInfoStorePublish: 'Open Auth Token for Cabloy Store Publish',\n};\n","module.exports = {\n  Submitted: '已提交',\n  CliAuthOpenTokenInfoStoreSync: '用于Cabloy商店同步的开放认证Token',\n  CliAuthOpenTokenInfoStorePublish: '用于Cabloy商店发布的开放认证Token',\n  'Cli Demo': 'Cli演示',\n  'Your username': '您的名称',\n  'Your role': '您的角色',\n  'Your course': '您的课程',\n  'Your grade': '您的年级',\n  'Your basic info': '您的基本信息',\n  'The teacher info': '教师信息',\n  'The student info': '学生信息',\n  'Specify the module template': '指定模块模版',\n  'Not Found': '未发现',\n  'No Changes Found': '没有变更',\n  'Submitted, Version: %s': '已提交，版本：%s',\n  'Synced, Version: %s': '已同步，版本：%s',\n  'Not Purchased': '未购买',\n  'Expired, Expired Time: %s': '已过期，过期时间：%s',\n  'Expired Time: %s': '过期时间：%s',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const resources = [\n    // function\n    {\n      atomName: 'Cli Demo',\n      atomStaticKey: 'cliDefaultDemo',\n      atomRevision: 1,\n      atomCategoryId: 'a-base:function.Cli',\n      resourceType: 'a-base:function',\n      resourceConfig: null,\n      resourceRoles: 'template.system,RoleScopeCliDevelopment',\n    },\n    {\n      atomName: 'Cli Command List',\n      atomStaticKey: 'cliDefaultList',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Cli',\n      resourceType: 'a-base:function',\n      resourceConfig: null,\n      resourceRoles: 'template.system,RoleScopeCliDevelopment',\n    },\n    {\n      atomName: 'Cli Token',\n      atomStaticKey: 'cliToken',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Cli',\n      resourceType: 'a-base:function',\n      resourceConfig: null,\n      resourceRoles: 'template.system,RoleScopeCliDevelopment',\n    },\n    {\n      atomName: 'Cli Tools',\n      atomStaticKey: 'cliTools',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Cli',\n      resourceType: 'a-base:function',\n      resourceConfig: null,\n      resourceRoles: 'template.system,RoleScopeCliDevelopment',\n    },\n    {\n      atomName: 'Cli Create',\n      atomStaticKey: 'cliCreate',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Cli',\n      resourceType: 'a-base:function',\n      resourceConfig: null,\n      resourceRoles: 'template.system,RoleScopeCliDevelopment',\n    },\n    {\n      atomName: 'Cli Store',\n      atomStaticKey: 'cliStore',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Cli',\n      resourceType: 'a-base:function',\n      resourceConfig: null,\n      resourceRoles: 'template.system,RoleScopeCliDevelopment',\n    },\n  ];\n  // ok\n  return resources;\n};\n","module.exports = app => {\n  const schemas = {};\n  return schemas;\n};\n","module.exports = app => {\n  const controllers = {};\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\nmodule.exports = app => {\n  // aops\n  const aops = require('./aops.js')(app);\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    aops,\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n};\n","module.exports = app => {\n  // schemas\n  const schemas = require('./config/validation/schemas.js')(app);\n  // static\n  const staticResources = require('./config/static/resources.js')(app);\n  // cli commands\n  const cliCommands = require('./config/cli/commands.js')(app);\n  // meta\n  const meta = {\n    base: {\n      atoms: {},\n      statics: {\n        'a-base.resource': {\n          items: staticResources,\n        },\n      },\n    },\n    validation: {\n      validators: {},\n      keywords: {},\n      schemas,\n    },\n    cli: {\n      commands: cliCommands,\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  const models = {};\n  return models;\n};\n","module.exports = app => {\n  const routes = [];\n  return routes;\n};\n","module.exports = app => {\n  const services = {};\n  return services;\n};\n","module.exports = require(\"require3\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}