{"version":3,"sources":["webpack://egg-born-module-a-baseadmin/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-baseadmin/./backend/src/beans.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/config.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/errors.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/locales.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/static/resources.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/atomRight.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/auth.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/resourceRight.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/role.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/user.js","webpack://egg-born-module-a-baseadmin/./backend/src/controllers.js","webpack://egg-born-module-a-baseadmin/./backend/src/main.js","webpack://egg-born-module-a-baseadmin/./backend/src/meta.js","webpack://egg-born-module-a-baseadmin/./backend/src/model/authProvider.js","webpack://egg-born-module-a-baseadmin/./backend/src/models.js","webpack://egg-born-module-a-baseadmin/./backend/src/routes.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/atomRight.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/auth.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/resourceRight.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/role.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/user.js","webpack://egg-born-module-a-baseadmin/./backend/src/services.js","webpack://egg-born-module-a-baseadmin/external \"require3\"","webpack://egg-born-module-a-baseadmin/webpack/bootstrap","webpack://egg-born-module-a-baseadmin/webpack/startup"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC;;AAEA;AACA,kCAAkC;;AAElC,kCAAkC;;AAElC,kCAAkC;;AAElC;;AAEA;;AAEA;AACA;;;;;;;;ACpBA,uBAAuB,mBAAO,CAAC,GAA2B;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACZA;AACA,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACvCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;AC7CA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;ACrCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;AC1CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACnGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;ACjGA,aAAa,mBAAO,CAAC,GAAsB;AAC3C,aAAa,mBAAO,CAAC,EAAsB;AAC3C,kBAAkB,mBAAO,CAAC,GAA2B;AACrD,sBAAsB,mBAAO,CAAC,GAA+B;AAC7D,aAAa,mBAAO,CAAC,GAAsB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;;AAEA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AChCA;AACA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA,0BAA0B,mBAAO,CAAC,GAA8B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,kBAAkB;AAClB;AACA;AACA;AACA,OAAO;AAC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","file":"backend.js","sourcesContent":["module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version extends app.meta.BeanBase {\n\n    async update(options) {\n      if (options.version === 1) { }\n    }\n\n    async init(options) {\n      if (options.version === 1) { }\n\n      if (options.version === 2) { }\n\n      if (options.version === 3) { }\n\n    }\n\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","module.exports = {\n  'Basic Admin': '基础管理',\n  'User Management': '用户管理',\n  'Role Management': '角色管理',\n  'Atom Right Management': '原子权限管理',\n  'Resource Right Management': '资源权限管理',\n  'Menu Right Management': '菜单权限管理',\n  'Function Right Management': '功能权限管理',\n  'Auth Management': '认证管理',\n  'Menu Management': '菜单管理',\n  'Category Management': '目录管理',\n  'Tag Management': '标签管理',\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const resources = [\n    // function\n    {\n      atomName: 'User Management',\n      atomStaticKey: 'user',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/user/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Role Management',\n      atomStaticKey: 'role',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/role/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Atom Right Management',\n      atomStaticKey: 'atomRight',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/atomRight/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Resource Right Management',\n      atomStaticKey: 'resourceRight',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/resourceRight/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Auth Management',\n      atomStaticKey: 'auth',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/auth/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Category Management',\n      atomStaticKey: 'category',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/category/management',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Tag Management',\n      atomStaticKey: 'tag',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/tag/management',\n      }),\n      resourceRoles: 'template.system',\n    },\n  ];\n  return resources;\n};\n","module.exports = app => {\n  const schemas = {};\n  // role\n  schemas.role = {\n    type: 'object',\n    properties: {\n      roleName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Role name',\n        notEmpty: true,\n      },\n      leader: {\n        type: 'number',\n        ebType: 'toggle',\n        ebTitle: 'Leader',\n      },\n      sorting: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Sorting',\n      },\n    },\n  };\n  // auth\n  schemas.auth = {\n    type: 'object',\n    properties: {\n      clientID: {\n        type: 'string',\n        ebType: 'text',\n      },\n      clientSecret: {\n        type: 'string',\n        ebType: 'text',\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  class AtomRightController extends app.Controller {\n\n    async rights() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.atomRight.rights({\n        roleId: this.ctx.request.body.roleId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async add() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.atomRight.add({\n        roleId: this.ctx.request.body.roleId,\n        atomClass: this.ctx.request.body.atomClass,\n        actionCode: this.ctx.request.body.actionCode,\n        scopeSelf: this.ctx.request.body.scopeSelf,\n        scope: this.ctx.request.body.scope,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.atomRight.delete({\n        id: this.ctx.request.body.id,\n      });\n      this.ctx.success(res);\n    }\n\n    async spreads() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.atomRight.spreads({\n        roleId: this.ctx.request.body.roleId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n  }\n  return AtomRightController;\n};\n","module.exports = app => {\n  class AuthController extends app.Controller {\n\n    async list() {\n      const res = await this.service.auth.list();\n      this.ctx.success(res);\n    }\n\n    async disable() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.auth.disable({\n        id: this.ctx.request.body.id,\n        disabled: this.ctx.request.body.disabled,\n      });\n      this.ctx.success(res);\n    }\n\n    async item() {\n      const res = await this.service.auth.item({\n        id: this.ctx.request.body.id,\n      });\n      this.ctx.success(res);\n    }\n\n    async save() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.auth.save({\n        id: this.ctx.request.body.id,\n        config: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return AuthController;\n};\n","module.exports = app => {\n  class ResourceRightController extends app.Controller {\n\n    async rights() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.resourceRight.rights({\n        roleId: this.ctx.request.body.roleId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async add() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.resourceRight.add({\n        roleId: this.ctx.request.body.roleId,\n        atomIds: this.ctx.request.body.atomIds,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.resourceRight.delete({\n        id: this.ctx.request.body.id,\n      });\n      this.ctx.success(res);\n    }\n\n    async spreads() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.resourceRight.spreads({\n        roleId: this.ctx.request.body.roleId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n  }\n  return ResourceRightController;\n};\n","module.exports = app => {\n  class RoleController extends app.Controller {\n\n    async children() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.role.children({\n        roleId: this.ctx.request.body.roleId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async item() {\n      const res = await this.service.role.item({\n        roleId: this.ctx.request.body.roleId,\n      });\n      this.ctx.success(res);\n    }\n\n    async save() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      await this.service.role.save({\n        roleId: this.ctx.request.body.roleId,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success();\n    }\n\n    async add() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.add({\n        roleIdParent: this.ctx.request.body.roleIdParent,\n      });\n      this.ctx.success(res);\n    }\n\n    async move() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.move({\n        roleId: this.ctx.request.body.roleId,\n        roleIdParent: this.ctx.request.body.roleIdParent,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.delete({\n        roleId: this.ctx.request.body.roleId,\n      });\n      this.ctx.success(res);\n    }\n\n    async includes() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.role.includes({\n        roleId: this.ctx.request.body.roleId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async addRoleInc() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.addRoleInc({\n        roleId: this.ctx.request.body.roleId,\n        roleIdInc: this.ctx.request.body.roleIdInc,\n      });\n      this.ctx.success(res);\n    }\n\n    async removeRoleInc() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.removeRoleInc({\n        id: this.ctx.request.body.id,\n      });\n      this.ctx.success(res);\n    }\n\n    async dirty() {\n      const res = await this.service.role.dirty();\n      this.ctx.success(res);\n    }\n\n    async build() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.build();\n      this.ctx.success(res);\n    }\n\n  }\n  return RoleController;\n};\n","module.exports = app => {\n  class UserController extends app.Controller {\n\n    async select() {\n      const page = this.ctx.bean.util.page(this.ctx.request.body.page);\n      const items = await this.service.user.select({\n        query: this.ctx.request.body.query,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async list() {\n      const page = this.ctx.bean.util.page(this.ctx.request.body.page);\n      const items = await this.service.user.list({\n        roleId: this.ctx.request.body.roleId,\n        query: this.ctx.request.body.query,\n        anonymous: this.ctx.request.body.anonymous,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async item() {\n      const res = await this.service.user.item({\n        userId: this.ctx.request.body.userId,\n      });\n      this.ctx.success(res);\n    }\n\n    async disable() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.user.disable({\n        userId: this.ctx.request.body.userId,\n        disabled: this.ctx.request.body.disabled,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.user.delete({\n        userId: this.ctx.request.body.userId,\n      });\n      this.ctx.success(res);\n    }\n\n    async roles() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.user.roles({\n        userId: this.ctx.request.body.userId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async addRole() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.user.addRole({\n        userId: this.ctx.request.body.userId,\n        roleId: this.ctx.request.body.roleId,\n      });\n      this.ctx.success(res);\n    }\n\n    async removeRole() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.user.removeRole({\n        id: this.ctx.request.body.id,\n      });\n      this.ctx.success(res);\n    }\n\n    async atomRights() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.user.atomRights({\n        userId: this.ctx.request.body.userId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async resourceRights() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.user.resourceRights({\n        userId: this.ctx.request.body.userId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n  }\n  return UserController;\n};\n","const role = require('./controller/role.js');\nconst user = require('./controller/user.js');\nconst atomRight = require('./controller/atomRight.js');\nconst resourceRight = require('./controller/resourceRight.js');\nconst auth = require('./controller/auth.js');\n\nmodule.exports = app => {\n  const controllers = {\n    role,\n    user,\n    atomRight,\n    resourceRight,\n    auth,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n\n};\n","module.exports = app => {\n  // schemas\n  const schemas = require('./config/validation/schemas.js')(app);\n  // static\n  const staticResources = require('./config/static/resources.js')(app);\n  // meta\n  const meta = {\n    base: {\n      statics: {\n        'a-base.resource': {\n          items: staticResources,\n        },\n      },\n    },\n    validation: {\n      validators: {\n        role: {\n          schemas: 'role',\n        },\n        auth: {\n          schemas: 'auth',\n        },\n      },\n      keywords: {},\n      schemas: {\n        role: schemas.role,\n        auth: schemas.auth,\n      },\n    },\n    settings: {\n      instance: {\n        actionPath: 'settings/list',\n      },\n    },\n  };\n\n  return meta;\n};\n","module.exports = app => {\n\n  class AuthProvider extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aAuthProvider', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return AuthProvider;\n};\n","const authProvider = require('./model/authProvider.js');\n\nmodule.exports = app => {\n  const models = {\n    authProvider,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // role\n    { method: 'post', path: 'role/children', controller: 'role',\n      meta: { right: { type: 'resource,atom', name: 'role', action: 25 } },\n    },\n    { method: 'post', path: 'role/item', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    { method: 'post', path: 'role/save', controller: 'role', middlewares: 'validate',\n      meta: { validate: { validator: 'role' }, right: { type: 'resource', name: 'role' } },\n    },\n    { method: 'post', path: 'role/add', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    { method: 'post', path: 'role/move', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    { method: 'post', path: 'role/delete', controller: 'role', middlewares: 'transaction', meta: { right: { type: 'resource', name: 'role' } } },\n    { method: 'post', path: 'role/includes', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    { method: 'post', path: 'role/addRoleInc', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    { method: 'post', path: 'role/removeRoleInc', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    { method: 'post', path: 'role/dirty', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    { method: 'post', path: 'role/build', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    // user\n    { method: 'post', path: 'user/select', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/list', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/item', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/disable', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/delete', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/roles', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/addRole', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/removeRole', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/atomRights', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/resourceRights', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    // atomRight\n    { method: 'post', path: 'atomRight/rights', controller: 'atomRight', meta: { right: { type: 'resource', name: 'atomRight' } } },\n    { method: 'post', path: 'atomRight/add', controller: 'atomRight', meta: { right: { type: 'resource', name: 'atomRight' } } },\n    { method: 'post', path: 'atomRight/delete', controller: 'atomRight', meta: { right: { type: 'resource', name: 'atomRight' } } },\n    { method: 'post', path: 'atomRight/spreads', controller: 'atomRight', meta: { right: { type: 'resource', name: 'atomRight' } } },\n    // resourceRight\n    { method: 'post', path: 'resourceRight/rights', controller: 'resourceRight', meta: { right: { type: 'resource', name: 'resourceRight' } } },\n    { method: 'post', path: 'resourceRight/add', controller: 'resourceRight', meta: { right: { type: 'resource', name: 'resourceRight' } } },\n    { method: 'post', path: 'resourceRight/delete', controller: 'resourceRight', meta: { right: { type: 'resource', name: 'resourceRight' } } },\n    { method: 'post', path: 'resourceRight/spreads', controller: 'resourceRight', meta: { right: { type: 'resource', name: 'resourceRight' } } },\n    // functionRight\n    { method: 'post', path: 'functionRight/rights', controller: 'functionRight', meta: { right: { type: 'resource', name: 'functionRight' } } },\n    { method: 'post', path: 'functionRight/add', controller: 'functionRight', meta: { right: { type: 'resource', name: 'functionRight' } } },\n    { method: 'post', path: 'functionRight/delete', controller: 'functionRight', meta: { right: { type: 'resource', name: 'functionRight' } } },\n    { method: 'post', path: 'functionRight/spreads', controller: 'functionRight', meta: { right: { type: 'resource', name: 'functionRight' } } },\n    // auth\n    { method: 'post', path: 'auth/list', controller: 'auth', meta: { right: { type: 'resource', name: 'auth' } } },\n    { method: 'post', path: 'auth/disable', controller: 'auth', meta: { right: { type: 'resource', name: 'auth' } } },\n    { method: 'post', path: 'auth/item', controller: 'auth', meta: { right: { type: 'resource', name: 'auth' } } },\n    { method: 'post', path: 'auth/save', controller: 'auth', meta: { right: { type: 'resource', name: 'auth' } } },\n  ];\n  return routes;\n};\n","module.exports = app => {\n\n  class AtomRight extends app.Service {\n\n    async rights({ roleId, page }) {\n      return await this.ctx.bean.role.roleRights({ roleId, page });\n    }\n\n    async add({ roleId, atomClass, actionCode, scopeSelf, scope }) {\n      const _atomClass = await this.ctx.bean.atomClass.get(atomClass);\n      if (scopeSelf) {\n        scope = 0;\n      }\n      return await this.ctx.bean.role.addRoleRight({\n        roleId,\n        atomClassId: _atomClass.id,\n        action: actionCode,\n        scope,\n      });\n    }\n\n    async delete({ id }) {\n      return await this.ctx.bean.role.deleteRoleRight({ id });\n    }\n\n    async spreads({ roleId, page }) {\n      return await this.ctx.bean.role.roleSpreads({ roleId, page });\n    }\n\n  }\n\n  return AtomRight;\n};\n","const require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\n\nmodule.exports = app => {\n\n  class Auth extends app.Service {\n\n    async list() {\n      // list\n      const list = await this.ctx.model.authProvider.select();\n      // meta\n      const authProviders = this.ctx.bean.base.authProviders();\n      for (const item of list) {\n        const key = `${item.module}:${item.providerName}`;\n        const authProvider = authProviders[key];\n        item.meta = authProvider ? authProvider.meta : null;\n      }\n      // ok\n      return list;\n    }\n\n    async disable({ id, disabled }) {\n      // update\n      await this.ctx.model.authProvider.update({ id, disabled });\n      // item\n      const item = await this.ctx.model.authProvider.get({ id });\n      // broadcast\n      this.ctx.app.meta.broadcast.emit({\n        subdomain: this.ctx.subdomain,\n        module: 'a-base',\n        broadcastName: 'authProviderChanged',\n        data: {\n          module: item.module,\n          providerName: item.providerName,\n        },\n      });\n    }\n\n    async item({ id }) {\n      // item\n      const item = await this.ctx.model.authProvider.get({ id });\n      // meta\n      const authProviders = this.ctx.bean.base.authProviders();\n      const authProvider = authProviders[`${item.module}:${item.providerName}`];\n      if (authProvider.meta.mode === 'redirect') {\n        const moduleInfo = mparse.parseInfo(item.module);\n        const loginURL = this.ctx.bean.base.getAbsoluteUrl(`/api/${moduleInfo.url}/passport/${item.module}/${item.providerName}`);\n        const callbackURL = this.ctx.bean.base.getAbsoluteUrl(`/api/${moduleInfo.url}/passport/${item.module}/${item.providerName}/callback`);\n        item._meta = {\n          loginURL,\n          callbackURL,\n        };\n      }\n      // ok\n      return item;\n    }\n\n    async save({ id, config }) {\n      // update\n      await this.ctx.model.authProvider.update({ id, config: JSON.stringify(config) });\n      // item\n      const item = await this.ctx.model.authProvider.get({ id });\n      // broadcast\n      this.ctx.app.meta.broadcast.emit({\n        subdomain: this.ctx.subdomain,\n        module: 'a-base',\n        broadcastName: 'authProviderChanged',\n        data: {\n          module: item.module,\n          providerName: item.providerName,\n        },\n      });\n    }\n\n  }\n\n  return Auth;\n};\n","module.exports = app => {\n\n  class ResourceRight extends app.Service {\n\n    async rights({ roleId, page }) {\n      return await this.ctx.bean.resource.resourceRights({ roleId, page });\n    }\n\n    async add({ roleId, atomIds }) {\n      return await this.ctx.bean.resource.addResourceRoles({ roleId, atomIds });\n    }\n\n    async delete({ id }) {\n      return await this.ctx.bean.resource.deleteResourceRole({ id });\n    }\n\n    async spreads({ roleId, page }) {\n      return await this.ctx.bean.resource.resourceSpreads({ roleId, page });\n    }\n\n  }\n\n  return ResourceRight;\n};\n","module.exports = app => {\n\n  class Role extends app.Service {\n\n    async children({ roleId, page }) {\n      return await this.ctx.bean.role.children({ roleId, page });\n    }\n\n    async item({ roleId }) {\n      return await this.ctx.bean.role.get({ id: roleId });\n    }\n\n    async save({ roleId, data }) {\n      return await this.ctx.bean.role.save({ roleId, data });\n    }\n\n    async add({ roleIdParent }) {\n      return await this.ctx.bean.role.add({ roleIdParent });\n    }\n\n    async move({ roleId, roleIdParent }) {\n      return await this.ctx.bean.role.move({ roleId, roleIdParent });\n    }\n\n    async delete({ roleId }) {\n      return await this.ctx.bean.role.delete({ roleId });\n    }\n\n    async includes({ roleId, page }) {\n      return await this.ctx.bean.role.includes({ roleId, page });\n    }\n\n    async addRoleInc({ roleId, roleIdInc }) {\n      return await this.ctx.bean.role.addRoleInc({ roleId, roleIdInc });\n    }\n\n    async removeRoleInc({ id }) {\n      return await this.ctx.bean.role.removeRoleInc({ id });\n    }\n\n    async dirty() {\n      return await this.ctx.bean.role.getDirty();\n    }\n\n    async build() {\n      const progressId = await this.ctx.bean.progress.create();\n      this.ctx.runInBackground(async () => {\n        await this._buildInBackground({ progressId });\n      });\n      return { progressId };\n    }\n\n    async _buildInBackground({ progressId }) {\n      return await this.ctx.bean.role.build({ progressId });\n    }\n\n  }\n\n  return Role;\n};\n","module.exports = app => {\n\n  class User extends app.Service {\n\n    async select({ query, page }) {\n      return await this.ctx.bean.user.select({\n        options: {\n          where: {\n            'a.anonymous': 0,\n            'a.disabled': 0,\n            __or__: [\n              { 'a.userName': { op: 'like', val: query } },\n              { 'a.realName': { op: 'like', val: query } },\n              { 'a.mobile': { op: 'like', val: query } },\n            ],\n          },\n          orders: [[ 'a.userName', 'asc' ]],\n          page,\n          removePrivacy: true,\n        },\n      });\n    }\n\n    async list({ roleId, query, anonymous, page }) {\n      return await this.ctx.bean.user.list({ roleId, query, anonymous, page });\n    }\n\n    async item({ userId }) {\n      return await this.ctx.bean.user.get({ id: userId });\n    }\n\n    async disable({ userId, disabled }) {\n      return await this.ctx.bean.user.disable({ userId, disabled });\n    }\n\n    async delete({ userId }) {\n      return await this.ctx.bean.user.delete({ userId });\n    }\n\n    async roles({ userId, page }) {\n      return await this.ctx.bean.user.roles({ userId, page });\n    }\n\n    async addRole({ userId, roleId }) {\n      return await this.ctx.bean.role.addUserRole({ userId, roleId });\n    }\n\n    async removeRole({ id }) {\n      return await this.ctx.bean.role.deleteUserRole({ id });\n    }\n\n    async atomRights({ userId, page }) {\n      return await this.ctx.bean.role.atomRightsOfUser({ userId, page });\n    }\n\n    async resourceRights({ userId, page }) {\n      return await this.ctx.bean.resource.resourceRightsOfUser({ userId, page });\n    }\n\n  }\n\n  return User;\n};\n","const role = require('./service/role.js');\nconst user = require('./service/user.js');\nconst atomRight = require('./service/atomRight.js');\nconst resourceRight = require('./service/resourceRight.js');\nconst auth = require('./service/auth.js');\n\nmodule.exports = app => {\n  const services = {\n    role,\n    user,\n    atomRight,\n    resourceRight,\n    auth,\n  };\n  return services;\n};\n","module.exports = require(\"require3\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n"],"sourceRoot":""}