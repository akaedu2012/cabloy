{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACzBA,uBAAuB,mBAAO,CAAC,GAA2B;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;;;;;;;;ACDA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;AC/FA,aAAa,mBAAO,CAAC,GAAsB;AAC3C,aAAa,mBAAO,CAAC,EAAsB;AAC3C,kBAAkB,mBAAO,CAAC,GAA2B;AACrD,sBAAsB,mBAAO,CAAC,GAA+B;AAC7D,aAAa,mBAAO,CAAC,GAAsB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9BA;AACA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA,0BAA0B,mBAAO,CAAC,GAA8B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,kBAAkB;AAClB;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;;ACrCA;AACA;AACA;AACA,mBAAmB,mCAAmC,wBAAwB;AAC9E;AACA;;AAEA;AACA;;;;;;;;ACRA,qBAAqB,mBAAO,CAAC,GAAyB;;AAEtD;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,mDAAmD;AAC1E,KAAK;AACL,MAAM,+DAA+D,SAAS,oCAAoC;AAClH;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY,mBAAmB,WAAW,kCAAkC;AAC1F,KAAK;AACL,MAAM,8DAA8D,SAAS,oCAAoC;AACjH,MAAM,+DAA+D,SAAS,oCAAoC;AAClH;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD,KAAK;AACL,MAAM,mEAAmE,SAAS,oCAAoC;AACtH;AACA;AACA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD,KAAK;AACL,MAAM,gEAAgE,SAAS,oCAAoC;AACnH,MAAM,gEAAgE,SAAS,oCAAoC;AACnH;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,8CAA8C;AACrE,KAAK;AACL,MAAM,+DAA+D,SAAS,oCAAoC;AAClH,MAAM,+DAA+D,SAAS,oCAAoC;AAClH,MAAM,kEAAkE,SAAS,oCAAoC;AACrH,MAAM,iEAAiE,SAAS,oCAAoC;AACpH,MAAM,gEAAgE,SAAS,oCAAoC;AACnH,MAAM,kEAAkE,SAAS,oCAAoC;AACrH;AACA;AACA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,uCAAuC;AAC9D,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,uCAAuC;AAC9D,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,uCAAuC;AAC9D,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,uCAAuC;AAC9D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,2CAA2C;AAClE,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,2CAA2C;AAClE,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,2CAA2C;AAClE,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,2CAA2C;AAClE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,2CAA2C;AAClE,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,2CAA2C;AAClE,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,2CAA2C;AAClE,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,2CAA2C;AAClE,KAAK;AACL;AACA,MAAM,+DAA+D,SAAS,oCAAoC;AAClH,MAAM,kEAAkE,SAAS,oCAAoC;AACrH,MAAM,+DAA+D,SAAS,oCAAoC;AAClH,MAAM,+DAA+D,SAAS,oCAAoC;AAClH;AACA;AACA;;;;;;;;AC1JA;AACA;AACA,mBAAmB,cAAc;AACjC,mDAAmD,cAAc;AACjE;;AAEA,gBAAgB,iDAAiD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,mBAAmB,IAAI;AACvB,wDAAwD,IAAI;AAC5D;;AAEA,oBAAoB,cAAc;AAClC,oDAAoD,cAAc;AAClE;AACA;;AAEA;AACA;;;;;;;;AC7BA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY,GAAG,kBAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc;AAClC;AACA,iDAAiD,cAAc;A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","sources":["webpack://egg-born-module-a-baseadmin/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-baseadmin/./backend/src/beans.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/config.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/errors.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/locales.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/static/resources.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/atomRight.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/auth.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/resourceRight.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/role.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/user.js","webpack://egg-born-module-a-baseadmin/./backend/src/controllers.js","webpack://egg-born-module-a-baseadmin/./backend/src/main.js","webpack://egg-born-module-a-baseadmin/./backend/src/meta.js","webpack://egg-born-module-a-baseadmin/./backend/src/model/authProvider.js","webpack://egg-born-module-a-baseadmin/./backend/src/models.js","webpack://egg-born-module-a-baseadmin/./backend/src/routes.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/atomRight.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/auth.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/resourceRight.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/role.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/user.js","webpack://egg-born-module-a-baseadmin/./backend/src/services.js","webpack://egg-born-module-a-baseadmin/external commonjs2 \"require3\"","webpack://egg-born-module-a-baseadmin/webpack/bootstrap","webpack://egg-born-module-a-baseadmin/webpack/before-startup","webpack://egg-born-module-a-baseadmin/webpack/startup","webpack://egg-born-module-a-baseadmin/webpack/after-startup"],"sourcesContent":["module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        // empty\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // empty\n      }\n\n      if (options.version === 2) {\n        // empty\n      }\n\n      if (options.version === 3) {\n        // empty\n      }\n    }\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {};\n","module.exports = {\n  'Atom Right Management': 'Data Right Management',\n};\n","module.exports = {\n  'Basic Admin': '基础管理',\n  'User Management': '用户管理',\n  'Role Management': '角色管理',\n  'Atom Right Management': '数据权限管理',\n  'Resource Right Management': '资源权限管理',\n  'Menu Right Management': '菜单权限管理',\n  'Function Right Management': '功能权限管理',\n  'Auth Management': '认证管理',\n  'Menu Management': '菜单管理',\n  'Category Management': '目录管理',\n  'Tag Management': '标签管理',\n  'Select Users': '选择用户',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const resources = [\n    // function\n    {\n      atomName: 'User Management',\n      atomStaticKey: 'user',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/user/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Role Management',\n      atomStaticKey: 'role',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/role/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Atom Right Management',\n      atomStaticKey: 'atomRight',\n      atomRevision: 1,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/atomRight/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Resource Right Management',\n      atomStaticKey: 'resourceRight',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/resourceRight/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Auth Management',\n      atomStaticKey: 'auth',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/auth/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Category Management',\n      atomStaticKey: 'category',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/category/management',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Tag Management',\n      atomStaticKey: 'tag',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/tag/management',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Select Users',\n      atomStaticKey: 'selectUsers',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({}),\n      resourceRoles: 'template.system',\n    },\n  ];\n  return resources;\n};\n","module.exports = app => {\n  const schemas = {};\n  // role\n  schemas.role = {\n    type: 'object',\n    properties: {\n      roleName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Role name',\n        notEmpty: true,\n      },\n      leader: {\n        type: 'number',\n        ebType: 'toggle',\n        ebTitle: 'Leader',\n      },\n      sorting: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Sorting',\n      },\n    },\n  };\n  // auth\n  schemas.auth = {\n    type: 'object',\n    properties: {\n      clientID: {\n        type: 'string',\n        ebType: 'text',\n      },\n      clientSecret: {\n        type: 'string',\n        ebType: 'text',\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  class AtomRightController extends app.Controller {\n    async rights() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.atomRight.rights({\n        roleId: this.ctx.request.body.roleId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async add() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.atomRight.add({\n        roleId: this.ctx.request.body.roleId,\n        atomClass: this.ctx.request.body.atomClass,\n        actionCode: this.ctx.request.body.actionCode,\n        scopeSelf: this.ctx.request.body.scopeSelf,\n        scope: this.ctx.request.body.scope,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.atomRight.delete({\n        id: this.ctx.request.body.id,\n      });\n      this.ctx.success(res);\n    }\n\n    async spreads() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.atomRight.spreads({\n        roleId: this.ctx.request.body.roleId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n  }\n  return AtomRightController;\n};\n","module.exports = app => {\n  class AuthController extends app.Controller {\n    async list() {\n      const res = await this.service.auth.list();\n      this.ctx.success(res);\n    }\n\n    async disable() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.auth.disable({\n        id: this.ctx.request.body.id,\n        disabled: this.ctx.request.body.disabled,\n      });\n      this.ctx.success(res);\n    }\n\n    async item() {\n      const res = await this.service.auth.item({\n        id: this.ctx.request.body.id,\n      });\n      this.ctx.success(res);\n    }\n\n    async save() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.auth.save({\n        id: this.ctx.request.body.id,\n        config: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return AuthController;\n};\n","module.exports = app => {\n  class ResourceRightController extends app.Controller {\n    async rights() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.resourceRight.rights({\n        roleId: this.ctx.request.body.roleId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async add() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.resourceRight.add({\n        roleId: this.ctx.request.body.roleId,\n        atomIds: this.ctx.request.body.atomIds,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.resourceRight.delete({\n        id: this.ctx.request.body.id,\n      });\n      this.ctx.success(res);\n    }\n\n    async spreads() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.resourceRight.spreads({\n        roleId: this.ctx.request.body.roleId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n  }\n  return ResourceRightController;\n};\n","module.exports = app => {\n  class RoleController extends app.Controller {\n    async children() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.role.children({\n        roleId: this.ctx.request.body.roleId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async item() {\n      const res = await this.service.role.item({\n        roleId: this.ctx.request.body.roleId,\n      });\n      this.ctx.success(res);\n    }\n\n    async save() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      await this.service.role.save({\n        roleId: this.ctx.request.body.roleId,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success();\n    }\n\n    async add() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.add({\n        roleIdParent: this.ctx.request.body.roleIdParent,\n      });\n      this.ctx.success(res);\n    }\n\n    async move() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.move({\n        roleId: this.ctx.request.body.roleId,\n        roleIdParent: this.ctx.request.body.roleIdParent,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.delete({\n        roleId: this.ctx.request.body.roleId,\n      });\n      this.ctx.success(res);\n    }\n\n    async includes() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.role.includes({\n        roleId: this.ctx.request.body.roleId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async addRoleInc() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.addRoleInc({\n        roleId: this.ctx.request.body.roleId,\n        roleIdInc: this.ctx.request.body.roleIdInc,\n      });\n      this.ctx.success(res);\n    }\n\n    async removeRoleInc() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.removeRoleInc({\n        id: this.ctx.request.body.id,\n      });\n      this.ctx.success(res);\n    }\n\n    async dirty() {\n      const res = await this.service.role.dirty();\n      this.ctx.success(res);\n    }\n\n    async build() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.build();\n      this.ctx.success(res);\n    }\n  }\n  return RoleController;\n};\n","module.exports = app => {\n  class UserController extends app.Controller {\n    async select() {\n      const page = this.ctx.bean.util.page(this.ctx.request.body.page);\n      const items = await this.service.user.select({\n        query: this.ctx.request.body.query,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async list() {\n      const page = this.ctx.bean.util.page(this.ctx.request.body.page);\n      const items = await this.service.user.list({\n        roleId: this.ctx.request.body.roleId,\n        query: this.ctx.request.body.query,\n        anonymous: this.ctx.request.body.anonymous,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async item() {\n      const res = await this.service.user.item({\n        userId: this.ctx.request.body.userId,\n      });\n      this.ctx.success(res);\n    }\n\n    async disable() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.user.disable({\n        userId: this.ctx.request.body.userId,\n        disabled: this.ctx.request.body.disabled,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.user.delete({\n        userId: this.ctx.request.body.userId,\n      });\n      this.ctx.success(res);\n    }\n\n    async roles() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.user.roles({\n        userId: this.ctx.request.body.userId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async addRole() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.user.addRole({\n        userId: this.ctx.request.body.userId,\n        roleId: this.ctx.request.body.roleId,\n      });\n      this.ctx.success(res);\n    }\n\n    async removeRole() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.user.removeRole({\n        id: this.ctx.request.body.id,\n      });\n      this.ctx.success(res);\n    }\n\n    async atomRights() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.user.atomRights({\n        userId: this.ctx.request.body.userId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async resourceRights() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.user.resourceRights({\n        userId: this.ctx.request.body.userId,\n        page,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n  }\n  return UserController;\n};\n","const role = require('./controller/role.js');\nconst user = require('./controller/user.js');\nconst atomRight = require('./controller/atomRight.js');\nconst resourceRight = require('./controller/resourceRight.js');\nconst auth = require('./controller/auth.js');\n\nmodule.exports = app => {\n  const controllers = {\n    role,\n    user,\n    atomRight,\n    resourceRight,\n    auth,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n};\n","module.exports = app => {\n  // schemas\n  const schemas = require('./config/validation/schemas.js')(app);\n  // static\n  const staticResources = require('./config/static/resources.js')(app);\n  // meta\n  const meta = {\n    base: {\n      statics: {\n        'a-base.resource': {\n          items: staticResources,\n        },\n      },\n    },\n    validation: {\n      validators: {\n        role: {\n          schemas: 'role',\n        },\n        auth: {\n          schemas: 'auth',\n        },\n      },\n      keywords: {},\n      schemas: {\n        role: schemas.role,\n        auth: schemas.auth,\n      },\n    },\n    settings: {\n      instance: {\n        actionPath: 'settings/list',\n      },\n    },\n  };\n\n  return meta;\n};\n","module.exports = app => {\n  class AuthProvider extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAuthProvider', options: { disableDeleted: true } });\n    }\n  }\n\n  return AuthProvider;\n};\n","const authProvider = require('./model/authProvider.js');\n\nmodule.exports = app => {\n  const models = {\n    authProvider,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // role\n    {\n      method: 'post',\n      path: 'role/children',\n      controller: 'role',\n      meta: { right: { type: 'resource,atom', name: 'role', action: 25 } },\n    },\n    { method: 'post', path: 'role/item', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    {\n      method: 'post',\n      path: 'role/save',\n      controller: 'role',\n      middlewares: 'validate',\n      meta: { validate: { validator: 'role' }, right: { type: 'resource', name: 'role' } },\n    },\n    { method: 'post', path: 'role/add', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    { method: 'post', path: 'role/move', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    {\n      method: 'post',\n      path: 'role/delete',\n      controller: 'role',\n      middlewares: 'transaction',\n      meta: { right: { type: 'resource', name: 'role' } },\n    },\n    { method: 'post', path: 'role/includes', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    {\n      method: 'post',\n      path: 'role/addRoleInc',\n      controller: 'role',\n      meta: { right: { type: 'resource', name: 'role' } },\n    },\n    {\n      method: 'post',\n      path: 'role/removeRoleInc',\n      controller: 'role',\n      meta: { right: { type: 'resource', name: 'role' } },\n    },\n    { method: 'post', path: 'role/dirty', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    { method: 'post', path: 'role/build', controller: 'role', meta: { right: { type: 'resource', name: 'role' } } },\n    // user\n    {\n      method: 'post',\n      path: 'user/select',\n      controller: 'user',\n      meta: { right: { type: 'resource', name: 'user,selectUsers' } },\n    },\n    { method: 'post', path: 'user/list', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/item', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/disable', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/delete', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/roles', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    { method: 'post', path: 'user/addRole', controller: 'user', meta: { right: { type: 'resource', name: 'user' } } },\n    {\n      method: 'post',\n      path: 'user/removeRole',\n      controller: 'user',\n      meta: { right: { type: 'resource', name: 'user' } },\n    },\n    {\n      method: 'post',\n      path: 'user/atomRights',\n      controller: 'user',\n      meta: { right: { type: 'resource', name: 'user' } },\n    },\n    {\n      method: 'post',\n      path: 'user/resourceRights',\n      controller: 'user',\n      meta: { right: { type: 'resource', name: 'user' } },\n    },\n    // atomRight\n    {\n      method: 'post',\n      path: 'atomRight/rights',\n      controller: 'atomRight',\n      meta: { right: { type: 'resource', name: 'atomRight' } },\n    },\n    {\n      method: 'post',\n      path: 'atomRight/add',\n      controller: 'atomRight',\n      meta: { right: { type: 'resource', name: 'atomRight' } },\n    },\n    {\n      method: 'post',\n      path: 'atomRight/delete',\n      controller: 'atomRight',\n      meta: { right: { type: 'resource', name: 'atomRight' } },\n    },\n    {\n      method: 'post',\n      path: 'atomRight/spreads',\n      controller: 'atomRight',\n      meta: { right: { type: 'resource', name: 'atomRight' } },\n    },\n    // resourceRight\n    {\n      method: 'post',\n      path: 'resourceRight/rights',\n      controller: 'resourceRight',\n      meta: { right: { type: 'resource', name: 'resourceRight' } },\n    },\n    {\n      method: 'post',\n      path: 'resourceRight/add',\n      controller: 'resourceRight',\n      meta: { right: { type: 'resource', name: 'resourceRight' } },\n    },\n    {\n      method: 'post',\n      path: 'resourceRight/delete',\n      controller: 'resourceRight',\n      meta: { right: { type: 'resource', name: 'resourceRight' } },\n    },\n    {\n      method: 'post',\n      path: 'resourceRight/spreads',\n      controller: 'resourceRight',\n      meta: { right: { type: 'resource', name: 'resourceRight' } },\n    },\n    // functionRight\n    {\n      method: 'post',\n      path: 'functionRight/rights',\n      controller: 'functionRight',\n      meta: { right: { type: 'resource', name: 'functionRight' } },\n    },\n    {\n      method: 'post',\n      path: 'functionRight/add',\n      controller: 'functionRight',\n      meta: { right: { type: 'resource', name: 'functionRight' } },\n    },\n    {\n      method: 'post',\n      path: 'functionRight/delete',\n      controller: 'functionRight',\n      meta: { right: { type: 'resource', name: 'functionRight' } },\n    },\n    {\n      method: 'post',\n      path: 'functionRight/spreads',\n      controller: 'functionRight',\n      meta: { right: { type: 'resource', name: 'functionRight' } },\n    },\n    // auth\n    { method: 'post', path: 'auth/list', controller: 'auth', meta: { right: { type: 'resource', name: 'auth' } } },\n    { method: 'post', path: 'auth/disable', controller: 'auth', meta: { right: { type: 'resource', name: 'auth' } } },\n    { method: 'post', path: 'auth/item', controller: 'auth', meta: { right: { type: 'resource', name: 'auth' } } },\n    { method: 'post', path: 'auth/save', controller: 'auth', meta: { right: { type: 'resource', name: 'auth' } } },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class AtomRight extends app.Service {\n    async rights({ roleId, page }) {\n      return await this.ctx.bean.role.roleRights({ roleId, page });\n    }\n\n    async add({ roleId, atomClass, actionCode, scopeSelf, scope }) {\n      const _atomClass = await this.ctx.bean.atomClass.get(atomClass);\n      if (scopeSelf) {\n        scope = 0;\n      }\n      return await this.ctx.bean.role.addRoleRight({\n        roleId,\n        atomClassId: _atomClass.id,\n        action: actionCode,\n        scope,\n      });\n    }\n\n    async delete({ id }) {\n      return await this.ctx.bean.role.deleteRoleRight({ id });\n    }\n\n    async spreads({ roleId, page }) {\n      return await this.ctx.bean.role.roleSpreads({ roleId, page });\n    }\n  }\n\n  return AtomRight;\n};\n","const require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\n\nmodule.exports = app => {\n  class Auth extends app.Service {\n    async list() {\n      // list\n      const list = await this.ctx.model.authProvider.select();\n      // meta\n      const authProviders = this.ctx.bean.base.authProviders();\n      for (const item of list) {\n        const key = `${item.module}:${item.providerName}`;\n        const authProvider = authProviders[key];\n        item.meta = authProvider ? authProvider.meta : null;\n      }\n      // ok\n      return list;\n    }\n\n    async disable({ id, disabled }) {\n      // update\n      await this.ctx.model.authProvider.update({ id, disabled });\n      // item\n      const item = await this.ctx.model.authProvider.get({ id });\n      // broadcast\n      this.ctx.app.meta.broadcast.emit({\n        subdomain: this.ctx.subdomain,\n        module: 'a-base',\n        broadcastName: 'authProviderChanged',\n        data: {\n          module: item.module,\n          providerName: item.providerName,\n        },\n      });\n    }\n\n    async item({ id }) {\n      // item\n      const item = await this.ctx.model.authProvider.get({ id });\n      // meta\n      const authProviders = this.ctx.bean.base.authProviders();\n      const authProvider = authProviders[`${item.module}:${item.providerName}`];\n      if (authProvider.meta.mode === 'redirect') {\n        const moduleInfo = mparse.parseInfo(item.module);\n        const loginURL = this.ctx.bean.base.getAbsoluteUrl(\n          `/api/${moduleInfo.url}/passport/${item.module}/${item.providerName}`\n        );\n        const callbackURL = this.ctx.bean.base.getAbsoluteUrl(\n          `/api/${moduleInfo.url}/passport/${item.module}/${item.providerName}/callback`\n        );\n        item._meta = {\n          loginURL,\n          callbackURL,\n        };\n      }\n      // ok\n      return item;\n    }\n\n    async save({ id, config }) {\n      // update\n      await this.ctx.model.authProvider.update({ id, config: JSON.stringify(config) });\n      // item\n      const item = await this.ctx.model.authProvider.get({ id });\n      // broadcast\n      this.ctx.app.meta.broadcast.emit({\n        subdomain: this.ctx.subdomain,\n        module: 'a-base',\n        broadcastName: 'authProviderChanged',\n        data: {\n          module: item.module,\n          providerName: item.providerName,\n        },\n      });\n    }\n  }\n\n  return Auth;\n};\n","module.exports = app => {\n  class ResourceRight extends app.Service {\n    async rights({ roleId, page }) {\n      return await this.ctx.bean.resource.resourceRights({ roleId, page });\n    }\n\n    async add({ roleId, atomIds }) {\n      return await this.ctx.bean.resource.addResourceRoles({ roleId, atomIds });\n    }\n\n    async delete({ id }) {\n      return await this.ctx.bean.resource.deleteResourceRole({ id });\n    }\n\n    async spreads({ roleId, page }) {\n      return await this.ctx.bean.resource.resourceSpreads({ roleId, page });\n    }\n  }\n\n  return ResourceRight;\n};\n","module.exports = app => {\n  class Role extends app.Service {\n    async children({ roleId, page }) {\n      return await this.ctx.bean.role.children({ roleId, page });\n    }\n\n    async item({ roleId }) {\n      return await this.ctx.bean.role.get({ id: roleId });\n    }\n\n    async save({ roleId, data }) {\n      return await this.ctx.bean.role.save({ roleId, data });\n    }\n\n    async add({ roleIdParent }) {\n      return await this.ctx.bean.role.add({ roleIdParent });\n    }\n\n    async move({ roleId, roleIdParent }) {\n      return await this.ctx.bean.role.move({ roleId, roleIdParent });\n    }\n\n    async delete({ roleId }) {\n      return await this.ctx.bean.role.delete({ roleId });\n    }\n\n    async includes({ roleId, page }) {\n      return await this.ctx.bean.role.includes({ roleId, page });\n    }\n\n    async addRoleInc({ roleId, roleIdInc }) {\n      return await this.ctx.bean.role.addRoleInc({ roleId, roleIdInc });\n    }\n\n    async removeRoleInc({ id }) {\n      return await this.ctx.bean.role.removeRoleInc({ id });\n    }\n\n    async dirty() {\n      return await this.ctx.bean.role.getDirty();\n    }\n\n    async build() {\n      const progressId = await this.ctx.bean.progress.create();\n      this.ctx.runInBackground(async () => {\n        await this._buildInBackground({ progressId });\n      });\n      return { progressId };\n    }\n\n    async _buildInBackground({ progressId }) {\n      return await this.ctx.bean.role.build({ progressId });\n    }\n  }\n\n  return Role;\n};\n","module.exports = app => {\n  class User extends app.Service {\n    async select(params) {\n      return await this.ctx.bean.user.selectGeneral({ params });\n    }\n\n    async list({ roleId, query, anonymous, page }) {\n      return await this.ctx.bean.user.list({ roleId, query, anonymous, page });\n    }\n\n    async item({ userId }) {\n      return await this.ctx.bean.user.get({ id: userId });\n    }\n\n    async disable({ userId, disabled }) {\n      return await this.ctx.bean.user.disable({ userId, disabled });\n    }\n\n    async delete({ userId }) {\n      return await this.ctx.bean.user.delete({ userId });\n    }\n\n    async roles({ userId, page }) {\n      return await this.ctx.bean.user.roles({ userId, page });\n    }\n\n    async addRole({ userId, roleId }) {\n      return await this.ctx.bean.role.addUserRole({ userId, roleId });\n    }\n\n    async removeRole({ id }) {\n      return await this.ctx.bean.role.deleteUserRole({ id });\n    }\n\n    async atomRights({ userId, page }) {\n      return await this.ctx.bean.role.atomRightsOfUser({ userId, page });\n    }\n\n    async resourceRights({ userId, page }) {\n      return await this.ctx.bean.resource.resourceRightsOfUser({ userId, page });\n    }\n  }\n\n  return User;\n};\n","const role = require('./service/role.js');\nconst user = require('./service/user.js');\nconst atomRight = require('./service/atomRight.js');\nconst resourceRight = require('./service/resourceRight.js');\nconst auth = require('./service/auth.js');\n\nmodule.exports = app => {\n  const services = {\n    role,\n    user,\n    atomRight,\n    resourceRight,\n    auth,\n  };\n  return services;\n};\n","module.exports = require(\"require3\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}