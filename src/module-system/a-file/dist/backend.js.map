{"version":3,"sources":["webpack://egg-born-module-a-file/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-file/./backend/src/beans.js","webpack://egg-born-module-a-file/./backend/src/config/config.js","webpack://egg-born-module-a-file/./backend/src/config/errors.js","webpack://egg-born-module-a-file/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-file/./backend/src/config/locales.js","webpack://egg-born-module-a-file/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-file/./backend/src/controller/file.js","webpack://egg-born-module-a-file/./backend/src/controllers.js","webpack://egg-born-module-a-file/./backend/src/main.js","webpack://egg-born-module-a-file/./backend/src/meta.js","webpack://egg-born-module-a-file/./backend/src/model/file.js","webpack://egg-born-module-a-file/./backend/src/model/fileView.js","webpack://egg-born-module-a-file/./backend/src/models.js","webpack://egg-born-module-a-file/./backend/src/routes.js","webpack://egg-born-module-a-file/./backend/src/service/file.js","webpack://egg-born-module-a-file/./backend/src/services.js","webpack://egg-born-module-a-file/external \"fs\"","webpack://egg-born-module-a-file/external \"path\"","webpack://egg-born-module-a-file/external \"require3\"","webpack://egg-born-module-a-file/webpack/bootstrap","webpack://egg-born-module-a-file/webpack/startup"],"names":[],"mappings":";;;;;;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC/DA,uBAAuB,mBAAO,CAAC,GAA2B;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;;ACFA;AACA,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACFA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA,SAAS;AACT;AACA,sCAAsC;AACtC,OAAO;AACP,uCAAuC;AACvC;AACA;AACA,sDAAsD,UAAU;AAChE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,aAAa;AAC/D;AACA,mDAAmD,aAAa;AAChE;AACA,sDAAsD,eAAe;AACrE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,aAAa;AAC/D;AACA,mDAAmD,aAAa;AAChE;AACA,sDAAsD,SAAS;AAC/D;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;;;;;;;AClGA,aAAa,mBAAO,CAAC,GAAsB;;;AAG3C;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACRA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;;AAEA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC/BA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP,kBAAkB;AAClB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACrBA;AACA;AACA;AACA,kBAAkB,2BAA2B,wBAAwB,EAAE;AACvE;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,+BAA+B,wBAAwB,EAAE;AAC3E;AACA;AACA;AACA;;;;;;;;ACPA,aAAa,mBAAO,CAAC,GAAiB;AACtC,iBAAiB,mBAAO,CAAC,EAAqB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA,KAAK,iEAAiE,QAAQ,aAAa,EAAE,EAAE;AAC/F,KAAK,kGAAkG,QAAQ,gBAAgB,EAAE,EAAE;AACnI,KAAK,wDAAwD;AAC7D,KAAK,0DAA0D;AAC/D,KAAK,sFAAsF;AAC3F,KAAK,uDAAuD;AAC5D;AACA;AACA;;;;;;;;ACXA,aAAa,mBAAO,CAAC,GAAM;AAC3B,WAAW,mBAAO,CAAC,GAAI;AACvB,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,SAAS;AAC3B;AACA,kDAAkD,aAAa;AAC/D;AACA,wCAAwC,aAAa;AACrD;AACA;AACA,6CAA6C,OAAO,sBAAsB,SAAS,iBAAiB,EAAE;AACtG;AACA;;AAEA,kBAAkB,eAAe;AACjC;AACA,gDAAgD,aAAa;AAC7D;AACA;AACA;AACA;;AAEA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kCAAkC;AACrE,OAAO;AACP;AACA;AACA;AACA;;AAEA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gCAAgC,uDAAuD,GAAG,2BAA2B;AACrH;AACA;AACA,6CAA6C,UAAU,EAAE,aAAa;;AAEtE;AACA;AACA;AACA,yCAAyC,wBAAwB;AACjE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,uCAAuC,wBAAwB;AAC/D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,6CAA6C,OAAO,SAAS,SAAS,gBAAgB,QAAQ;AAC9F;;AAEA;AACA,+CAA+C,0CAA0C;AACzF;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,8BAA8B,wBAAwB;AACtD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,oBAAoB,oCAAoC;AACxD,6CAA6C,WAAW,EAAE,0CAA0C;AACpG;AACA,iBAAiB,IAAI,UAAU,OAAO;AACtC;AACA;AACA;;AAEA,gCAAgC,qBAAqB;AACrD;AACA,8CAA8C,qBAAqB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,aAAa;AACzD;;AAEA,oBAAoB,oCAAoC;AACxD;AACA;AACA;AACA;;AAEA;AACA,oDAAoD,qBAAqB;AACzE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,sCAAsC,OAAO;AAC7C,OAAO;AACP;AACA;;AAEA;AACA;AACA,WAAW,cAAc,GAAG,SAAS,EAAE,aAAa;AACpD;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,wDAAwD,oBAAoB,kCAAkC,EAAE,aAAa;AAC7H;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,oBAAoB,aAAa;AACjC;AACA;AACA;AACA;;AAEA;AACA,kDAAkD,aAAa;AAC/D;;AAEA;AACA;AACA,iDAAiD,cAAc,EAAE,aAAa;AAC9E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,cAAc,GAAG,aAAa,GAAG,cAAc;AACzE;AACA,WAAW,cAAc,GAAG,SAAS,EAAE,aAAa;AACpD;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,cAAc,GAAG,cAAc,EAAE,aAAa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,aAAa;AAC/D;AACA;AACA;;AAEA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,aAAa;AACjE;AACA;AACA;;AAEA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;;AAEA;AACA;;;;;;;;ACpZA,aAAa,mBAAO,CAAC,GAAmB;;AAExC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA,gC;;;;;;;;ACAA,kC;;;;;;;;ACAA,sC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UCtBA;UACA;UACA;UACA","file":"backend.js","sourcesContent":["module.exports = app => {\n\n  class Version extends app.meta.BeanBase {\n\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aFile\n        let sql = `\n          CREATE TABLE aFile (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            downloadId varchar(50) DEFAULT NULL,\n            atomId int(11) DEFAULT '0',\n            mode int(11) DEFAULT '0',\n            fileSize int(11) DEFAULT '0',\n            width int(11) DEFAULT '0',\n            height int(11) DEFAULT '0',\n            filePath varchar(255) DEFAULT NULL,\n            fileName varchar(255) DEFAULT NULL,\n            realName varchar(255) DEFAULT NULL,\n            fileExt varchar(50) DEFAULT NULL,\n            encoding varchar(50) DEFAULT NULL,\n            mime varchar(50) DEFAULT NULL,\n            attachment int(11) DEFAULT '0',\n            flag varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // aViewFile\n        sql = `\n          create view aViewFile as\n            select a.*,b.userName,b.avatar from aFile a\n              left join aUser b on a.userId=b.id\n        `;\n        await this.ctx.model.query(sql);\n      }\n\n      if (options.version === 2) {\n        // aFile: mime\n        const sql = `\n        ALTER TABLE aFile\n          CHANGE COLUMN mime mime varchar(255) DEFAULT NULL\n        `;\n        await this.ctx.model.query(sql);\n      }\n\n    }\n\n    async init(options) {\n    }\n\n    async test() {\n    }\n\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","module.exports = {\n  File: '文件',\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const schemas = {};\n  return schemas;\n};\n","module.exports = app => {\n  class FileController extends app.Controller {\n\n    async all() {\n      const options = this.ctx.request.body.options;\n      options.file = 1;\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: '/a/base/atom/select',\n        body: {\n          atomClass: this.ctx.request.body.atomClass,\n          options,\n        },\n      });\n      for (const item of res.list) {\n        item.i_downloadUrl = this.ctx.service.file.getDownloadUrl({\n          downloadId: item.i_downloadId,\n          atomId: item.atomId,\n          mode: item.i_mode,\n          fileExt: item.i_fileExt,\n        });\n      }\n      this.ctx.success(res);\n    }\n\n    async list() {\n      const user = this.ctx.state.user.op;\n      const options = this.ctx.request.body.options;\n      options.page = this.ctx.bean.util.page(options.page, false);\n      // where\n      options.where = options.where || {};\n      // check right: atom.read or user's files\n      const key = this.ctx.request.body.key;\n      const atomId = key && key.atomId;\n      if (atomId) {\n        const res = await this.ctx.bean.atom.checkRightRead({\n          atom: { id: atomId },\n          user,\n          checkFlow: true,\n        });\n        if (!res) this.ctx.throw(403);\n        options.where.atomId = atomId; // add where\n      } else {\n        options.where.userId = user.id; // add where\n      }\n      //\n      const items = await this.ctx.service.file.list({ options });\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n\n    async update() {\n      //\n      const user = this.ctx.state.user.op;\n      const fileId = this.ctx.request.body.fileId;\n      const data = this.ctx.request.body.data;\n      // file\n      const file = await this.ctx.model.file.get({ id: fileId });\n      // check right\n      await this.ctx.service.file.fileUpdateCheck({ file, user });\n      // rename\n      const res = await this.ctx.service.file.update({ fileId, data });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      //\n      const user = this.ctx.state.user.op;\n      let fileId = this.ctx.request.body.fileId;\n      if (!fileId) {\n        fileId = this.ctx.request.body.data.fileId;\n      }\n      // file\n      const file = await this.ctx.model.file.get({ id: fileId });\n      // check right\n      await this.ctx.service.file.fileUpdateCheck({ file, user });\n      // delete\n      const res = await this.ctx.service.file.delete({ fileId });\n      this.ctx.success(res);\n    }\n\n    async upload() {\n      const res = await this.service.file.upload({\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async download() {\n      await this.service.file.download({\n        downloadId: this.ctx.params.downloadId,\n        atomId: parseInt(this.ctx.query.atomId || 0),\n        width: this.ctx.query.width,\n        height: this.ctx.query.height,\n      });\n    }\n\n  }\n  return FileController;\n};\n","const file = require('./controller/file.js');\n\n\nmodule.exports = app => {\n  const controllers = {\n    file,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\nmodule.exports = app => {\n\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n\n};\n","module.exports = app => {\n  const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n      },\n    },\n    validation: {\n      validators: {\n      },\n      keywords: {},\n      schemas,\n    },\n    event: {\n      declarations: {\n        fileUpdateCheck: 'File Update Check',\n        fileDownloadCheck: 'File Download Check',\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  class File extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aFile', options: { disableDeleted: false } });\n    }\n  }\n  return File;\n};\n","module.exports = app => {\n  class FileView extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aViewFile', options: { disableDeleted: false } });\n    }\n  }\n  return FileView;\n};\n","const file = require('./model/file.js');\nconst fileView = require('./model/fileView.js');\n\nmodule.exports = app => {\n  const models = {\n    file,\n    fileView,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // file\n    { method: 'post', path: 'file/upload', controller: 'file', meta: { auth: { user: true } } },\n    { method: 'get', path: 'file/download/:downloadId', controller: 'file', action: 'download', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'file/list', controller: 'file' },\n    { method: 'post', path: 'file/update', controller: 'file' },\n    { method: 'post', path: 'file/delete', controller: 'file', middlewares: 'transaction' },\n    { method: 'post', path: 'file/all', controller: 'file' },\n  ];\n  return routes;\n};\n","const path = require('path');\nconst fs = require('fs');\nconst require3 = require('require3');\nconst sendToWormhole = require3('stream-wormhole');\nconst uuid = require3('uuid');\nconst gm = require3('gm');\nconst bb = require3('bluebird');\nconst pump = require3('pump');\nconst fse = require3('fs-extra');\nconst extend = require3('extend');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class File extends app.Service {\n\n    // where adjusted by controller\n    async list({ options }) {\n      const _options = {};\n      // where\n      _options.where = options.where || {};\n      // orders\n      _options.orders = options.orders;\n      // page\n      if (options.page.size !== 0) {\n        _options.limit = options.page.size;\n        _options.offset = options.page.index;\n      }\n      // select\n      const list = await this.ctx.model.fileView.select(_options);\n      for (const item of list) {\n        item.downloadUrl = this.getDownloadUrl(item);\n      }\n      return list;\n    }\n\n    async delete({ fileId }) {\n      // file\n      const item = await this.ctx.model.file.get({ id: fileId });\n      // delete\n      await this.ctx.model.file.delete({ id: fileId });\n      // attachmentCount\n      if (item.atomId && item.attachment) {\n        await this.ctx.bean.atom.attachment({ key: { atomId: item.atomId }, atom: { attachment: -1 } });\n      }\n    }\n\n    async update({ fileId, data }) {\n      // file\n      let item = await this.ctx.model.file.get({ id: fileId });\n      // update\n      item = extend(true, item, data);\n      await this.ctx.model.file.update(item);\n    }\n\n    async upload({ user }) {\n      const stream = await this.ctx.getFileStream();\n      try {\n        const meta = {\n          filename: stream.filename,\n          encoding: stream.encoding,\n          mime: stream.mime,\n          fields: stream.fields,\n        };\n        return await this._upload({ fileContent: stream, meta, user });\n      } catch (e) {\n        await sendToWormhole(stream);\n        throw e;\n      }\n    }\n\n    async _upload({ fileContent, meta, user }) {\n      // info\n      const fileInfo = path.parse(meta.filename);\n      const encoding = meta.encoding;\n      const mime = meta.mime;\n      const fields = meta.fields;\n      const mode = parseInt(fields.mode || 2);\n      const atomId = parseInt(fields.atomId || 0);\n      const attachment = parseInt(fields.attachment || 0);\n      const flag = fields.flag || '';\n      let imgWidth = 0;\n      let imgHeight = 0;\n\n      // jpeg->jpg\n      if (fileInfo.ext === '.jpeg') fileInfo.ext = '.jpg';\n\n      // dest\n      const downloadId = uuid.v4().replace(/-/g, '');\n      const _filePath = `file/${mode === 1 ? 'image' : (mode === 2 ? 'file' : 'audio')}/${this.ctx.bean.util.today()}`;\n      const _fileName = uuid.v4().replace(/-/g, '');\n      const destDir = await this.ctx.bean.base.getPath(_filePath, true);\n      const destFile = path.join(destDir, `${_fileName}${fileInfo.ext}`);\n\n      // write\n      if (mode === 1) {\n        if (fileInfo.ext === '.svg' || fileInfo.ext === '.svgz') {\n          await this._outputFileContent({ destFile, fileContent });\n        } else {\n          // image\n          await bb.fromCallback(cb => {\n            let img = gm(fileContent);\n            // crop\n            if (fields.cropped === 'true') {\n              const cropbox = JSON.parse(fields.cropbox);\n              img = img.crop(parseInt(cropbox.width), parseInt(cropbox.height), parseInt(cropbox.x), parseInt(cropbox.y));\n            }\n            // fixed\n            if (fields.fixed) {\n              const fixed = JSON.parse(fields.fixed);\n              if (fixed.width && fixed.height) {\n                img = img.resize(fixed.width, fixed.height, '!');\n              } else if (fixed.width) {\n                img = img.resize(fixed.width);\n              } else if (fixed.height) {\n                img = img.resize(null, fixed.height);\n              }\n            }\n            // save\n            img.quality(93).write(destFile, cb);\n          });\n          // size\n          const imgSize = await bb.fromCallback(cb => {\n            gm(destFile).size(cb);\n          });\n          imgWidth = imgSize.width;\n          imgHeight = imgSize.height;\n        }\n      } else if (mode === 2 || mode === 3) {\n        // check right only for file\n        if (mode === 2) {\n          await this.checkRightWrite(atomId, user);\n        }\n        // file\n        await this._outputFileContent({ destFile, fileContent });\n      }\n\n      // fileSize\n      const stat = await fse.stat(destFile);\n      const fileSize = stat.size;\n\n      // save\n      const res = await this.ctx.model.file.insert({\n        userId: user ? user.id : 0,\n        downloadId,\n        atomId,\n        mode,\n        fileSize,\n        width: imgWidth,\n        height: imgHeight,\n        filePath: _filePath,\n        fileName: _fileName,\n        realName: fileInfo.name,\n        fileExt: fileInfo.ext,\n        encoding,\n        mime,\n        attachment,\n        flag,\n      });\n      const fileId = res.insertId;\n\n      // attachmentCount\n      if (atomId && attachment) {\n        await this.ctx.bean.atom.attachment({ key: { atomId }, atom: { attachment: 1 }, user });\n      }\n\n      // ok\n      const downloadUrl = this.getDownloadUrl({ downloadId, mode, fileExt: fileInfo.ext });\n      return {\n        fileId,\n        realName: fileInfo.name,\n        downloadId,\n        downloadUrl,\n      };\n\n    }\n\n    async _outputFileContent({ destFile, fileContent }) {\n      if (Buffer.isBuffer(fileContent)) {\n        // buffer\n        await fse.outputFile(destFile, fileContent);\n      } else {\n        // stream\n        const writeStream = fs.createWriteStream(destFile);\n        await bb.fromCallback(cb => {\n          pump(fileContent, writeStream, cb);\n        });\n      }\n    }\n\n    getDownloadUrl({ downloadId, atomId, mode, fileExt }) {\n      let url = `/api/a/file/file/download/${downloadId}${(mode === 1 || mode === 3) ? fileExt : ''}`;\n      if (atomId) {\n        url = `${url}?atomId=${atomId}`;\n      }\n      return this.ctx.bean.base.getAbsoluteUrl(url);\n    }\n\n    async _getFileByDownloadId({ downloadId, atomId }) {\n      if (atomId) {\n        return await this.ctx.model.file.get({ downloadId, atomId });\n      }\n      // try to get formal\n      const file = await this.ctx.model.queryOne(`\n          select a.* from aFile a\n            inner join aAtom b on a.atomId=b.id\n              where a.iid=? and a.deleted=0 and a.mode=2 and a.downloadId=? and b.atomStage=1\n        `, [ this.ctx.instance.id, downloadId ]);\n      if (file) return file;\n      // no matter what atomId is: maybe ===0 or !==0\n      return await this.ctx.model.file.get({ downloadId });\n    }\n\n    async download({ downloadId, atomId, width, height }) {\n      // downloadId\n      if (!downloadId) this.ctx.throw(404);\n      const extPos = downloadId.indexOf('.');\n      if (extPos > -1) downloadId = downloadId.substr(0, extPos);\n\n      // get file\n      const file = await this._getFileByDownloadId({ downloadId, atomId });\n      if (!file) this.ctx.throw(404);\n\n      // pre\n      let fileName = file.fileName;\n      if (file.mode === 1) {\n        if (file.fileExt !== '.svg' && file.fileExt !== '.svgz') {\n          // adjust image\n          fileName = await this.adjustImage(file, width, height);\n        }\n      } else if (file.mode === 2) {\n        // check right\n        await this.fileDownloadCheck({ file });\n      } else if (file.mode === 3) {\n        // do nothing\n      }\n\n      // forward url\n      const forwardUrl = this.ctx.bean.base.getForwardUrl(\n        `${file.filePath}/${fileName}${file.fileExt}`\n      );\n\n      // send\n      if (app.meta.isTest || app.meta.isLocal) {\n        // redirect\n        this.ctx.redirect(forwardUrl);\n      } else {\n        // redirect nginx\n        // this.ctx.set('content-type', file.mime);\n        this.ctx.set('content-transfer-encoding', file.encoding);\n        this.ctx.set('content-disposition', `attachment; filename*=UTF-8''${encodeURIComponent(file.realName)}${file.fileExt}`);\n        this.ctx.set('X-Accel-Redirect', forwardUrl);\n        // this.ctx.success();\n        this.ctx.response.status = 200;\n        this.ctx.response.type = file.mime;\n      }\n\n    }\n\n    // inner invoke\n    async fileInfo({ downloadId }) {\n      // downloadId\n      if (!downloadId) this.ctx.throw(404);\n      const extPos = downloadId.indexOf('.');\n      if (extPos > -1) downloadId = downloadId.substr(0, extPos);\n\n      // get file\n      const file = await this.ctx.model.file.get({ downloadId });\n      if (!file) this.ctx.throw(404);\n\n      // absolutePath\n      const destDir = await this.ctx.bean.base.getPath(file.filePath, true);\n      const absolutePath = path.join(destDir, `${file.fileName}${file.fileExt}`);\n      // ok\n      return {\n        file,\n        absolutePath,\n      };\n    }\n\n    async adjustImage(file, widthRequire, heightRequire) {\n      widthRequire = widthRequire ? parseInt(widthRequire) : 0;\n      heightRequire = heightRequire ? parseInt(heightRequire) : 0;\n      if (!widthRequire && !heightRequire) return file.fileName;\n\n      // cannot use * in path on windows\n      const fileName = `${file.fileName}-${widthRequire}_${heightRequire}`;\n      const destFile = await this.ctx.bean.base.getPath(\n        `${file.filePath}/${fileName}${file.fileExt}`, false\n      );\n\n      const bExists = await fse.pathExists(destFile);\n      if (bExists) return fileName;\n\n      const width = widthRequire || parseInt(file.width * heightRequire / file.height);\n      const height = heightRequire || parseInt(file.height * widthRequire / file.width);\n\n      const srcFile = await this.ctx.bean.base.getPath(\n        `${file.filePath}/${file.fileName}${file.fileExt}`, false\n      );\n      await bb.fromCallback(cb => {\n        gm(srcFile)\n          .resize(width, height, '!')\n          .quality(100)\n          .write(destFile, cb);\n      });\n\n      return fileName;\n    }\n\n    async checkRightWrite(atomId, user) {\n      // not check if !atomId\n      if (!atomId) return;\n      const res = await this.ctx.bean.atom.checkRightAction({\n        atom: { id: atomId },\n        action: 3,\n        stage: 'draft',\n        user,\n        checkFlow: true,\n      });\n      if (res && res.atomClosed === 0) return;\n      this.ctx.throw(403);\n    }\n\n    async fileUpdateCheck({ file, user }) {\n      if (!user) {\n        // check user\n        await this.ctx.bean.user.check();\n        user = this.ctx.state.user.op;\n      }\n      // check\n      const result = await this._fileUpdateCheck({ file, user });\n      if (result) return;\n      this.ctx.throw(403);\n    }\n\n    async _fileUpdateCheck({ file, user }) {\n      // invoke event\n      return await this.ctx.bean.event.invoke({\n        module: moduleInfo.relativeName,\n        name: 'fileUpdateCheck',\n        data: { file, user },\n        next: async (context, next) => {\n          if (context.result !== undefined) return await next();\n          // not check if !atomId\n          if (file.atomId) {\n            const res = await this.ctx.bean.atom.checkRightAction({\n              atom: { id: file.atomId },\n              action: 3,\n              stage: 'draft',\n              user,\n              checkFlow: true,\n            });\n            context.result = res && res.atomClosed === 0;\n          } else {\n            // check if self\n            context.result = file.userId === user.id;\n          }\n          // next\n          await next();\n        },\n      });\n    }\n\n    async fileDownloadCheck({ file, user }) {\n      if (!user) {\n        // check user\n        await this.ctx.bean.user.check();\n        user = this.ctx.state.user.op;\n      }\n      // check\n      const result = await this._fileDownloadCheck({ file, user });\n      if (result) return;\n      this.ctx.throw(403);\n    }\n\n    async _fileDownloadCheck({ file, user }) {\n      // invoke event\n      return await this.ctx.bean.event.invoke({\n        module: moduleInfo.relativeName,\n        name: 'fileDownloadCheck',\n        data: { file, user },\n        next: async (context, next) => {\n          if (context.result !== undefined) return await next();\n          // not check if !atomId\n          if (file.atomId) {\n            const res = await this.ctx.bean.atom.checkRightRead({\n              atom: { id: file.atomId },\n              user,\n              checkFlow: true,\n            });\n            context.result = !!res;\n          } else {\n            // check if self\n            context.result = file.userId === user.id;\n          }\n          // next\n          await next();\n        },\n      });\n    }\n\n  }\n\n  return File;\n};\n","const file = require('./service/file.js');\n\nmodule.exports = app => {\n  const services = {\n    file,\n  };\n  return services;\n};\n","module.exports = require(\"fs\");;","module.exports = require(\"path\");;","module.exports = require(\"require3\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n"],"sourceRoot":""}