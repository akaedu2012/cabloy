{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA,uCAAuC,uBAAuB;AAC9D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,OAAO;AACP;AACA,eAAe;AACf;;AAEA,iBAAiB,+BAA+B;AAChD;AACA,sCAAsC,+BAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,6CAA6C;AAC/D;AACA;AACA;AACA,0BAA0B,6CAA6C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C,WAAW;AACX,SAAS;AACT;AACA;;AAEA,mBAAmB,sBAAsB;AACzC,4DAA4D,gBAAgB;AAC5E;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C,WAAW;AACX,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACpHA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,mCAAmC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA,6DAA6D,iBAAiB;AAC9E;AACA;AACA;;AAEA,yBAAyB,iBAAiB;AAC1C;AACA,kDAAkD,uCAAuC;AACzF;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;;AAEA,8BAA8B,2BAA2B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,iEAAiE,8BAA8B;AAC/F;AACA;AACA;AACA;AACA,8CAA8C,OAAO,UAAU;AAC/D;AACA;AACA;AACA;;AAEA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,+BAA+B,uCAAuC;AACtE;AACA;AACA,2DAA2D,iCAAiC;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA,+BAA+B,qBAAqB;AACpD,wEAAwE,OAAO,GAAG,MAAM;AACxF;AACA,4EAA4E,MAAM;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,SAAS;AACzC;AACA;AACA;;AAEA;AACA;;;;;;;;ACxKA;AACA;AACA;AACA;AACA;AACA,qDAAqD,uBAAuB;AAC5E;AACA;;AAEA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,sCAAsC;AAClD,YAAY,mDAAmD;AAC/D,YAAY,6DAA6D;AACzE,YAAY,oDAAoD;AAChE,YAAY,8DAA8D;AAC1E,YAAY,qDAAqD;AACjE,YAAY,+DAA+D;AAC3E,YAAY,oDAAoD;AAChE,YAAY,8DAA8D;AAC1E,YAAY,wDAAwD;AACpE,YAAY,kEAAkE;AAC9E,YAAY,0CAA0C;AACtD,YAAY,0CAA0C;AACtD;AACA,qDAAqD,mCAAmC;AACxF;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtEA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,iBAAiB,mBAAO,CAAC,GAAqB;AAC9C,iCAAiC,mBAAO,CAAC,GAAqC;AAC9E,iBAAiB,mBAAO,CAAC,GAAqB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC9BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;;ACZA;AACA;;;;;;;;ACDA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;AClEA,aAAa,mBAAO,CAAC,GAAkB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;;;;;;ACZA,aAAa,mBAAO,CAAC,GAAsB;;AAE3C;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA,eAAe,mBAAO,CAAC,GAAW;AAClC;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChCA;AACA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA,0BAA0B,mBAAO,CAAC,GAA8B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,kBAAkB;AAClB;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACrDA;AACA;AACA;AACA,mBAAmB,2BAA2B,yBAAyB;AACvE;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,mBAAmB,kCAAkC,yBAAyB;AAC9E;AACA;AACA;AACA;;;;;;;;ACPA,aAAa,mBAAO,CAAC,GAAiB;AACtC,oBAAoB,mBAAO,CAAC,GAAwB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA,oBAAoB,0DAA0D;AAC9E;AACA;;;;;;;;ACHA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA,+DAA+D,kCAAkC;AACjG;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AClBA,aAAa,mBAAO,CAAC,GAAmB;;AAExC;AACA;AACA;AACA;AACA;AACA;;;;;;;UCPA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-dict/./backend/src/aops.js","webpack://egg-born-module-a-dict/./backend/src/bean/atom.dict.js","webpack://egg-born-module-a-dict/./backend/src/bean/bean.dict.js","webpack://egg-born-module-a-dict/./backend/src/bean/broadcast.dictCacheRemove.js","webpack://egg-born-module-a-dict/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-dict/./backend/src/beans.js","webpack://egg-born-module-a-dict/./backend/src/config/config.js","webpack://egg-born-module-a-dict/./backend/src/config/errors.js","webpack://egg-born-module-a-dict/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-dict/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-dict/./backend/src/config/locales.js","webpack://egg-born-module-a-dict/./backend/src/config/static/resources.js","webpack://egg-born-module-a-dict/./backend/src/config/validation/schema/dict.js","webpack://egg-born-module-a-dict/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-dict/./backend/src/controller/dict.js","webpack://egg-born-module-a-dict/./backend/src/controllers.js","webpack://egg-born-module-a-dict/./backend/src/main.js","webpack://egg-born-module-a-dict/./backend/src/meta.js","webpack://egg-born-module-a-dict/./backend/src/model/dict.js","webpack://egg-born-module-a-dict/./backend/src/model/dictContent.js","webpack://egg-born-module-a-dict/./backend/src/models.js","webpack://egg-born-module-a-dict/./backend/src/routes.js","webpack://egg-born-module-a-dict/./backend/src/service/dict.js","webpack://egg-born-module-a-dict/./backend/src/services.js","webpack://egg-born-module-a-dict/webpack/bootstrap","webpack://egg-born-module-a-dict/webpack/before-startup","webpack://egg-born-module-a-dict/webpack/startup","webpack://egg-born-module-a-dict/webpack/after-startup"],"sourcesContent":["module.exports = app => {\n  const aops = {};\n  return aops;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom extends app.meta.AtomBase {\n    async create({ atomClass, item, user }) {\n      // super\n      const key = await super.create({ atomClass, item, user });\n      // add dict\n      const res = await this.ctx.model.dict.insert({\n        atomId: key.atomId,\n      });\n      const itemId = res.insertId;\n      // add content\n      await this.ctx.model.dictContent.insert({\n        atomId: key.atomId,\n        itemId,\n        dictItems: '[]',\n        dictLocales: '{}',\n      });\n      // return key\n      return { atomId: key.atomId, itemId };\n    }\n\n    async read({ atomClass, options, key, user }) {\n      // super\n      const item = await super.read({ atomClass, options, key, user });\n      if (!item) return null;\n      // meta\n      this._getMeta(item);\n      // ok\n      return item;\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // super\n      await super.select({ atomClass, options, items, user });\n      // meta\n      for (const item of items) {\n        this._getMeta(item);\n      }\n    }\n\n    async write({ atomClass, target, key, item, options, user }) {\n      const atomStaticKey = item.atomStaticKey;\n      const atomStage = item.atomStage;\n      // super\n      await super.write({ atomClass, target, key, item, options, user });\n      // update dict\n      const data = await this.ctx.model.dict.prepareData(item);\n      data.id = key.itemId;\n      await this.ctx.model.dict.update(data);\n      // update content\n      await this.ctx.model.dictContent.update(\n        {\n          dictItems: item.dictItems,\n          dictLocales: item.dictLocales,\n        },\n        {\n          where: {\n            atomId: key.atomId,\n          },\n        }\n      );\n      // broadcast\n      if (atomStage === 1) {\n        this.ctx.tail(() => {\n          this.ctx.app.meta.broadcast.emit({\n            subdomain: this.ctx.subdomain,\n            module: moduleInfo.relativeName,\n            broadcastName: 'dictCacheRemove',\n            data: { dictKey: atomStaticKey },\n          });\n        });\n      }\n    }\n\n    async delete({ atomClass, key, user }) {\n      const item = await this.ctx.bean.atom.modelAtom.get({ id: key.atomId });\n      const atomStaticKey = item.atomStaticKey;\n      const atomStage = item.atomStage;\n      // super\n      await super.delete({ atomClass, key, user });\n      // delete dict\n      await this.ctx.model.dict.delete({\n        id: key.itemId,\n      });\n      // delete content\n      await this.ctx.model.dictContent.delete({\n        itemId: key.itemId,\n      });\n      // broadcast\n      if (atomStage === 1) {\n        this.ctx.tail(() => {\n          this.ctx.app.meta.broadcast.emit({\n            subdomain: this.ctx.subdomain,\n            module: moduleInfo.relativeName,\n            broadcastName: 'dictCacheRemove',\n            data: { dictKey: atomStaticKey },\n          });\n        });\n      }\n    }\n\n    _getMeta(item) {\n      // flags\n      const flags = [];\n      // meta\n      const meta = {\n        summary: item.description,\n        flags,\n      };\n      // ok\n      item._meta = meta;\n    }\n  }\n\n  return Atom;\n};\n","const __dicts = {};\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Dict extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'dict');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get atomClass() {\n      return {\n        module: moduleInfo.relativeName,\n        atomClassName: 'dict',\n      };\n    }\n\n    get model() {\n      return ctx.model.module(moduleInfo.relativeName).dict;\n    }\n\n    get modelDictContent() {\n      return ctx.model.module(moduleInfo.relativeName).dictContent;\n    }\n\n    // options: separator\n    async findItem({ dictKey, code, options }) {\n      if (!code) return null;\n      code = String(code);\n      // options\n      options = options || { separator: '/' };\n      const separator = options.separator;\n      // locale\n      const locale = ctx.locale;\n      // dict\n      const dict = await this.getDict({ dictKey, locale });\n      if (!dict._cache) dict._cache = {};\n      let dictItemRes = dict._cache[code];\n      if (dictItemRes) return dictItemRes;\n      // find\n      const dictItemsRes = [];\n      const res = this._findItem_loop({\n        dictItemsRes,\n        dictItemsMap: dict._dictItemsMap,\n        codes: code.split('/'),\n      });\n      if (!res) return null;\n      const titleFull = dictItemsRes.map(item => item.title).join(separator);\n      const titleLocaleFull = dictItemsRes.map(item => item.titleLocale).join(separator);\n      dictItemRes = {\n        ...dictItemsRes[dictItemsRes.length - 1],\n        codeFull: code,\n        titleFull,\n        titleLocaleFull,\n      };\n      // cache\n      dict._cache[code] = dictItemRes;\n      // ok\n      return dictItemRes;\n    }\n\n    _findItem_loop({ dictItemsRes, dictItemsMap, codes }) {\n      const code = codes.shift();\n      const dictItem = dictItemsMap && dictItemsMap[code];\n      if (!dictItem) return false;\n      dictItemsRes.push(dictItem);\n      if (codes.length === 0) return true;\n      return this._findItem_loop({\n        dictItemsRes,\n        dictItemsMap: dictItem._childrenMap,\n        codes,\n      });\n    }\n\n    async getDict({ dictKey, locale }) {\n      locale = locale || ctx.locale;\n      if (!__dicts[dictKey]) {\n        __dicts[dictKey] = {};\n      }\n      if (!__dicts[dictKey][locale]) {\n        __dicts[dictKey][locale] = await this._prepareDict({ dictKey, locale });\n      }\n      return __dicts[dictKey][locale];\n    }\n\n    async _prepareDict({ dictKey, locale }) {\n      // load\n      const dict = await this._prepareDict_load({ dictKey, user: null, returnDict: true });\n      // prepare\n      this._prepareDict_adjust({ dict, locale });\n      // ok\n      return dict;\n    }\n\n    async _prepareDict_load({ dictKey, user, returnDict }) {\n      if (!dictKey) throw new Error('dictKey not set');\n      // get atomId\n      const atomClass = await ctx.bean.atomClass.get(this.atomClass);\n      const atom = await ctx.bean.atom.modelAtom.get({\n        atomClassId: atomClass.id,\n        atomStaticKey: dictKey,\n        atomStage: 1,\n      });\n      if (!atom) return ctx.throw.module('a-base', 1002);\n      const atomId = atom.id;\n      // check resource right\n      if (user) {\n        const res = await ctx.bean.resource.checkRightResource({ resourceAtomId: atomId, user });\n        if (!res) ctx.throw(403);\n      }\n      if (!returnDict) return true;\n      // read\n      const dict = await ctx.bean.atom.read({ key: { atomId } });\n      if (!dict) return ctx.throw.module('a-base', 1002);\n      // ok\n      return dict;\n    }\n\n    _prepareDict_adjust({ dict, locale }) {\n      // init\n      dict._dictItems = JSON.parse(dict.dictItems);\n      dict._dictLocales = dict.dictLocales ? JSON.parse(dict.dictLocales) : null;\n      dict._dictItemsMap = {};\n      // adjust\n      this._prepareDict_adjust_loop({\n        dict,\n        dictItemsMap: dict._dictItemsMap,\n        dictItems: dict._dictItems,\n        locale,\n      });\n    }\n\n    _prepareDict_adjust_loop({ dict, dictItemsMap, dictItems, locale }) {\n      for (const item of dictItems) {\n        // self\n        item.titleLocale = this._prepareDict_titleLocale({ dict, title: item.title, locale });\n        dictItemsMap[item.code] = item;\n        // children\n        if (item.children) {\n          item._childrenMap = {};\n          this._prepareDict_adjust_loop({\n            dict,\n            dictItemsMap: item._childrenMap,\n            dictItems: item.children,\n            locale,\n          });\n        }\n      }\n    }\n\n    _prepareDict_titleLocale({ dict, title, locale }) {\n      let titleLocale = ctx.bean.util.getProperty(dict._dictLocales, `${locale}.${title}`);\n      if (!titleLocale && locale !== 'en-us') {\n        titleLocale = ctx.bean.util.getProperty(dict._dictLocales, `en-us.${title}`);\n      }\n      // not use system locale\n      // if (!titleLocale) {\n      //   titleLocale = ctx.text(title);\n      // }\n      return titleLocale || title;\n    }\n\n    _broadcastDictCacheRemove({ dictKey }) {\n      delete __dicts[dictKey];\n    }\n  }\n\n  return Dict;\n};\n","module.exports = app => {\n  class Broadcast extends app.meta.BeanBase {\n    async execute(context) {\n      // const sameAsCaller = context.sameAsCaller;\n      const data = context.data;\n      this.ctx.bean.dict._broadcastDictCacheRemove({ dictKey: data.dictKey });\n    }\n  }\n\n  return Broadcast;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aDict\n        let sql = `\n          CREATE TABLE aDict (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            description varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n        // create table: aDictContent\n        sql = `\n          CREATE TABLE aDictContent (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            itemId int(11) DEFAULT '0',\n            dictItems JSON DEFAULT NULL,\n            dictLocales JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n        // create view: aDictViewFull\n        sql = `\n          CREATE VIEW aDictViewFull as\n            select a.*,b.dictItems,b.dictLocales from aDict a\n              left join aDictContent b on a.id=b.itemId\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // add role rights\n        const roleRights = [\n          { roleName: 'system', action: 'create' },\n          { roleName: 'system', action: 'read', scopeNames: 0 },\n          { roleName: 'system', action: 'read', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'write', scopeNames: 0 },\n          { roleName: 'system', action: 'write', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'delete', scopeNames: 0 },\n          { roleName: 'system', action: 'delete', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'clone', scopeNames: 0 },\n          { roleName: 'system', action: 'clone', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'authorize', scopeNames: 0 },\n          { roleName: 'system', action: 'authorize', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'deleteBulk' },\n          { roleName: 'system', action: 'exportBulk' },\n        ];\n        await this.ctx.bean.role.addRoleRightBatch({ atomClassName: 'dict', roleRights });\n      }\n    }\n\n    async test() {}\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst atomDict = require('./bean/atom.dict.js');\nconst broadcastDictCacheRemove = require('./bean/broadcast.dictCacheRemove.js');\nconst beanDict = require('./bean/bean.dict.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // atom\n    'atom.dict': {\n      mode: 'app',\n      bean: atomDict,\n    },\n    // broadcast\n    'broadcast.dictCacheRemove': {\n      mode: 'app',\n      bean: broadcastDictCacheRemove,\n    },\n    // global\n    dict: {\n      mode: 'ctx',\n      bean: beanDict,\n      global: true,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // broadcasts\n  config.broadcasts = {\n    dictCacheRemove: {\n      bean: 'dictCacheRemove',\n    },\n  };\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {};\n","module.exports = {};\n","module.exports = {\n  Dict: '字典',\n  'Create Dict': '新建字典',\n  'Dict List': '字典列表',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const resources = [\n    // menu\n    {\n      atomName: 'Create Dict',\n      atomStaticKey: 'createDict',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:menu.Create',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'dict',\n        atomAction: 'create',\n      }),\n      resourceRoles: 'authenticated',\n    },\n    {\n      atomName: 'Dict List',\n      atomStaticKey: 'listDict',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:menu.List',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'dict',\n        atomAction: 'read',\n      }),\n      resourceRoles: 'authenticated',\n    },\n  ];\n  return resources;\n};\n","module.exports = app => {\n  const schemas = {};\n  // dict\n  schemas.dict = {\n    type: 'object',\n    properties: {\n      // Basic Info\n      __groupBasicInfo: {\n        ebType: 'group-flatten',\n        ebTitle: 'Basic Info',\n      },\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Name',\n        notEmpty: true,\n      },\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Description',\n      },\n      dictItems: {\n        type: 'string',\n        ebType: 'json',\n        ebTitle: 'Dict Items',\n        notEmpty: true,\n      },\n      dictLocales: {\n        type: 'string',\n        ebType: 'json',\n        ebTitle: 'Dict Locales',\n        notEmpty: true,\n      },\n      // Extra\n      __groupExtra: {\n        ebType: 'group-flatten',\n        ebTitle: 'Extra',\n      },\n      atomStaticKey: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'KeyForAtom',\n        ebReadOnly: true,\n        notEmpty: true,\n      },\n      atomRevision: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Revision',\n        ebReadOnly: true,\n      },\n    },\n  };\n  // dict search\n  schemas.dictSearch = {\n    type: 'object',\n    properties: {\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Description',\n      },\n    },\n  };\n  return schemas;\n};\n","const dict = require('./schema/dict.js');\n\nmodule.exports = app => {\n  const schemas = {};\n  // dict\n  Object.assign(schemas, dict(app));\n  // ok\n  return schemas;\n};\n","module.exports = app => {\n  class DictController extends app.Controller {\n    async getDict() {\n      const res = await this.ctx.service.dict.getDict({\n        dictKey: this.ctx.request.body.dictKey,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n  }\n\n  return DictController;\n};\n","const dict = require('./controller/dict.js');\n\nmodule.exports = app => {\n  const controllers = {\n    dict,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\nmodule.exports = app => {\n  // aops\n  const aops = require('./aops.js')(app);\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    aops,\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n};\n","module.exports = app => {\n  // schemas\n  const schemas = require('./config/validation/schemas.js')(app);\n  // static\n  const staticResources = require('./config/static/resources.js')(app);\n  // meta\n  const meta = {\n    base: {\n      atoms: {\n        dict: {\n          info: {\n            bean: 'dict',\n            title: 'Dict',\n            tableName: 'aDict',\n            tableNameModes: {\n              full: 'aDictViewFull',\n            },\n            resource: true,\n            language: false,\n            category: false,\n            tag: false,\n          },\n          actions: {\n            write: {\n              enableOnStatic: true,\n            },\n          },\n          validator: 'dict',\n          search: {\n            validator: 'dictSearch',\n          },\n        },\n      },\n      statics: {\n        'a-base.resource': {\n          items: staticResources,\n        },\n      },\n    },\n    validation: {\n      validators: {\n        dict: {\n          schemas: 'dict',\n        },\n        dictSearch: {\n          schemas: 'dictSearch',\n        },\n      },\n      keywords: {},\n      schemas,\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  class Dict extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aDict', options: { disableDeleted: false } });\n    }\n  }\n  return Dict;\n};\n","module.exports = app => {\n  class DictContent extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aDictContent', options: { disableDeleted: false } });\n    }\n  }\n  return DictContent;\n};\n","const dict = require('./model/dict.js');\nconst dictContent = require('./model/dictContent.js');\n\nmodule.exports = app => {\n  const models = {\n    dict,\n    dictContent,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [{ method: 'post', path: 'dict/getDict', controller: 'dict' }];\n  return routes;\n};\n","module.exports = app => {\n  class Dict extends app.Service {\n    async getDict({ dictKey, user }) {\n      // check right\n      const res = await this.ctx.bean.dict._prepareDict_load({ dictKey, user, returnDict: false });\n      if (!res) this.ctx.throw(403);\n      // get dict\n      const dict = await this.ctx.bean.dict.getDict({ dictKey });\n      // short\n      return {\n        atomId: dict.atomId,\n        description: dict.description,\n        _dictItems: dict._dictItems,\n      };\n    }\n  }\n\n  return Dict;\n};\n","const dict = require('./service/dict.js');\n\nmodule.exports = app => {\n  const services = {\n    dict,\n  };\n  return services;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}