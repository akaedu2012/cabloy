/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (adapter) {
  var io = {
    _socket: null,
    _subscribeCounter: 0,
    _subscribesAll: {},
    _subscribesPath: {},
    _subscribesWaitingTimeoutId: 0,
    _subscribesWaitingDoing: false,
    _subscribesWaiting: {},
    _unsubscribesWaitingTimeoutId: 0,
    _unsubscribesWaitingDoing: false,
    _unsubscribesWaiting: {},
    subscribe: function subscribe(path, cbMessage, cbSubscribed, options) {
      options = options || {};

      var _socket = this._getSocket();

      if (!_socket.connected) {
        _socket.connect();
      }

      var subscribeId = ++this._subscribeCounter;
      this._subscribesAll[subscribeId] = {
        path: path,
        cbMessage: cbMessage,
        cbSubscribed: cbSubscribed,
        options: options
      };
      var _itemPath = this._subscribesPath[path];
      var _newPathSubscribe = false;

      if (!_itemPath) {
        _itemPath = this._subscribesPath[path] = {
          scene: options.scene,
          items: {}
        };
        _newPathSubscribe = true;
        delete this._unsubscribesWaiting[path];
      }

      _itemPath.items[subscribeId] = true;

      if (_socket.connected) {
        if (_newPathSubscribe) {
          this._subscribesWaiting[path] = true;

          this._doSubscribesWaiting();
        } else {
          if (!this._subscribesWaiting[path]) {
            if (cbSubscribed) {
              cbSubscribed();
            }
          }
        }
      }

      return subscribeId;
    },
    unsubscribe: function unsubscribe(subscribeId) {
      var _item = this._subscribesAll[subscribeId];
      if (!_item) return;
      var _itemPath = this._subscribesPath[_item.path];

      if (_itemPath) {
        delete _itemPath.items[subscribeId];

        if (Object.keys(_itemPath.items).length === 0) {
          delete this._subscribesPath[_item.path];
          delete this._subscribesWaiting[_item.path];

          if (_itemPath.socketId) {
            this._unsubscribesWaiting[_item.path] = {
              scene: _itemPath.scene,
              socketId: _itemPath.socketId
            };

            this._doUnsubscribesWaiting();
          }
        }
      }

      delete this._subscribesAll[subscribeId];

      if (Object.keys(this._subscribesAll).length === 0) {
        this.disconnect();
      }
    },
    _doSubscribesWaiting: function _doSubscribesWaiting() {
      var _this = this;

      if (this._subscribesWaitingDoing) return;
      if (this._subscribesWaitingTimeoutId !== 0) return;
      if (Object.keys(this._subscribesWaiting).length === 0) return;
      if (!this._socket.connected) return;
      var subscribes = [];

      for (var path in this._subscribesWaiting) {
        var _itemPath = this._subscribesPath[path];

        if (_itemPath) {
          subscribes.push({
            path: path,
            scene: _itemPath.scene
          });
        }
      }

      this._subscribesWaitingDoing = true;
      adapter.subscribe({
        subscribes: subscribes,
        socketId: this._socket.id
      }).then(function () {
        var _iterator = _createForOfIteratorHelper(subscribes),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _item = _step.value;
            delete _this._subscribesWaiting[_item.path];
            var _itemPath2 = _this._subscribesPath[_item.path];

            if (_itemPath2) {
              _itemPath2.socketId = _this._socket.id;

              for (var subscribeId in _itemPath2.items) {
                var _subscribe = _this._subscribesAll[subscribeId];

                if (_subscribe && _subscribe.cbSubscribed) {
                  _subscribe.cbSubscribed();
                }
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        _this._subscribesWaitingDoing = false;

        _this._doSubscribesWaiting();
      })["catch"](function (err) {
        _this._subscribesWaitingDoing = false;

        if (err.code === 401) {
          _this._logout();
        } else {
          _this._subscribesWaitingTimeoutId = window.setTimeout(function () {
            _this._subscribesWaitingTimeoutId = 0;

            _this._doSubscribesWaiting();
          }, 2000);
        }
      });
    },
    _doUnsubscribesWaiting: function _doUnsubscribesWaiting() {
      var _this2 = this;

      if (this._unsubscribesWaitingDoing) return;
      if (this._unsubscribesWaitingTimeoutId !== 0) return;
      if (Object.keys(this._unsubscribesWaiting).length === 0) return;
      var subscribes = [];

      for (var path in this._unsubscribesWaiting) {
        var _itemPath = this._subscribesPath[path];

        if (_itemPath) {
          delete this._unsubscribesWaiting[path];
        } else {
          var _item = this._unsubscribesWaiting[path];
          subscribes.push({
            path: path,
            scene: _item.scene,
            socketId: _item.socketId
          });
        }
      }

      this._unsubscribesWaitingDoing = true;
      adapter.unsubscribe({
        subscribes: subscribes
      }).then(function () {
        var _iterator2 = _createForOfIteratorHelper(subscribes),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _item2 = _step2.value;
            delete _this2._unsubscribesWaiting[_item2.path];
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        _this2._unsubscribesWaitingDoing = false;

        _this2._doUnsubscribesWaiting();
      })["catch"](function (err) {
        _this2._unsubscribesWaitingDoing = false;

        if (err.code === 401) {
          _this2._logout();
        } else {
          _this2._unsubscribesWaitingTimeoutId = window.setTimeout(function () {
            _this2._unsubscribesWaitingTimeoutId = 0;

            _this2._doUnsubscribesWaiting();
          }, 2000);
        }
      });
    },
    _getSocket: function _getSocket() {
      if (!this._socket) {
        this._socket = adapter.socket();

        this._socket.on('connect', this._onConnectBind);

        this._socket.on('disconnect', this._onDisconnectBind);

        this._socket.on('message', this._onMessageBind);

        this._socket.on('message-system', this._onMessageSystemBind);
      }

      return this._socket;
    },
    _logout: function _logout() {
      var _this3 = this;

      window.setTimeout(function () {
        _this3.disconnect();

        if (adapter.logout) {
          adapter.logout();
        }
      }, 0);
    },
    _onMessage: function _onMessage(data) {
      var _itemPath = this._subscribesPath[data.path];
      if (!_itemPath) return;

      for (var subscribeId in _itemPath.items) {
        var _subscribe = this._subscribesAll[subscribeId];

        if (_subscribe && _subscribe.cbMessage) {
          _subscribe.cbMessage({
            message: data.message
          });
        }
      }
    },
    _onMessageSystem: function _onMessageSystem(data) {
      if (data.code === 401) {
        this._onMessageSystem_401(data);
      }
    },
    _onMessageSystem_401: function _onMessageSystem_401(data) {
      var type = data.type;

      if (type === 'self' || type === 'all') {
        this._logout();
      } else if (type === 'provider') {
        var user = adapter.user();

        if (user) {
          if (user.op.anonymous) {
            this._logout();
          } else {
            var providerCurrent = user.provider;
            var providerMessage = data.provider;

            if (providerCurrent.scene === providerMessage.scene && providerCurrent.id === providerMessage.id) {
              this._logout();
            }
          }
        }
      }
    },
    _onConnect: function _onConnect() {
      this._subscribesWaiting = {};

      if (Object.keys(this._subscribesPath).length === 0) {
        this.disconnect();
      } else {
        for (var path in this._subscribesPath) {
          this._subscribesWaiting[path] = true;
        }

        this._doSubscribesWaiting();
      }
    },
    _onDisconnect: function _onDisconnect(reason) {
      this._subscribesWaiting = {};

      if (reason === 'io server disconnect' || reason === 'transport close') {
        this.connect();
      }
    },
    connect: function connect() {
      if (this._socket) {
        this._socket.connect();
      }
    },
    disconnect: function disconnect() {
      if (this._socket) {
        this._socket.disconnect();
      }
    },
    reset: function reset() {
      var _this4 = this;

      this._unsubscribesWaiting = {};
      this._unsubscribesWaitingTimeoutId = 0;
      this._unsubscribesWaitingDoing = false;
      this._subscribesWaiting = {};
      this._subscribesWaitingTimeoutId = 0;
      this._subscribesWaitingDoing = false;
      this._subscribesAll = {};
      this._subscribesPath = {};
      this.disconnect();

      if (this._socket) {
        this._socket.off('connect', this._onConnectBind);

        this._socket.off('disconnect', this._onDisconnectBind);

        this._socket.off('message', this._onMessageBind);

        this._socket.off('message-system', this._onMessageSystemBind);

        this._socket = null;
      }

      var user = adapter.user();

      if (user && !user.op.anonymous) {
        this.subscribe('/a/socketio/messageSystem', function (_ref) {
          var message = _ref.message;

          _this4._onMessageSystem(JSON.parse(message.content));
        });
      }
    }
  };
  io._onConnectBind = io._onConnect.bind(io);
  io._onDisconnectBind = io._onDisconnect.bind(io);
  io._onMessageBind = io._onMessage.bind(io);
  io._onMessageSystemBind = io._onMessageSystem.bind(io);
  adapter.initialize(io);
  return io;
});
module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=socketio.min.js.map