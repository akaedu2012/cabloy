{"version":3,"file":"socketio.min.js","mappings":"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","sources":["webpack://socketio/webpack/universalModuleDefinition","webpack://socketio/webpack/bootstrap","webpack://socketio/webpack/runtime/define property getters","webpack://socketio/webpack/runtime/hasOwnProperty shorthand","webpack://socketio/webpack/runtime/make namespace object","webpack://socketio/./src/main.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"socketio\"] = factory();\n\telse\n\t\troot[\"socketio\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export default adapter => {\n  const io = {\n    // socket\n    _socket: null,\n    // subscribes\n    _subscribeCounter: 0,\n    _subscribesAll: {},\n    _subscribesPath: {},\n    // subscribes waiting\n    _subscribesWaitingTimeoutId: 0,\n    _subscribesWaitingDoing: false,\n    _subscribesWaiting: {},\n    // unsubscribes waiting\n    _unsubscribesWaitingTimeoutId: 0,\n    _unsubscribesWaitingDoing: false,\n    _unsubscribesWaiting: {},\n    // methods\n    subscribe(path, cbMessage, cbSubscribed, options) {\n      // options\n      options = options || {};\n      // socket\n      const _socket = this._getSocket();\n      if (!_socket.connected) {\n        _socket.connect();\n      }\n      // record to All\n      const subscribeId = ++this._subscribeCounter;\n      this._subscribesAll[subscribeId] = {\n        path,\n        cbMessage,\n        cbSubscribed,\n        options,\n      };\n      // record to path\n      let _itemPath = this._subscribesPath[path];\n      let _newPathSubscribe = false;\n      if (!_itemPath) {\n        _itemPath = this._subscribesPath[path] = { scene: options.scene, items: {} };\n        _newPathSubscribe = true;\n        // delete waiting\n        delete this._unsubscribesWaiting[path];\n      }\n      _itemPath.items[subscribeId] = true;\n\n      // check waitings\n      if (_socket.connected) {\n        if (_newPathSubscribe) {\n          this._subscribesWaiting[path] = true;\n          this._doSubscribesWaiting();\n        } else {\n          if (!this._subscribesWaiting[path]) {\n            // invoke cbSubscribed directly\n            if (cbSubscribed) {\n              cbSubscribed();\n            }\n          }\n        }\n      }\n\n      // ok\n      return subscribeId;\n    },\n    unsubscribe(subscribeId) {\n      const _item = this._subscribesAll[subscribeId];\n      if (!_item) return;\n\n      const _itemPath = this._subscribesPath[_item.path];\n      if (_itemPath) {\n        delete _itemPath.items[subscribeId];\n        if (Object.keys(_itemPath.items).length === 0) {\n          // delete path\n          delete this._subscribesPath[_item.path];\n          // delete waiting\n          delete this._subscribesWaiting[_item.path];\n          // unsubscribe\n          if (_itemPath.socketId) {\n            this._unsubscribesWaiting[_item.path] = { scene: _itemPath.scene, socketId: _itemPath.socketId };\n            this._doUnsubscribesWaiting();\n          }\n        }\n      }\n\n      delete this._subscribesAll[subscribeId];\n\n      if (Object.keys(this._subscribesAll).length === 0) {\n        this.disconnect();\n      }\n    },\n    _doSubscribesWaiting() {\n      if (this._subscribesWaitingDoing) return;\n      if (this._subscribesWaitingTimeoutId !== 0) return;\n      if (Object.keys(this._subscribesWaiting).length === 0) return;\n      if (!this._socket.connected) return;\n      // combine\n      const subscribes = [];\n      for (const path in this._subscribesWaiting) {\n        const _itemPath = this._subscribesPath[path];\n        if (_itemPath) {\n          subscribes.push({ path, scene: _itemPath.scene });\n        }\n      }\n      // subscribe\n      this._subscribesWaitingDoing = true;\n      adapter\n        .subscribe({ subscribes, socketId: this._socket.id })\n        .then(() => {\n          // loop\n          for (const _item of subscribes) {\n            // delete waiting\n            delete this._subscribesWaiting[_item.path];\n            // cbSubscribed\n            const _itemPath = this._subscribesPath[_item.path];\n            if (_itemPath) {\n              _itemPath.socketId = this._socket.id;\n              for (const subscribeId in _itemPath.items) {\n                const _subscribe = this._subscribesAll[subscribeId];\n                if (_subscribe && _subscribe.cbSubscribed) {\n                  _subscribe.cbSubscribed();\n                }\n              }\n            }\n          }\n          // done\n          this._subscribesWaitingDoing = false;\n          // next\n          this._doSubscribesWaiting();\n        })\n        .catch(err => {\n          // done\n          this._subscribesWaitingDoing = false;\n          if (err.code === 401) {\n            this._logout();\n          } else {\n            // timeout\n            this._subscribesWaitingTimeoutId = window.setTimeout(() => {\n              this._subscribesWaitingTimeoutId = 0;\n              this._doSubscribesWaiting();\n            }, 2000);\n          }\n        });\n    },\n    _doUnsubscribesWaiting() {\n      if (this._unsubscribesWaitingDoing) return;\n      if (this._unsubscribesWaitingTimeoutId !== 0) return;\n      if (Object.keys(this._unsubscribesWaiting).length === 0) return;\n      // combine\n      const subscribes = [];\n      for (const path in this._unsubscribesWaiting) {\n        const _itemPath = this._subscribesPath[path];\n        if (_itemPath) {\n          // delete waiting\n          delete this._unsubscribesWaiting[path];\n        } else {\n          const _item = this._unsubscribesWaiting[path];\n          subscribes.push({ path, scene: _item.scene, socketId: _item.socketId });\n        }\n      }\n      // unsubscribe\n      this._unsubscribesWaitingDoing = true;\n      adapter\n        .unsubscribe({ subscribes })\n        .then(() => {\n          // loop\n          for (const _item of subscribes) {\n            // delete waiting\n            delete this._unsubscribesWaiting[_item.path];\n          }\n          // done\n          this._unsubscribesWaitingDoing = false;\n          // next\n          this._doUnsubscribesWaiting();\n        })\n        .catch(err => {\n          // done\n          this._unsubscribesWaitingDoing = false;\n          if (err.code === 401) {\n            this._logout();\n          } else {\n            // timeout\n            this._unsubscribesWaitingTimeoutId = window.setTimeout(() => {\n              this._unsubscribesWaitingTimeoutId = 0;\n              this._doUnsubscribesWaiting();\n            }, 2000);\n          }\n        });\n    },\n    _getSocket() {\n      if (!this._socket) {\n        this._socket = adapter.socket();\n        this._socket.on('connect', this._onConnectBind);\n        this._socket.on('disconnect', this._onDisconnectBind);\n        this._socket.on('message', this._onMessageBind);\n        this._socket.on('message-system', this._onMessageSystemBind);\n      }\n      return this._socket;\n    },\n    _logout() {\n      this.disconnect();\n      if (adapter.logout) {\n        adapter.logout();\n      }\n    },\n    _onMessage(data) {\n      const _itemPath = this._subscribesPath[data.path];\n      if (!_itemPath) return;\n      for (const subscribeId in _itemPath.items) {\n        const _subscribe = this._subscribesAll[subscribeId];\n        if (_subscribe && _subscribe.cbMessage) {\n          _subscribe.cbMessage({ message: data.message });\n        }\n      }\n    },\n    _onMessageSystem(data) {\n      if (data.code === 401) {\n        this._onMessageSystem_401(data);\n      }\n    },\n    _onMessageSystem_401(data) {\n      const type = data.type;\n      if (type === 'self' || type === 'all') {\n        this._logout();\n      } else if (type === 'provider') {\n        const user = adapter.user();\n        if (user.op.anonymous) {\n          this._logout();\n        } else {\n          const providerCurrent = user.provider;\n          const providerMessage = data.provider;\n          if (providerCurrent.scene === providerMessage.scene && providerCurrent.id === providerMessage.id) {\n            this._logout();\n          }\n        }\n      }\n    },\n    _onConnect() {\n      this._subscribesWaiting = {};\n      if (Object.keys(this._subscribesPath).length === 0) {\n        this.disconnect();\n      } else {\n        // -> waitings\n        for (const path in this._subscribesPath) {\n          this._subscribesWaiting[path] = true;\n        }\n        this._doSubscribesWaiting();\n      }\n    },\n    _onDisconnect(reason) {\n      this._subscribesWaiting = {};\n      // reconnect\n      if (reason === 'io server disconnect' || reason === 'transport close') {\n        // the disconnection was initiated by the server, you need to reconnect manually\n        this.connect();\n      }\n    },\n    connect() {\n      if (this._socket) {\n        this._socket.connect();\n      }\n    },\n    disconnect() {\n      if (this._socket) {\n        this._socket.disconnect();\n      }\n    },\n    reset() {\n      this._unsubscribesWaiting = {};\n      this._unsubscribesWaitingTimeoutId = 0;\n      this._unsubscribesWaitingDoing = false;\n\n      this._subscribesWaiting = {};\n      this._subscribesWaitingTimeoutId = 0;\n      this._subscribesWaitingDoing = false;\n\n      this._subscribesAll = {};\n      this._subscribesPath = {};\n\n      this.disconnect();\n\n      // should clear socket\n      if (this._socket) {\n        this._socket.off('connect', this._onConnectBind);\n        this._socket.off('disconnect', this._onDisconnectBind);\n        this._socket.off('message', this._onMessageBind);\n        this._socket.off('message-system', this._onMessageSystemBind);\n        this._socket = null;\n      }\n\n      const user = adapter.user();\n      if (!user.op.anonymous) {\n        this.subscribe('/a/socketio/messageSystem', ({ message }) => {\n          this._onMessageSystem(JSON.parse(message.content));\n        });\n      }\n    },\n  };\n  // bind\n  io._onConnectBind = io._onConnect.bind(io);\n  io._onDisconnectBind = io._onDisconnect.bind(io);\n  io._onMessageBind = io._onMessage.bind(io);\n  io._onMessageSystemBind = io._onMessageSystem.bind(io);\n  // initialize\n  adapter.initialize(io);\n  return io;\n};\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","adapter","io","_socket","_subscribeCounter","_subscribesAll","_subscribesPath","_subscribesWaitingTimeoutId","_subscribesWaitingDoing","_subscribesWaiting","_unsubscribesWaitingTimeoutId","_unsubscribesWaitingDoing","_unsubscribesWaiting","subscribe","path","cbMessage","cbSubscribed","options","this","_getSocket","connected","connect","subscribeId","_itemPath","_newPathSubscribe","scene","items","_doSubscribesWaiting","unsubscribe","_item","keys","length","socketId","_doUnsubscribesWaiting","disconnect","subscribes","push","id","then","_subscribe","err","code","_logout","window","setTimeout","socket","on","_onConnectBind","_onDisconnectBind","_onMessageBind","_onMessageSystemBind","logout","_onMessage","data","message","_onMessageSystem","_onMessageSystem_401","type","user","op","anonymous","providerCurrent","provider","providerMessage","_onConnect","_onDisconnect","reason","reset","off","JSON","parse","content","bind","initialize"],"sourceRoot":""}