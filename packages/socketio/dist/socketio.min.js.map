{"version":3,"file":"socketio.min.js","mappings":"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","sources":["webpack://@zhennann/socketio/webpack/bootstrap","webpack://@zhennann/socketio/webpack/runtime/define property getters","webpack://@zhennann/socketio/webpack/runtime/hasOwnProperty shorthand","webpack://@zhennann/socketio/webpack/runtime/make namespace object","webpack://@zhennann/socketio/./src/main.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export default adapter => {\n  const io = {\n    // socket\n    _socket: null,\n    // subscribes\n    _subscribeCounter: 0,\n    _subscribesAll: {},\n    _subscribesPath: {},\n    // subscribes waiting\n    _subscribesWaitingTimeoutId: 0,\n    _subscribesWaitingDoing: false,\n    _subscribesWaiting: {},\n    // unsubscribes waiting\n    _unsubscribesWaitingTimeoutId: 0,\n    _unsubscribesWaitingDoing: false,\n    _unsubscribesWaiting: {},\n    // performAction\n    async performAction({ method, url, query, params, headers, body }) {\n      return null;\n    },\n    // methods\n    subscribe(path, cbMessage, cbSubscribed, options) {\n      // options\n      options = options || {};\n      // socket\n      const _socket = this._getSocket();\n      if (!_socket.connected) {\n        _socket.connect();\n      }\n      // record to All\n      const subscribeId = ++this._subscribeCounter;\n      this._subscribesAll[subscribeId] = {\n        path,\n        cbMessage,\n        cbSubscribed,\n        options,\n      };\n      // record to path\n      let _itemPath = this._subscribesPath[path];\n      let _newPathSubscribe = false;\n      if (!_itemPath) {\n        _itemPath = this._subscribesPath[path] = { scene: options.scene, items: {} };\n        _newPathSubscribe = true;\n        // delete waiting\n        delete this._unsubscribesWaiting[path];\n      }\n      _itemPath.items[subscribeId] = true;\n\n      // check waitings\n      if (_socket.connected) {\n        if (_newPathSubscribe) {\n          this._subscribesWaiting[path] = true;\n          this._doSubscribesWaiting();\n        } else {\n          if (!this._subscribesWaiting[path]) {\n            // invoke cbSubscribed directly\n            if (cbSubscribed) {\n              cbSubscribed();\n            }\n          }\n        }\n      }\n\n      // ok\n      return subscribeId;\n    },\n    unsubscribe(subscribeId) {\n      const _item = this._subscribesAll[subscribeId];\n      if (!_item) return;\n\n      const _itemPath = this._subscribesPath[_item.path];\n      if (_itemPath) {\n        delete _itemPath.items[subscribeId];\n        if (Object.keys(_itemPath.items).length === 0) {\n          // delete path\n          delete this._subscribesPath[_item.path];\n          // delete waiting\n          delete this._subscribesWaiting[_item.path];\n          // unsubscribe\n          if (_itemPath.socketId) {\n            this._unsubscribesWaiting[_item.path] = { scene: _itemPath.scene, socketId: _itemPath.socketId };\n            this._doUnsubscribesWaiting();\n          }\n        }\n      }\n\n      delete this._subscribesAll[subscribeId];\n\n      if (Object.keys(this._subscribesAll).length === 0) {\n        this.disconnect();\n      }\n    },\n    _doSubscribesWaiting() {\n      if (this._subscribesWaitingDoing) return;\n      if (this._subscribesWaitingTimeoutId !== 0) return;\n      if (Object.keys(this._subscribesWaiting).length === 0) return;\n      if (!this._socket.connected) return;\n      // combine\n      const subscribes = [];\n      for (const path in this._subscribesWaiting) {\n        const _itemPath = this._subscribesPath[path];\n        if (_itemPath) {\n          subscribes.push({ path, scene: _itemPath.scene });\n        }\n      }\n      // subscribe\n      this._subscribesWaitingDoing = true;\n      adapter\n        .subscribe({ subscribes, socketId: this._socket.id })\n        .then(() => {\n          // loop\n          for (const _item of subscribes) {\n            // delete waiting\n            delete this._subscribesWaiting[_item.path];\n            // cbSubscribed\n            const _itemPath = this._subscribesPath[_item.path];\n            if (_itemPath) {\n              _itemPath.socketId = this._socket.id;\n              for (const subscribeId in _itemPath.items) {\n                const _subscribe = this._subscribesAll[subscribeId];\n                if (_subscribe && _subscribe.cbSubscribed) {\n                  _subscribe.cbSubscribed();\n                }\n              }\n            }\n          }\n          // done\n          this._subscribesWaitingDoing = false;\n          // next\n          this._doSubscribesWaiting();\n        })\n        .catch(err => {\n          // done\n          this._subscribesWaitingDoing = false;\n          if (err.code === 401) {\n            this._logout();\n          } else {\n            // timeout: not use window.\n            this._subscribesWaitingTimeoutId = setTimeout(() => {\n              this._subscribesWaitingTimeoutId = 0;\n              this._doSubscribesWaiting();\n            }, 2000);\n          }\n        });\n    },\n    _doUnsubscribesWaiting() {\n      if (this._unsubscribesWaitingDoing) return;\n      if (this._unsubscribesWaitingTimeoutId !== 0) return;\n      if (Object.keys(this._unsubscribesWaiting).length === 0) return;\n      // combine\n      const subscribes = [];\n      for (const path in this._unsubscribesWaiting) {\n        const _itemPath = this._subscribesPath[path];\n        if (_itemPath) {\n          // delete waiting\n          delete this._unsubscribesWaiting[path];\n        } else {\n          const _item = this._unsubscribesWaiting[path];\n          subscribes.push({ path, scene: _item.scene, socketId: _item.socketId });\n        }\n      }\n      // unsubscribe\n      this._unsubscribesWaitingDoing = true;\n      adapter\n        .unsubscribe({ subscribes })\n        .then(() => {\n          // loop\n          for (const _item of subscribes) {\n            // delete waiting\n            delete this._unsubscribesWaiting[_item.path];\n          }\n          // done\n          this._unsubscribesWaitingDoing = false;\n          // next\n          this._doUnsubscribesWaiting();\n        })\n        .catch(err => {\n          // done\n          this._unsubscribesWaitingDoing = false;\n          if (err.code === 401) {\n            this._logout();\n          } else {\n            // // timeout: not use window.\n            this._unsubscribesWaitingTimeoutId = setTimeout(() => {\n              this._unsubscribesWaitingTimeoutId = 0;\n              this._doUnsubscribesWaiting();\n            }, 2000);\n          }\n        });\n    },\n    _getSocket() {\n      if (!this._socket) {\n        this._socket = adapter.socket();\n        this._socket.on('connect', this._onConnectBind);\n        this._socket.on('disconnect', this._onDisconnectBind);\n        this._socket.on('message', this._onMessageBind);\n        this._socket.on('message-system', this._onMessageSystemBind);\n      }\n      return this._socket;\n    },\n    _logout() {\n      // timeout: not use window.\n      setTimeout(() => {\n        this.disconnect();\n        if (adapter.logout) {\n          adapter.logout();\n        }\n      }, 0);\n    },\n    _onMessage(data) {\n      const _itemPath = this._subscribesPath[data.path];\n      if (!_itemPath) return;\n      for (const subscribeId in _itemPath.items) {\n        const _subscribe = this._subscribesAll[subscribeId];\n        if (_subscribe && _subscribe.cbMessage) {\n          _subscribe.cbMessage({ message: data.message });\n        }\n      }\n    },\n    _onMessageSystem(data) {\n      if (data.code === 401) {\n        this._onMessageSystem_401(data);\n      }\n    },\n    _onMessageSystem_401(data) {\n      const type = data.type;\n      if (type === 'self' || type === 'all') {\n        this._logout();\n      } else if (type === 'provider') {\n        const user = adapter.user();\n        if (user) {\n          if (user.op.anonymous) {\n            this._logout();\n          } else {\n            const providerCurrent = user.provider;\n            const providerMessage = data.provider;\n            if (\n              providerCurrent &&\n              providerMessage &&\n              providerCurrent.scene === providerMessage.scene &&\n              providerCurrent.id === providerMessage.id\n            ) {\n              this._logout();\n            }\n          }\n        }\n      }\n    },\n    _onConnect() {\n      this._subscribesWaiting = {};\n      if (Object.keys(this._subscribesPath).length === 0) {\n        this.disconnect();\n      } else {\n        // -> waitings\n        for (const path in this._subscribesPath) {\n          this._subscribesWaiting[path] = true;\n        }\n        this._doSubscribesWaiting();\n      }\n    },\n    _onDisconnect(reason) {\n      this._subscribesWaiting = {};\n      // reconnect\n      if (reason === 'io server disconnect' || reason === 'transport close') {\n        // the disconnection was initiated by the server, you need to reconnect manually\n        this.connect();\n      }\n    },\n    connect() {\n      if (this._socket) {\n        this._socket.connect();\n      }\n    },\n    disconnect() {\n      if (this._socket) {\n        this._socket.disconnect();\n      }\n    },\n    reset() {\n      this._unsubscribesWaiting = {};\n      this._unsubscribesWaitingTimeoutId = 0;\n      this._unsubscribesWaitingDoing = false;\n\n      this._subscribesWaiting = {};\n      this._subscribesWaitingTimeoutId = 0;\n      this._subscribesWaitingDoing = false;\n\n      this._subscribesAll = {};\n      this._subscribesPath = {};\n\n      this.disconnect();\n\n      // should clear socket\n      if (this._socket) {\n        this._socket.off('connect', this._onConnectBind);\n        this._socket.off('disconnect', this._onDisconnectBind);\n        this._socket.off('message', this._onMessageBind);\n        this._socket.off('message-system', this._onMessageSystemBind);\n        this._socket = null;\n      }\n\n      const user = adapter.user();\n      if (user && !user.op.anonymous) {\n        this.subscribe('/a/socketio/messageSystem', ({ message }) => {\n          this._onMessageSystem(JSON.parse(message.content));\n        });\n      }\n    },\n  };\n  // bind\n  io._onConnectBind = io._onConnect.bind(io);\n  io._onDisconnectBind = io._onDisconnect.bind(io);\n  io._onMessageBind = io._onMessage.bind(io);\n  io._onMessageSystemBind = io._onMessageSystem.bind(io);\n  // initialize\n  adapter.initialize(io);\n  return io;\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","adapter","io","_socket","_subscribeCounter","_subscribesAll","_subscribesPath","_subscribesWaitingTimeoutId","_subscribesWaitingDoing","_subscribesWaiting","_unsubscribesWaitingTimeoutId","_unsubscribesWaitingDoing","_unsubscribesWaiting","performAction","method","url","query","params","headers","body","subscribe","path","cbMessage","cbSubscribed","options","this","_getSocket","connected","connect","subscribeId","_itemPath","_newPathSubscribe","scene","items","_doSubscribesWaiting","unsubscribe","_item","keys","length","socketId","_doUnsubscribesWaiting","disconnect","subscribes","push","id","then","_subscribe","err","code","_logout","setTimeout","socket","on","_onConnectBind","_onDisconnectBind","_onMessageBind","_onMessageSystemBind","logout","_onMessage","data","message","_onMessageSystem","_onMessageSystem_401","type","user","op","anonymous","providerCurrent","provider","providerMessage","_onConnect","_onDisconnect","reason","reset","off","JSON","parse","content","bind","initialize"],"sourceRoot":""}