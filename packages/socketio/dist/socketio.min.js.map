{"version":3,"file":"socketio.min.js","mappings":"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","sources":["webpack://@zhennann/socketio/webpack/bootstrap","webpack://@zhennann/socketio/webpack/runtime/define property getters","webpack://@zhennann/socketio/webpack/runtime/hasOwnProperty shorthand","webpack://@zhennann/socketio/webpack/runtime/make namespace object","webpack://@zhennann/socketio/./src/io_main.js","webpack://@zhennann/socketio/./src/io_socket.js","webpack://@zhennann/socketio/./src/io_message.js","webpack://@zhennann/socketio/./src/io_messageSystem.js","webpack://@zhennann/socketio/./src/io_performAction.js","webpack://@zhennann/socketio/./src/io_test.js","webpack://@zhennann/socketio/./src/main.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export default adapter => {\n  const io = {\n    //\n    _onConnectCallbacks: [],\n    _onDisconnectCallbacks: [],\n    _onSocketCreateCallbacks: [],\n    _onSocketDestroyCallbacks: [],\n    _onResetCallbacks: [],\n    //\n    _logout() {\n      // timeout: not use window.\n      setTimeout(() => {\n        this.disconnect();\n        if (adapter.logout) {\n          adapter.logout();\n        }\n      }, 0);\n    },\n    reset() {\n      this.raiseOnReset();\n    },\n    //\n    registerOnConnect(callback) {\n      this._onConnectCallbacks.push(callback);\n    },\n    raiseOnConnect() {\n      for (const callback of this._onConnectCallbacks) {\n        callback.call(this);\n      }\n    },\n    registerOnDisconnect(callback) {\n      this._onDisconnectCallbacks.push(callback);\n    },\n    raiseOnDisconnect() {\n      for (const callback of this._onDisconnectCallbacks) {\n        callback.call(this);\n      }\n    },\n    registerOnSocketCreate(callback) {\n      this._onSocketCreateCallbacks.push(callback);\n    },\n    raiseOnSocketCreate(socket) {\n      for (const callback of this._onSocketCreateCallbacks) {\n        callback.call(this, socket);\n      }\n    },\n    registerOnSocketDestroy(callback) {\n      this._onSocketDestroyCallbacks.push(callback);\n    },\n    raiseOnSocketDestroy(socket) {\n      for (const callback of this._onSocketDestroyCallbacks) {\n        callback.call(this, socket);\n      }\n    },\n    registerOnReset(callback) {\n      this._onResetCallbacks.push(callback);\n    },\n    raiseOnReset() {\n      for (const callback of this._onResetCallbacks) {\n        callback.call(this);\n      }\n    },\n  };\n  return io;\n};\n","export default adapter => {\n  const io = {\n    // socket\n    _socket: null,\n    //\n    connect() {\n      if (this._socket) {\n        this._socket.connect();\n      }\n    },\n    disconnect() {\n      if (this._socket) {\n        this._socket.disconnect();\n      }\n    },\n    _onConnect() {\n      this.raiseOnConnect();\n    },\n    _onDisconnect(reason) {\n      this.raiseOnDisconnect();\n      // reconnect\n      if (reason === 'io server disconnect' || reason === 'transport close') {\n        // the disconnection was initiated by the server, you need to reconnect manually\n        this.connect();\n      }\n    },\n    _getSocket() {\n      if (!this._socket) {\n        this._socket = adapter.socket();\n        this.raiseOnSocketCreate(this._socket);\n      }\n      return this._socket;\n    },\n    _initialize() {\n      this._onConnectBind = this._onConnect.bind(this);\n      this._onDisconnectBind = this._onDisconnect.bind(this);\n      this.registerOnSocketCreate(socket => {\n        socket.on('connect', this._onConnectBind);\n        socket.on('disconnect', this._onDisconnectBind);\n      });\n      this.registerOnSocketDestroy(socket => {\n        socket.off('connect', this._onConnectBind);\n        socket.off('disconnect', this._onDisconnectBind);\n      });\n    },\n  };\n  return io;\n};\n","export default () => {\n  const io = {\n    // subscribes\n    _subscribeCounter: 0,\n    _subscribesAll: {},\n    _subscribesPath: {},\n    // methods\n    subscribe(path, cbMessage, cbSubscribed, options) {\n      // socket\n      const _socket = this._getSocket();\n      if (!_socket.connected) {\n        _socket.connect();\n      }\n      // record to All\n      const subscribeId = ++this._subscribeCounter;\n      this._subscribesAll[subscribeId] = {\n        path,\n        cbMessage,\n        cbSubscribed,\n        options,\n      };\n      // record to path\n      let _itemPath = this._subscribesPath[path];\n      let _newPathSubscribe = false;\n      if (!_itemPath) {\n        _itemPath = this._subscribesPath[path] = {\n          subscribed: false,\n          timestamp: Date.now(),\n          items: {},\n        };\n        _newPathSubscribe = true;\n      }\n      _itemPath.items[subscribeId] = true;\n      // just return subscribeId when disconnected\n      if (!_socket.connected) return subscribeId;\n      // connected\n      if (_newPathSubscribe) {\n        this._doSubscribePath(path);\n      } else {\n        if (_itemPath.subscribed) {\n          // invoke cbSubscribed directly\n          if (cbSubscribed) {\n            setTimeout(() => {\n              cbSubscribed({ subscribeId, path, options });\n            }, 0);\n          }\n        }\n      }\n      // ok\n      return subscribeId;\n    },\n    unsubscribe(subscribeId) {\n      const _item = this._subscribesAll[subscribeId];\n      if (!_item) return;\n\n      let _newPathUnsubscribe = false;\n      const _itemPath = this._subscribesPath[_item.path];\n      if (_itemPath) {\n        delete _itemPath.items[subscribeId];\n        if (Object.keys(_itemPath.items).length === 0) {\n          delete this._subscribesPath[_item.path];\n          _newPathUnsubscribe = true;\n        }\n      }\n\n      delete this._subscribesAll[subscribeId];\n      if (Object.keys(this._subscribesAll).length === 0) {\n        this.disconnect();\n        return; // just return because will be disconnected\n      }\n\n      // just return when disconnected\n      const _socket = this._getSocket();\n      if (!_socket.connected) return;\n\n      if (_newPathUnsubscribe) {\n        // force unsubscribe no matter whether _itemPath.subscribed\n        this._doUnsubscribePath(_item.path);\n      }\n    },\n    _onMessage(data) {\n      const _itemPath = this._subscribesPath[data.path];\n      if (!_itemPath) return;\n      for (const subscribeId in _itemPath.items) {\n        const _subscribe = this._subscribesAll[subscribeId];\n        if (_subscribe && _subscribe.cbMessage) {\n          _subscribe.cbMessage({\n            message: data.message,\n            subscribeId,\n            path: data.path,\n            options: _subscribe.options,\n          });\n        }\n      }\n    },\n    _doSubscribePath(path) {\n      // check\n      const _socket = this._getSocket();\n      if (!_socket.connected) return;\n      const _itemPath = this._subscribesPath[path];\n      if (!_itemPath) return;\n      // subscribe\n      this.performAction({\n        url: '/a/socketio/subscribe',\n        body: {\n          path,\n          timestamp: _itemPath.timestamp,\n        },\n      })\n        .then(() => {\n          _itemPath.subscribed = true;\n          for (const subscribeId in _itemPath.items) {\n            const _subscribe = this._subscribesAll[subscribeId];\n            if (_subscribe && _subscribe.cbSubscribed) {\n              _subscribe.cbSubscribed({ subscribeId, path, options: _subscribe.options });\n            }\n          }\n        })\n        .catch(() => {\n          // do nothing\n          // not check 401\n        });\n    },\n    _doUnsubscribePath(path) {\n      // check\n      const _socket = this._getSocket();\n      if (!_socket.connected) return;\n      const _itemPath = this._subscribesPath[path];\n      if (!_itemPath) return;\n      // subscribe\n      this.performAction({\n        url: '/a/socketio/unsubscribe',\n        body: {\n          path,\n          timestamp: Date.now(),\n        },\n      })\n        .then(() => {\n          _itemPath.subscribed = false;\n        })\n        .catch(() => {\n          // do nothing\n          // not check 401\n        });\n    },\n    _initialize() {\n      // OnConnect\n      this.registerOnConnect(() => {\n        // subscribe again\n        for (const path in this._subscribesPath) {\n          this._doSubscribePath(path);\n        }\n      });\n      // onDisconnect\n      this.registerOnDisconnect(() => {\n        // reset all paths\n        for (const path in this._subscribesPath) {\n          const _itemPath = this._subscribesPath[path];\n          _itemPath.subscribed = false;\n        }\n      });\n      // onReset\n      this.registerOnReset(() => {\n        this._subscribesAll = {};\n        this._subscribesPath = {};\n\n        this.disconnect();\n\n        // should clear socket\n        if (this._socket) {\n          this.raiseOnSocketDestroy(this._socket);\n          this._socket = null;\n        }\n      });\n      // message\n      this._onMessageBind = this._onMessage.bind(this);\n      this.registerOnSocketCreate(socket => {\n        socket.on('message', this._onMessageBind);\n      });\n      this.registerOnSocketDestroy(socket => {\n        socket.off('message', this._onMessageBind);\n      });\n    },\n  };\n  return io;\n};\n","export default adapter => {\n  const io = {\n    _onMessageSystem(data) {\n      if (data.code === 401) {\n        this._onMessageSystem_401(data);\n      }\n    },\n    _onMessageSystem_401(data) {\n      const type = data.type;\n      if (type === 'self' || type === 'all') {\n        this._logout();\n      } else if (type === 'provider') {\n        const user = adapter.user();\n        if (user) {\n          if (user.op.anonymous) {\n            this._logout();\n          } else {\n            const providerCurrent = user.provider;\n            const providerMessage = data.provider;\n            if (\n              providerCurrent &&\n              providerMessage &&\n              providerCurrent.scene === providerMessage.scene &&\n              providerCurrent.id === providerMessage.id\n            ) {\n              this._logout();\n            }\n          }\n        }\n      }\n    },\n    _initialize() {\n      // onMessageSystem\n      this._onMessageSystemBind = this._onMessageSystem.bind(this);\n      this.registerOnSocketCreate(socket => {\n        socket.on('message-system', this._onMessageSystemBind);\n      });\n      this.registerOnSocketDestroy(socket => {\n        socket.off('message-system', this._onMessageSystemBind);\n      });\n      // onReset\n      this.registerOnReset(() => {\n        setTimeout(() => {\n          const user = adapter.user();\n          if (user && !user.op.anonymous) {\n            this.subscribe('/a/socketio/messageSystem', ({ message }) => {\n              this._onMessageSystem(JSON.parse(message.content));\n            });\n          }\n        }, 0);\n      });\n    },\n  };\n  return io;\n};\n","export default () => {\n  const io = {\n    // performAction\n    _performActionCounter: 0,\n    _performActionPromises: {},\n    // performAction\n    async performAction({ url, body }) {\n      // socket\n      const _socket = this._getSocket();\n      if (!_socket.connected) {\n        return new Error('socket is disconnected');\n      }\n      // emit message\n      return new Promise((resolve, reject) => {\n        const id = ++this._performActionCounter;\n        this._performActionPromises[id] = { resolve, reject };\n        _socket.emit('performAction', { id, url, body });\n      });\n    },\n    _onMessagePerformActionCallback(data) {\n      const { id, result } = data;\n      const promise = this._performActionPromises[id];\n      if (!promise) return;\n      delete this._performActionPromises[id];\n      const { resolve, reject } = promise;\n      //\n      if (result.code === 0) {\n        resolve(result.data);\n      } else {\n        const error = new Error();\n        error.code = result.code;\n        error.message = result.message;\n        reject(error);\n      }\n    },\n    _clearPerformActionPromises() {\n      for (const id in this._performActionPromises) {\n        const promise = this._performActionPromises[id];\n        promise.reject(new Error('socket is disconnected'));\n      }\n      this._performActionPromises = {};\n    },\n    _initialize() {\n      this.registerOnDisconnect(() => {\n        this._clearPerformActionPromises();\n      });\n      this._onMessagePerformActionCallbackBind = this._onMessagePerformActionCallback.bind(this);\n      this.registerOnSocketCreate(socket => {\n        socket.on('performAction-callback', this._onMessagePerformActionCallbackBind);\n      });\n      this.registerOnSocketDestroy(socket => {\n        socket.off('performAction-callback', this._onMessagePerformActionCallbackBind);\n      });\n    },\n  };\n  return io;\n};\n","export default () => {\n  const io = {\n    __test: false, // true,\n    __testPerformAction(i) {\n      this.performAction({ url: '/a/socketio/test/echo', body: { echo: i } })\n        .then(data => {\n          console.log(data);\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    },\n    _initialize() {\n      this.registerOnConnect(() => {\n        if (!this.__test) return;\n        for (const i of [1, 2]) {\n          this.__testPerformAction(i);\n        }\n      });\n    },\n  };\n  return io;\n};\n","import io_main from './io_main.js';\nimport io_socket from './io_socket.js';\nimport io_message from './io_message.js';\nimport io_messageSystem from './io_messageSystem.js';\nimport io_performAction from './io_performAction.js';\nimport io_test from './io_test.js';\n\nexport default adapter => {\n  const io = {};\n  const _initializes = [];\n  function mixin(ioProviderFn) {\n    const ioProvider = ioProviderFn(adapter);\n    if (ioProvider._initialize) {\n      _initializes.push(ioProvider._initialize);\n    }\n    Object.assign(io, ioProvider);\n  }\n  // mixins\n  mixin(io_main);\n  mixin(io_socket);\n  mixin(io_message);\n  mixin(io_messageSystem);\n  mixin(io_performAction);\n  mixin(io_test);\n  // initialize providers\n  for (const _initialize of _initializes) {\n    _initialize.call(io);\n  }\n  // initialize adapter\n  adapter.initialize(io);\n  return io;\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","adapter","_onConnectCallbacks","_onDisconnectCallbacks","_onSocketCreateCallbacks","_onSocketDestroyCallbacks","_onResetCallbacks","_logout","setTimeout","disconnect","logout","reset","this","raiseOnReset","registerOnConnect","callback","push","raiseOnConnect","registerOnDisconnect","raiseOnDisconnect","registerOnSocketCreate","raiseOnSocketCreate","socket","registerOnSocketDestroy","raiseOnSocketDestroy","registerOnReset","_socket","connect","_onConnect","_onDisconnect","reason","_getSocket","_initialize","_onConnectBind","bind","_onDisconnectBind","on","off","_subscribeCounter","_subscribesAll","_subscribesPath","subscribe","path","cbMessage","cbSubscribed","options","connected","subscribeId","_itemPath","_newPathSubscribe","subscribed","timestamp","Date","now","items","_doSubscribePath","unsubscribe","_item","_newPathUnsubscribe","keys","length","_doUnsubscribePath","_onMessage","data","_subscribe","message","performAction","url","body","then","_onMessageBind","_onMessageSystem","code","_onMessageSystem_401","type","user","op","anonymous","providerCurrent","provider","providerMessage","scene","id","_onMessageSystemBind","JSON","parse","content","io","_performActionCounter","_performActionPromises","Error","Promise","resolve","reject","emit","_onMessagePerformActionCallback","result","promise","error","_clearPerformActionPromises","_onMessagePerformActionCallbackBind","__test","__testPerformAction","i","echo","console","log","err","_initializes","mixin","ioProviderFn","ioProvider","assign","io_main","io_socket","io_message","io_messageSystem","io_performAction","io_test","initialize"],"sourceRoot":""}