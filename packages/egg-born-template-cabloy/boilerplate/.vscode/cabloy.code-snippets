/**
* supported code snippets as follows:
*   controller service model route
*   atom broadcast event local
*   middleware queue schedule sequence
*   startup stats test
**/
{
  "Cabloy Controller": {
    "scope": "javascript",
    "prefix": "cabloy controller",
    "body": [
      "module.exports = app => {",
      "",
      "  class ${TM_FILENAME_BASE}Controller extends app.Controller {",
      "",
      "    async action() {",
      "      const res = await this.ctx.service.${TM_FILENAME_BASE}.action();",
      "      this.ctx.success(res);",
      "    }",
      "",
      "  }",
      "",
      "  return ${TM_FILENAME_BASE}Controller;",
      "};",
      "",
    ],
    "description": "Cabloy Controller"
  },
  "Cabloy Service": {
    "prefix": "cabloy service",
    "body": [
      "module.exports = app => {",
      "",
      "  class ${TM_FILENAME_BASE} extends app.Service {",
      "",
      "    async action() {",
      "    }",
      "",
      "  }",
      "",
      "  return ${TM_FILENAME_BASE};",
      "};",
      ""
    ],
    "description": "Cabloy Service"
  },
  "Cabloy Model": {
    "prefix": "cabloy model",
    "body": [
      "module.exports = app => {",
      "",
      "  class ${TM_FILENAME_BASE} extends app.meta.Model {",
      "",
      "    constructor(ctx) {",
      "      super(ctx, { table: '${1:${TM_FILENAME_BASE}}', options: { disableDeleted: false } });",
      "    }",
      "",
      "  }",
      "",
      "  return ${TM_FILENAME_BASE};",
      "};",
      ""
    ],
    "description": "Cabloy Model"
  },
  "Cabloy Route": {
    "prefix": "cabloy route",
    "body": [
      "{ method: '${1:post}', path: '${2}', controller: '${3}' },"
    ],
    "description": "Cabloy Route"
  },
  "Cabloy Atom": {
    "prefix": "cabloy atom",
    "body": [
      "module.exports = app => {",
      "",
      "  class Atom extends app.meta.AtomBase {",
      "",
      "    async create({ atomClass, item, options, user }) {",
      "      // super",
      "      const key = await super.create({ atomClass, item, options, user });",
      "      // add ${1:modelName}",
      "      const res = await this.ctx.model.${1:modelName}.insert({",
      "        atomId: key.atomId,",
      "      });",
      "      // return key",
      "      return { atomId: key.atomId, itemId: res.insertId };",
      "    }",
      "",
      "    async read({ atomClass, options, key, user }) {",
      "      // super",
      "      const item = await super.read({ atomClass, options, key, user });",
      "      if (!item) return null;",
      "      // meta",
      "      this._getMeta(item);",
      "      // ok",
      "      return item;",
      "    }",
      "",
      "    async select({ atomClass, options, items, user }) {",
      "      // super",
      "      await super.select({ atomClass, options, items, user });",
      "      // meta",
      "      for (const item of items) {",
      "        this._getMeta(item);",
      "      }",
      "    }",
      "",
      "    async write({ atomClass, target, key, item, options, user }) {",
      "      // super",
      "      await super.write({ atomClass, target, key, item, options, user });",
      "      // update ${1:modelName}",
      "      const data = await this.ctx.model.${1:modelName}.prepareData(item);",
      "      data.id = key.itemId;",
      "      await this.ctx.model.${1:modelName}.update(data);",
      "    }",
      "",
      "    async delete({ atomClass, key, user }) {",
      "      // super",
      "      await super.delete({ atomClass, key, user });",
      "      // delete ${1:modelName}",
      "      await this.ctx.model.${1:modelName}.delete({",
      "        id: key.itemId,",
      "      });",
      "    }",
      "",
      "    _getMeta(item) {",
      "      const meta = this._ensureItemMeta(item);",
      "      // meta.flags",
      "      // meta.summary",
      "      meta.summary = item.description;",
      "    }",
      "",
      "  }",
      "",
      "  return Atom;",
      "};",
      ""
    ],
    "description": "Cabloy Atom"
  },
  "Cabloy Broadcast": {
    "prefix": "cabloy broadcast",
    "body": [
      "module.exports = app => {",
      "  class Broadcast extends app.meta.BeanBase {",
      "",
      "    async execute(context) {",
      "      const sameAsCaller = context.sameAsCaller;",
      "      const data = context.data;",
      "      if (!sameAsCaller) {",
      "        // do something",
      "      }",
      "    }",
      "",
      "  }",
      "",
      "  return Broadcast;",
      "};",
      ""
    ],
    "description": "Cabloy Broadcast"
  },
  "Cabloy Event": {
    "prefix": "cabloy event",
    "body": [
      "module.exports = ctx => {",
      "  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);",
      "  class EventBean {",
      "",
      "    async execute(context, next) {",
      "      const data = context.data;",
      "      // context.result = `${context.result}.echo`;",
      "      await next();",
      "      // context.result = `echo.${context.result}`;",
      "    }",
      "",
      "  }",
      "",
      "  return EventBean;",
      "};",
      ""
    ],
    "description": "Cabloy Event"
  },
  "Cabloy Local": {
    "prefix": "cabloy local",
    "body": [
      "module.exports = ctx => {",
      "  class Local {",
      "",
      "  }",
      "",
      "  return Local;",
      "};",
      ""
    ],
    "description": "Cabloy Local"
  },
  "Cabloy Middleware": {
    "prefix": "cabloy middleware",
    "body": [
      "module.exports = ctx => {",
      "  class Middleware {",
      "    async execute(options, next) {",
      "      // next",
      "      await next();",
      "    }",
      "  }",
      "  return Middleware;",
      "};",
      ""
    ],
    "description": "Cabloy Middleware"
  },
  "Cabloy Queue": {
    "prefix": "cabloy queue",
    "body": [
      "module.exports = app => {",
      "  class Queue extends app.meta.BeanBase {",
      "",
      "    async execute(context) {",
      "      const data = context.data;",
      "    }",
      "",
      "  }",
      "",
      "  return Queue;",
      "};",
      ""
    ],
    "description": "Cabloy Queue"
  },
  "Cabloy Schedule": {
    "prefix": "cabloy schedule",
    "body": [
      "module.exports = app => {",
      "  class Schedule extends app.meta.BeanBase {",
      "",
      "    async execute(context) {",
      "      const job = context.job;",
      "      // console.log(`----- Schedule Test: iid=${this.ctx.instance.id}, every=${job.data.jobOptions.repeat.every}, ${new Date()}`);",
      "    }",
      "",
      "  }",
      "",
      "  return Schedule;",
      "};",
      ""
    ],
    "description": "Cabloy Schedule"
  },
  "Cabloy Sequence": {
    "prefix": "cabloy sequence",
    "body": [
      "module.exports = ctx => {",
      "  class Sequence {",
      "",
      "    async execute(context) {",
      "      let value = context.value;",
      "      return ++value;",
      "    }",
      "",
      "  }",
      "",
      "  return Sequence;",
      "};",
      ""
    ],
    "description": "Cabloy Sequence"
  },
  "Cabloy Startup": {
    "prefix": "cabloy startup",
    "body": [
      "module.exports = app => {",
      "  class Startup extends app.meta.BeanBase {",
      "",
      "    async execute() {",
      "    }",
      "",
      "  }",
      "",
      "  return Startup;",
      "};",
      ""
    ],
    "description": "Cabloy Startup"
  },
  "Cabloy Stats": {
    "prefix": "cabloy stats",
    "body": [
      "module.exports = ctx => {",
      "  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);",
      "  class Stats {",
      "",
      "    async execute(context) {",
      "      const { keys, user } = context;",
      "      const fullName = keys.join('.');",
      "      const valueOld = await ctx.bean.stats._get({",
      "        module: moduleInfo.relativeName,",
      "        fullName,",
      "        user,",
      "      });",
      "      if (valueOld === undefined) return 1;",
      "      return valueOld + 1;",
      "    }",
      "",
      "  }",
      "",
      "  return Stats;",
      "};",
      ""
    ],
    "description": "Cabloy Stats"
  },
  "Cabloy Test": {
    "prefix": "cabloy test",
    "body": [
      "const { app, mockUrl, mockInfo, assert } = require('egg-born-mock')(__dirname);",
      "",
      "describe('action test', () => {",
      "  it('[test]', async () => {",
      "    app.mockSession({});",
      "",
      "    // login as root",
      "    await app.httpRequest().post(mockUrl('/a/authsimple/passport/a-authsimple/authsimple')).send({",
      "      data: {",
      "        auth: 'root',",
      "        password: '123456',",
      "      },",
      "    });",
      "",
      "  });",
      "});",
      ""
    ],
    "description": "Cabloy Test"
  }
}
